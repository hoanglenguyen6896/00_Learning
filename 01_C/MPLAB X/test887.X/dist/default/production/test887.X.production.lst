

Microchip Technology PIC LITE Macro Assembler V1.41 build -162212810 
                                                                                               Fri Jan 18 01:18:19 2019

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2
    11                           	psect	text3,local,class=CODE,merge=1,delta=2
    12                           	psect	text4,local,class=CODE,merge=1,delta=2
    13                           	psect	text5,local,class=CODE,merge=1,delta=2
    14                           	psect	text6,local,class=CODE,merge=1,delta=2
    15                           	psect	text7,local,class=CODE,merge=1,delta=2
    16                           	psect	text8,local,class=CODE,merge=1,delta=2
    17                           	psect	text9,local,class=CODE,merge=1,delta=2
    18                           	dabs	1,0x7E,2
    19  0000                     
    20                           ; Version 1.41
    21                           ; Generated 25/01/2017 GMT
    22                           ; 
    23                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    24                           ; All rights reserved.
    25                           ; 
    26                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    27                           ; 
    28                           ; Redistribution and use in source and binary forms, with or without modification, are
    29                           ; permitted provided that the following conditions are met:
    30                           ; 
    31                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    32                           ;        conditions and the following disclaimer.
    33                           ; 
    34                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    35                           ;        of conditions and the following disclaimer in the documentation and/or other
    36                           ;        materials provided with the distribution.
    37                           ; 
    38                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    39                           ;        software without specific prior written permission.
    40                           ; 
    41                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    42                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    43                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    44                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    45                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    46                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    47                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    48                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    49                           ; 
    50                           ; 
    51                           ; Code-generator required, PIC16F887 Definitions
    52                           ; 
    53                           ; SFR Addresses
    54  0000                     	;# 
    55  0001                     	;# 
    56  0002                     	;# 
    57  0003                     	;# 
    58  0004                     	;# 
    59  0005                     	;# 
    60  0006                     	;# 
    61  0007                     	;# 
    62  0008                     	;# 
    63  0009                     	;# 
    64  000A                     	;# 
    65  000B                     	;# 
    66  000C                     	;# 
    67  000D                     	;# 
    68  000E                     	;# 
    69  000E                     	;# 
    70  000F                     	;# 
    71  0010                     	;# 
    72  0011                     	;# 
    73  0012                     	;# 
    74  0013                     	;# 
    75  0014                     	;# 
    76  0015                     	;# 
    77  0015                     	;# 
    78  0016                     	;# 
    79  0017                     	;# 
    80  0018                     	;# 
    81  0019                     	;# 
    82  001A                     	;# 
    83  001B                     	;# 
    84  001B                     	;# 
    85  001C                     	;# 
    86  001D                     	;# 
    87  001E                     	;# 
    88  001F                     	;# 
    89  0081                     	;# 
    90  0085                     	;# 
    91  0086                     	;# 
    92  0087                     	;# 
    93  0088                     	;# 
    94  0089                     	;# 
    95  008C                     	;# 
    96  008D                     	;# 
    97  008E                     	;# 
    98  008F                     	;# 
    99  0090                     	;# 
   100  0091                     	;# 
   101  0092                     	;# 
   102  0093                     	;# 
   103  0093                     	;# 
   104  0093                     	;# 
   105  0094                     	;# 
   106  0095                     	;# 
   107  0096                     	;# 
   108  0097                     	;# 
   109  0098                     	;# 
   110  0099                     	;# 
   111  009A                     	;# 
   112  009B                     	;# 
   113  009C                     	;# 
   114  009D                     	;# 
   115  009E                     	;# 
   116  009F                     	;# 
   117  0105                     	;# 
   118  0107                     	;# 
   119  0108                     	;# 
   120  0109                     	;# 
   121  010C                     	;# 
   122  010C                     	;# 
   123  010D                     	;# 
   124  010E                     	;# 
   125  010F                     	;# 
   126  0185                     	;# 
   127  0187                     	;# 
   128  0188                     	;# 
   129  0189                     	;# 
   130  018C                     	;# 
   131  018D                     	;# 
   132  0046                     _RD6	set	70
   133  0047                     _RD7	set	71
   134  0042                     _RD2	set	66
   135  0043                     _RD3	set	67
   136  0044                     _RD4	set	68
   137  0045                     _RD5	set	69
   138  0088                     _TRISD	set	136
   139                           
   140                           	psect	strings
   141  0003                     __pstrings:	
   142  0003                     stringtab:	
   143  0003                     __stringtab:	
   144  0003                     stringcode:	
   145                           ;	String table - string pointers are 1 byte each
   146                           
   147  0003                     stringdir:	
   148  0003  3000               	movlw	high stringdir
   149  0004  008A               	movwf	10
   150  0005  0804               	movf	4,w
   151  0006  0A84               	incf	4,f
   152  0007  0782               	addwf	2,f
   153  0008                     __stringbase:	
   154  0008  3400               	retlw	0
   155  0009                     __end_of__stringtab:	
   156  0009                     STR_3:	
   157  0009  3448               	retlw	72	;'H'
   158  000A  3454               	retlw	84	;'T'
   159  000B  3454               	retlw	84	;'T'
   160  000C  3450               	retlw	80	;'P'
   161  000D  343A               	retlw	58	;':'
   162  000E  342F               	retlw	47	;'/'
   163  000F  342F               	retlw	47	;'/'
   164  0010  3458               	retlw	88	;'X'
   165  0011  3443               	retlw	67	;'C'
   166  0012  3456               	retlw	86	;'V'
   167  0013  344E               	retlw	78	;'N'
   168  0014  342E               	retlw	46	;'.'
   169  0015  3442               	retlw	66	;'B'
   170  0016  344C               	retlw	76	;'L'
   171  0017  344F               	retlw	79	;'O'
   172  0018  3447               	retlw	71	;'G'
   173  0019  3453               	retlw	83	;'S'
   174  001A  3450               	retlw	80	;'P'
   175  001B  344F               	retlw	79	;'O'
   176  001C  3454               	retlw	84	;'T'
   177  001D  342E               	retlw	46	;'.'
   178  001E  3443               	retlw	67	;'C'
   179  001F  344F               	retlw	79	;'O'
   180  0020  344D               	retlw	77	;'M'
   181  0021  3400               	retlw	0
   182  0022                     STR_2:	
   183  0022  3420               	retlw	32	;' '
   184  0023  3442               	retlw	66	;'B'
   185  0024  3459               	retlw	89	;'Y'
   186  0025  3420               	retlw	32	;' '
   187  0026  344C               	retlw	76	;'L'
   188  0027  3441               	retlw	65	;'A'
   189  0028  344D               	retlw	77	;'M'
   190  0029  3420               	retlw	32	;' '
   191  002A  3433               	retlw	51	;'3'
   192  002B  3420               	retlw	32	;' '
   193  002C  344E               	retlw	78	;'N'
   194  002D  3447               	retlw	71	;'G'
   195  002E  344F               	retlw	79	;'O'
   196  002F  344E               	retlw	78	;'N'
   197  0030  3420               	retlw	32	;' '
   198  0031  3400               	retlw	0
   199  0032                     STR_1:	
   200  0032  3420               	retlw	32	;' '
   201  0033  344C               	retlw	76	;'L'
   202  0034  3443               	retlw	67	;'C'
   203  0035  3444               	retlw	68	;'D'
   204  0036  3420               	retlw	32	;' '
   205  0037  3431               	retlw	49	;'1'
   206  0038  3436               	retlw	54	;'6'
   207  0039  3458               	retlw	88	;'X'
   208  003A  3432               	retlw	50	;'2'
   209  003B  3420               	retlw	32	;' '
   210  003C  3444               	retlw	68	;'D'
   211  003D  3445               	retlw	69	;'E'
   212  003E  344D               	retlw	77	;'M'
   213  003F  344F               	retlw	79	;'O'
   214  0040  3420               	retlw	32	;' '
   215  0041  3400               	retlw	0
   216  0042                     STR_4:	
   217  0042  3420               	retlw	32	;' '
   218  0043  3420               	retlw	32	;' '
   219  0044  3454               	retlw	84	;'T'
   220  0045  3448               	retlw	72	;'H'
   221  0046  3441               	retlw	65	;'A'
   222  0047  344E               	retlw	78	;'N'
   223  0048  344B               	retlw	75	;'K'
   224  0049  3453               	retlw	83	;'S'
   225  004A  3420               	retlw	32	;' '
   226  004B  3459               	retlw	89	;'Y'
   227  004C  344F               	retlw	79	;'O'
   228  004D  3455               	retlw	85	;'U'
   229  004E  3420               	retlw	32	;' '
   230  004F  3400               	retlw	0
   231                           
   232                           ; #config settings
   233  0000                     
   234                           	psect	cinit
   235  07FC                     start_initialization:	
   236  07FC                     __initialization:	
   237  07FC                     end_of_initialization:	
   238                           ;End of C runtime variable initialization code
   239                           
   240  07FC                     __end_of__initialization:	
   241  07FC  0183               	clrf	3
   242  07FD  120A  118A  2F3E   	ljmp	_main	;jump to C main() function
   243                           
   244                           	psect	cstackCOMMON
   245  0070                     __pcstackCOMMON:	
   246  0070                     ?_Lcd_Port:	
   247  0070                     ??_Lcd_Port:	
   248                           ; 1 bytes @ 0x0
   249                           
   250  0070                     ?_Lcd_Cmd:	
   251                           ; 1 bytes @ 0x0
   252                           
   253  0070                     ?_Lcd_Init:	
   254                           ; 1 bytes @ 0x0
   255                           
   256  0070                     ?_Lcd_Print_Char:	
   257                           ; 1 bytes @ 0x0
   258                           
   259  0070                     ?_Lcd_Print_String:	
   260                           ; 1 bytes @ 0x0
   261                           
   262  0070                     ?_Lcd_Shift_Right:	
   263                           ; 1 bytes @ 0x0
   264                           
   265  0070                     ?_Lcd_Shift_Left:	
   266                           ; 1 bytes @ 0x0
   267                           
   268  0070                     ?_main:	
   269                           ; 1 bytes @ 0x0
   270                           
   271  0070                     ?_Lcd_Clear:	
   272                           ; 1 bytes @ 0x0
   273                           
   274  0070                     Lcd_Port@a:	
   275                           ; 2 bytes @ 0x0
   276                           
   277                           
   278                           ; 1 bytes @ 0x0
   279  0070                     	ds	1
   280  0071                     ??_Lcd_Cmd:	
   281  0071                     ??_Lcd_Print_Char:	
   282                           ; 1 bytes @ 0x1
   283                           
   284                           
   285                           ; 1 bytes @ 0x1
   286  0071                     	ds	1
   287  0072                     Lcd_Print_Char@temp:	
   288                           
   289                           ; 1 bytes @ 0x2
   290  0072                     	ds	1
   291  0073                     Lcd_Cmd@a:	
   292  0073                     Lcd_Print_Char@y:	
   293                           ; 1 bytes @ 0x3
   294                           
   295                           
   296                           ; 1 bytes @ 0x3
   297  0073                     	ds	1
   298  0074                     ??_Lcd_Clear:	
   299  0074                     ?_Lcd_Set_Cursor:	
   300                           ; 1 bytes @ 0x4
   301                           
   302  0074                     ??_Lcd_Init:	
   303                           ; 1 bytes @ 0x4
   304                           
   305  0074                     ??_Lcd_Shift_Right:	
   306                           ; 1 bytes @ 0x4
   307                           
   308  0074                     ??_Lcd_Shift_Left:	
   309                           ; 1 bytes @ 0x4
   310                           
   311  0074                     Lcd_Set_Cursor@b:	
   312                           ; 1 bytes @ 0x4
   313                           
   314  0074                     Lcd_Print_Char@a:	
   315                           ; 1 bytes @ 0x4
   316                           
   317                           
   318                           ; 1 bytes @ 0x4
   319  0074                     	ds	1
   320  0075                     ??_Lcd_Set_Cursor:	
   321  0075                     ??_Lcd_Print_String:	
   322                           ; 1 bytes @ 0x5
   323                           
   324  0075                     Lcd_Print_String@i:	
   325                           ; 1 bytes @ 0x5
   326                           
   327                           
   328                           ; 2 bytes @ 0x5
   329  0075                     	ds	2
   330  0077                     Lcd_Set_Cursor@a:	
   331  0077                     Lcd_Print_String@a:	
   332                           ; 1 bytes @ 0x7
   333                           
   334                           
   335                           ; 1 bytes @ 0x7
   336  0077                     	ds	1
   337  0078                     Lcd_Set_Cursor@z:	
   338                           
   339                           ; 1 bytes @ 0x8
   340  0078                     	ds	1
   341  0079                     Lcd_Set_Cursor@y:	
   342                           
   343                           ; 1 bytes @ 0x9
   344  0079                     	ds	1
   345  007A                     Lcd_Set_Cursor@temp:	
   346                           
   347                           ; 1 bytes @ 0xA
   348  007A                     	ds	1
   349  007B                     ??_main:	
   350                           
   351                           ; 1 bytes @ 0xB
   352  007B                     	ds	3
   353                           
   354                           	psect	cstackBANK0
   355  0020                     __pcstackBANK0:	
   356  0020                     main@a:	
   357                           
   358                           ; 2 bytes @ 0x0
   359  0020                     	ds	2
   360                           
   361                           	psect	maintext
   362  073E                     __pmaintext:	
   363 ;;
   364 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   365 ;;
   366 ;; *************** function _main *****************
   367 ;; Defined at:
   368 ;;		line 29 in file "mainX.c"
   369 ;; Parameters:    Size  Location     Type
   370 ;;		None
   371 ;; Auto vars:     Size  Location     Type
   372 ;;  s              20    0        unsigned char [20]
   373 ;;  a               2    0[BANK0 ] unsigned int 
   374 ;; Return value:  Size  Location     Type
   375 ;;                  1    wreg      void 
   376 ;; Registers used:
   377 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   378 ;; Tracked objects:
   379 ;;		On entry : B00/0
   380 ;;		On exit  : 0/0
   381 ;;		Unchanged: 0/0
   382 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   383 ;;      Params:         0       0       0       0       0
   384 ;;      Locals:         0       2       0       0       0
   385 ;;      Temps:          3       0       0       0       0
   386 ;;      Totals:         3       2       0       0       0
   387 ;;Total ram usage:        5 bytes
   388 ;; Hardware stack levels required when called:    3
   389 ;; This function calls:
   390 ;;		_Lcd_Clear
   391 ;;		_Lcd_Init
   392 ;;		_Lcd_Print_String
   393 ;;		_Lcd_Set_Cursor
   394 ;;		_Lcd_Shift_Left
   395 ;;		_Lcd_Shift_Right
   396 ;; This function is called by:
   397 ;;		Startup code after reset
   398 ;; This function uses a non-reentrant model
   399 ;;
   400                           
   401                           
   402                           ;psect for function _main
   403  073E                     _main:	
   404                           
   405                           ;mainX.c: 31: char s[20];
   406                           ;mainX.c: 32: unsigned int a;
   407                           ;mainX.c: 33: TRISD = 0x00;
   408                           
   409                           ;incstack = 0
   410                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   411  073E  1683               	bsf	3,5	;RP0=1, select bank1
   412  073F  1303               	bcf	3,6	;RP1=0, select bank1
   413  0740  0188               	clrf	8	;volatile
   414                           
   415                           ;mainX.c: 34: Lcd_Init();
   416  0741  120A  118A  26E4  120A  118A  	fcall	_Lcd_Init
   417  0746                     l755:	
   418                           ;mainX.c: 35: while(1)
   419                           
   420                           
   421                           ;mainX.c: 36: {
   422                           ;mainX.c: 37: Lcd_Clear();
   423  0746  120A  118A  25EA  120A  118A  	fcall	_Lcd_Clear
   424                           
   425                           ;mainX.c: 38: Lcd_Set_Cursor(1,1);
   426  074B  01F4               	clrf	Lcd_Set_Cursor@b
   427  074C  0AF4               	incf	Lcd_Set_Cursor@b,f
   428  074D  3001               	movlw	1
   429  074E  120A  118A  269A  120A  118A  	fcall	_Lcd_Set_Cursor
   430                           
   431                           ;mainX.c: 39: Lcd_Print_String(" LCD 16X2 DEMO ");
   432  0753  302A               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   433  0754  120A  118A  263F  120A  118A  	fcall	_Lcd_Print_String
   434                           
   435                           ;mainX.c: 40: Lcd_Set_Cursor(2,1);
   436  0759  01F4               	clrf	Lcd_Set_Cursor@b
   437  075A  0AF4               	incf	Lcd_Set_Cursor@b,f
   438  075B  3002               	movlw	2
   439  075C  120A  118A  269A  120A  118A  	fcall	_Lcd_Set_Cursor
   440                           
   441                           ;mainX.c: 41: Lcd_Print_String(" BY LAM 3 NGON ");
   442  0761  301A               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   443  0762  120A  118A  263F  120A  118A  	fcall	_Lcd_Print_String
   444                           
   445                           ;mainX.c: 42: _delay((unsigned long)((2000)*(11059200/4000.0)));
   446  0767  301D               	movlw	29
   447  0768  00FD               	movwf	??_main+2
   448  0769  300E               	movlw	14
   449  076A  00FC               	movwf	??_main+1
   450  076B  3037               	movlw	55
   451  076C  00FB               	movwf	??_main
   452  076D                     u297:	
   453  076D  0BFB               	decfsz	??_main,f
   454  076E  2F6D               	goto	u297
   455  076F  0BFC               	decfsz	??_main+1,f
   456  0770  2F6D               	goto	u297
   457  0771  0BFD               	decfsz	??_main+2,f
   458  0772  2F6D               	goto	u297
   459                           
   460                           ;mainX.c: 43: Lcd_Clear();
   461  0773  120A  118A  25EA  120A  118A  	fcall	_Lcd_Clear
   462                           
   463                           ;mainX.c: 44: Lcd_Set_Cursor(1,1);
   464  0778  01F4               	clrf	Lcd_Set_Cursor@b
   465  0779  0AF4               	incf	Lcd_Set_Cursor@b,f
   466  077A  3001               	movlw	1
   467  077B  120A  118A  269A  120A  118A  	fcall	_Lcd_Set_Cursor
   468                           
   469                           ;mainX.c: 45: Lcd_Print_String("HTTP://XCVN.BLOGSPOT.COM");
   470  0780  3001               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
   471  0781  120A  118A  263F  120A  118A  	fcall	_Lcd_Print_String
   472                           
   473                           ;mainX.c: 47: for(a=0;a<15;a++)
   474  0786  1283               	bcf	3,5	;RP0=0, select bank0
   475  0787  1303               	bcf	3,6	;RP1=0, select bank0
   476  0788  01A0               	clrf	main@a
   477  0789  01A1               	clrf	main@a+1
   478  078A  3000               	movlw	0
   479  078B  0221               	subwf	main@a+1,w
   480  078C  300F               	movlw	15
   481  078D  1903               	skipnz
   482  078E  0220               	subwf	main@a,w
   483  078F  1803               	btfsc	3,0
   484  0790  2FB2               	goto	l787
   485  0791                     l779:	
   486                           
   487                           ;mainX.c: 48: {
   488                           ;mainX.c: 49: _delay((unsigned long)((300)*(11059200/4000.0)));
   489  0791  3005               	movlw	5
   490  0792  00FD               	movwf	??_main+2
   491  0793  3036               	movlw	54
   492  0794  00FC               	movwf	??_main+1
   493  0795  302C               	movlw	44
   494  0796  00FB               	movwf	??_main
   495  0797                     u307:	
   496  0797  0BFB               	decfsz	??_main,f
   497  0798  2F97               	goto	u307
   498  0799  0BFC               	decfsz	??_main+1,f
   499  079A  2F97               	goto	u307
   500  079B  0BFD               	decfsz	??_main+2,f
   501  079C  2F97               	goto	u307
   502  079D  0000               	nop
   503                           
   504                           ;mainX.c: 50: Lcd_Shift_Left();
   505  079E  120A  118A  25F5  120A  118A  	fcall	_Lcd_Shift_Left
   506  07A3  3001               	movlw	1
   507  07A4  1283               	bcf	3,5	;RP0=0, select bank0
   508  07A5  1303               	bcf	3,6	;RP1=0, select bank0
   509  07A6  07A0               	addwf	main@a,f
   510  07A7  1803               	skipnc
   511  07A8  0AA1               	incf	main@a+1,f
   512  07A9  3000               	movlw	0
   513  07AA  07A1               	addwf	main@a+1,f
   514  07AB  3000               	movlw	0
   515  07AC  0221               	subwf	main@a+1,w
   516  07AD  300F               	movlw	15
   517  07AE  1903               	skipnz
   518  07AF  0220               	subwf	main@a,w
   519  07B0  1C03               	skipc
   520  07B1  2F91               	goto	l779
   521  07B2                     l787:	
   522                           
   523                           ;mainX.c: 51: }
   524                           ;mainX.c: 53: for(a=0;a<15;a++)
   525  07B2  01A0               	clrf	main@a
   526  07B3  01A1               	clrf	main@a+1
   527  07B4  3000               	movlw	0
   528  07B5  0221               	subwf	main@a+1,w
   529  07B6  300F               	movlw	15
   530  07B7  1903               	skipnz
   531  07B8  0220               	subwf	main@a,w
   532  07B9  1803               	btfsc	3,0
   533  07BA  2FDC               	goto	l801
   534  07BB                     l793:	
   535                           
   536                           ;mainX.c: 54: {
   537                           ;mainX.c: 55: _delay((unsigned long)((300)*(11059200/4000.0)));
   538  07BB  3005               	movlw	5
   539  07BC  00FD               	movwf	??_main+2
   540  07BD  3036               	movlw	54
   541  07BE  00FC               	movwf	??_main+1
   542  07BF  302C               	movlw	44
   543  07C0  00FB               	movwf	??_main
   544  07C1                     u317:	
   545  07C1  0BFB               	decfsz	??_main,f
   546  07C2  2FC1               	goto	u317
   547  07C3  0BFC               	decfsz	??_main+1,f
   548  07C4  2FC1               	goto	u317
   549  07C5  0BFD               	decfsz	??_main+2,f
   550  07C6  2FC1               	goto	u317
   551  07C7  0000               	nop
   552                           
   553                           ;mainX.c: 56: Lcd_Shift_Right();
   554  07C8  120A  118A  2600  120A  118A  	fcall	_Lcd_Shift_Right
   555  07CD  3001               	movlw	1
   556  07CE  1283               	bcf	3,5	;RP0=0, select bank0
   557  07CF  1303               	bcf	3,6	;RP1=0, select bank0
   558  07D0  07A0               	addwf	main@a,f
   559  07D1  1803               	skipnc
   560  07D2  0AA1               	incf	main@a+1,f
   561  07D3  3000               	movlw	0
   562  07D4  07A1               	addwf	main@a+1,f
   563  07D5  3000               	movlw	0
   564  07D6  0221               	subwf	main@a+1,w
   565  07D7  300F               	movlw	15
   566  07D8  1903               	skipnz
   567  07D9  0220               	subwf	main@a,w
   568  07DA  1C03               	skipc
   569  07DB  2FBB               	goto	l793
   570  07DC                     l801:	
   571                           
   572                           ;mainX.c: 57: }
   573                           ;mainX.c: 59: Lcd_Clear();
   574  07DC  120A  118A  25EA  120A  118A  	fcall	_Lcd_Clear
   575                           
   576                           ;mainX.c: 60: Lcd_Set_Cursor(2,1);
   577  07E1  01F4               	clrf	Lcd_Set_Cursor@b
   578  07E2  0AF4               	incf	Lcd_Set_Cursor@b,f
   579  07E3  3002               	movlw	2
   580  07E4  120A  118A  269A  120A  118A  	fcall	_Lcd_Set_Cursor
   581                           
   582                           ;mainX.c: 61: Lcd_Print_String("  THANKS YOU ");
   583  07E9  303A               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
   584  07EA  120A  118A  263F  120A  118A  	fcall	_Lcd_Print_String
   585                           
   586                           ;mainX.c: 62: _delay((unsigned long)((2000)*(11059200/4000.0)));
   587  07EF  301D               	movlw	29
   588  07F0  00FD               	movwf	??_main+2
   589  07F1  300E               	movlw	14
   590  07F2  00FC               	movwf	??_main+1
   591  07F3  3037               	movlw	55
   592  07F4  00FB               	movwf	??_main
   593  07F5                     u327:	
   594  07F5  0BFB               	decfsz	??_main,f
   595  07F6  2FF5               	goto	u327
   596  07F7  0BFC               	decfsz	??_main+1,f
   597  07F8  2FF5               	goto	u327
   598  07F9  0BFD               	decfsz	??_main+2,f
   599  07FA  2FF5               	goto	u327
   600  07FB  2F46               	goto	l755
   601  07FC                     __end_of_main:	
   602                           
   603                           	psect	text1
   604  0600                     __ptext1:	
   605 ;; *************** function _Lcd_Shift_Right *****************
   606 ;; Defined at:
   607 ;;		line 104 in file "LCD.h"
   608 ;; Parameters:    Size  Location     Type
   609 ;;		None
   610 ;; Auto vars:     Size  Location     Type
   611 ;;		None
   612 ;; Return value:  Size  Location     Type
   613 ;;                  1    wreg      void 
   614 ;; Registers used:
   615 ;;		wreg, status,2, status,0, pclath, cstack
   616 ;; Tracked objects:
   617 ;;		On entry : 0/0
   618 ;;		On exit  : 0/0
   619 ;;		Unchanged: 0/0
   620 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   621 ;;      Params:         0       0       0       0       0
   622 ;;      Locals:         0       0       0       0       0
   623 ;;      Temps:          0       0       0       0       0
   624 ;;      Totals:         0       0       0       0       0
   625 ;;Total ram usage:        0 bytes
   626 ;; Hardware stack levels used:    1
   627 ;; Hardware stack levels required when called:    2
   628 ;; This function calls:
   629 ;;		_Lcd_Cmd
   630 ;; This function is called by:
   631 ;;		_main
   632 ;; This function uses a non-reentrant model
   633 ;;
   634                           
   635                           
   636                           ;psect for function _Lcd_Shift_Right
   637  0600                     _Lcd_Shift_Right:	
   638                           
   639                           ;LCD.h: 106: Lcd_Cmd(0x01);
   640                           
   641                           ;incstack = 0
   642                           ; Regs used in _Lcd_Shift_Right: [wreg+status,2+status,0+pclath+cstack]
   643  0600  3001               	movlw	1
   644  0601  120A  118A  2625  120A  118A  	fcall	_Lcd_Cmd
   645                           
   646                           ;LCD.h: 107: Lcd_Cmd(0x0C);
   647  0606  300C               	movlw	12
   648  0607  120A  118A  2625   	fcall	_Lcd_Cmd
   649  060A  0008               	return
   650  060B                     __end_of_Lcd_Shift_Right:	
   651                           
   652                           	psect	text2
   653  05F5                     __ptext2:	
   654 ;; *************** function _Lcd_Shift_Left *****************
   655 ;; Defined at:
   656 ;;		line 110 in file "LCD.h"
   657 ;; Parameters:    Size  Location     Type
   658 ;;		None
   659 ;; Auto vars:     Size  Location     Type
   660 ;;		None
   661 ;; Return value:  Size  Location     Type
   662 ;;                  1    wreg      void 
   663 ;; Registers used:
   664 ;;		wreg, status,2, status,0, pclath, cstack
   665 ;; Tracked objects:
   666 ;;		On entry : 0/0
   667 ;;		On exit  : 0/0
   668 ;;		Unchanged: 0/0
   669 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   670 ;;      Params:         0       0       0       0       0
   671 ;;      Locals:         0       0       0       0       0
   672 ;;      Temps:          0       0       0       0       0
   673 ;;      Totals:         0       0       0       0       0
   674 ;;Total ram usage:        0 bytes
   675 ;; Hardware stack levels used:    1
   676 ;; Hardware stack levels required when called:    2
   677 ;; This function calls:
   678 ;;		_Lcd_Cmd
   679 ;; This function is called by:
   680 ;;		_main
   681 ;; This function uses a non-reentrant model
   682 ;;
   683                           
   684                           
   685                           ;psect for function _Lcd_Shift_Left
   686  05F5                     _Lcd_Shift_Left:	
   687                           
   688                           ;LCD.h: 112: Lcd_Cmd(0x01);
   689                           
   690                           ;incstack = 0
   691                           ; Regs used in _Lcd_Shift_Left: [wreg+status,2+status,0+pclath+cstack]
   692  05F5  3001               	movlw	1
   693  05F6  120A  118A  2625  120A  118A  	fcall	_Lcd_Cmd
   694                           
   695                           ;LCD.h: 113: Lcd_Cmd(0x08);
   696  05FB  3008               	movlw	8
   697  05FC  120A  118A  2625   	fcall	_Lcd_Cmd
   698  05FF  0008               	return
   699  0600                     __end_of_Lcd_Shift_Left:	
   700                           
   701                           	psect	text3
   702  069A                     __ptext3:	
   703 ;; *************** function _Lcd_Set_Cursor *****************
   704 ;; Defined at:
   705 ;;		line 41 in file "LCD.h"
   706 ;; Parameters:    Size  Location     Type
   707 ;;  a               1    wreg     unsigned char 
   708 ;;  b               1    4[COMMON] unsigned char 
   709 ;; Auto vars:     Size  Location     Type
   710 ;;  a               1    7[COMMON] unsigned char 
   711 ;;  temp            1   10[COMMON] unsigned char 
   712 ;;  y               1    9[COMMON] unsigned char 
   713 ;;  z               1    8[COMMON] unsigned char 
   714 ;; Return value:  Size  Location     Type
   715 ;;                  1    wreg      void 
   716 ;; Registers used:
   717 ;;		wreg, status,2, status,0, pclath, cstack
   718 ;; Tracked objects:
   719 ;;		On entry : 0/0
   720 ;;		On exit  : 0/0
   721 ;;		Unchanged: 0/0
   722 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   723 ;;      Params:         1       0       0       0       0
   724 ;;      Locals:         4       0       0       0       0
   725 ;;      Temps:          2       0       0       0       0
   726 ;;      Totals:         7       0       0       0       0
   727 ;;Total ram usage:        7 bytes
   728 ;; Hardware stack levels used:    1
   729 ;; Hardware stack levels required when called:    2
   730 ;; This function calls:
   731 ;;		_Lcd_Cmd
   732 ;; This function is called by:
   733 ;;		_main
   734 ;; This function uses a non-reentrant model
   735 ;;
   736                           
   737                           
   738                           ;psect for function _Lcd_Set_Cursor
   739  069A                     _Lcd_Set_Cursor:	
   740                           
   741                           ;incstack = 0
   742                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
   743                           ;Lcd_Set_Cursor@a stored from wreg
   744  069A  00F7               	movwf	Lcd_Set_Cursor@a
   745                           
   746                           ;LCD.h: 43: char temp,z,y;
   747                           ;LCD.h: 44: if(a == 1)
   748  069B  0377               	decf	Lcd_Set_Cursor@a,w
   749  069C  1D03               	btfss	3,2
   750  069D  2EBF               	goto	l719
   751                           
   752                           ;LCD.h: 45: {
   753                           ;LCD.h: 46: temp = 0x80 + b - 1;
   754  069E  0874               	movf	Lcd_Set_Cursor@b,w
   755  069F  3E7F               	addlw	127
   756  06A0  00F5               	movwf	??_Lcd_Set_Cursor
   757  06A1  0875               	movf	??_Lcd_Set_Cursor,w
   758  06A2  00FA               	movwf	Lcd_Set_Cursor@temp
   759                           
   760                           ;LCD.h: 47: z = temp>>4;
   761  06A3  087A               	movf	Lcd_Set_Cursor@temp,w
   762  06A4  00F5               	movwf	??_Lcd_Set_Cursor
   763  06A5  3004               	movlw	4
   764  06A6                     u215:	
   765  06A6  1003               	clrc
   766  06A7  0CF5               	rrf	??_Lcd_Set_Cursor,f
   767  06A8  3EFF               	addlw	-1
   768  06A9  1D03               	skipz
   769  06AA  2EA6               	goto	u215
   770  06AB  0875               	movf	??_Lcd_Set_Cursor,w
   771  06AC  00F6               	movwf	??_Lcd_Set_Cursor+1
   772  06AD  0876               	movf	??_Lcd_Set_Cursor+1,w
   773  06AE  00F8               	movwf	Lcd_Set_Cursor@z
   774                           
   775                           ;LCD.h: 48: y = temp & 0x0F;
   776  06AF  087A               	movf	Lcd_Set_Cursor@temp,w
   777  06B0  390F               	andlw	15
   778  06B1  00F5               	movwf	??_Lcd_Set_Cursor
   779  06B2  0875               	movf	??_Lcd_Set_Cursor,w
   780  06B3  00F9               	movwf	Lcd_Set_Cursor@y
   781                           
   782                           ;LCD.h: 49: Lcd_Cmd(z);
   783  06B4  0878               	movf	Lcd_Set_Cursor@z,w
   784  06B5  120A  118A  2625  120A  118A  	fcall	_Lcd_Cmd
   785                           
   786                           ;LCD.h: 50: Lcd_Cmd(y);
   787  06BA  0879               	movf	Lcd_Set_Cursor@y,w
   788  06BB  120A  118A  2625   	fcall	_Lcd_Cmd
   789                           
   790                           ;LCD.h: 51: }
   791  06BE  0008               	return
   792  06BF                     l719:	
   793                           
   794                           ;LCD.h: 52: else if(a == 2)
   795  06BF  3002               	movlw	2
   796  06C0  0677               	xorwf	Lcd_Set_Cursor@a,w
   797  06C1  1D03               	btfss	3,2
   798  06C2  0008               	return
   799                           
   800                           ;LCD.h: 53: {
   801                           ;LCD.h: 54: temp = 0xC0 + b - 1;
   802  06C3  0874               	movf	Lcd_Set_Cursor@b,w
   803  06C4  3EBF               	addlw	191
   804  06C5  00F5               	movwf	??_Lcd_Set_Cursor
   805  06C6  0875               	movf	??_Lcd_Set_Cursor,w
   806  06C7  00FA               	movwf	Lcd_Set_Cursor@temp
   807                           
   808                           ;LCD.h: 55: z = temp>>4;
   809  06C8  087A               	movf	Lcd_Set_Cursor@temp,w
   810  06C9  00F5               	movwf	??_Lcd_Set_Cursor
   811  06CA  3004               	movlw	4
   812  06CB                     u235:	
   813  06CB  1003               	clrc
   814  06CC  0CF5               	rrf	??_Lcd_Set_Cursor,f
   815  06CD  3EFF               	addlw	-1
   816  06CE  1D03               	skipz
   817  06CF  2ECB               	goto	u235
   818  06D0  0875               	movf	??_Lcd_Set_Cursor,w
   819  06D1  00F6               	movwf	??_Lcd_Set_Cursor+1
   820  06D2  0876               	movf	??_Lcd_Set_Cursor+1,w
   821  06D3  00F8               	movwf	Lcd_Set_Cursor@z
   822                           
   823                           ;LCD.h: 56: y = temp & 0x0F;
   824  06D4  087A               	movf	Lcd_Set_Cursor@temp,w
   825  06D5  390F               	andlw	15
   826  06D6  00F5               	movwf	??_Lcd_Set_Cursor
   827  06D7  0875               	movf	??_Lcd_Set_Cursor,w
   828  06D8  00F9               	movwf	Lcd_Set_Cursor@y
   829                           
   830                           ;LCD.h: 57: Lcd_Cmd(z);
   831  06D9  0878               	movf	Lcd_Set_Cursor@z,w
   832  06DA  120A  118A  2625  120A  118A  	fcall	_Lcd_Cmd
   833                           
   834                           ;LCD.h: 58: Lcd_Cmd(y);
   835  06DF  0879               	movf	Lcd_Set_Cursor@y,w
   836  06E0  120A  118A  2625   	fcall	_Lcd_Cmd
   837  06E3  0008               	return
   838  06E4                     __end_of_Lcd_Set_Cursor:	
   839                           
   840                           	psect	text4
   841  063F                     __ptext4:	
   842 ;; *************** function _Lcd_Print_String *****************
   843 ;; Defined at:
   844 ;;		line 97 in file "LCD.h"
   845 ;; Parameters:    Size  Location     Type
   846 ;;  a               1    wreg     PTR unsigned char 
   847 ;;		 -> STR_4(14), STR_3(25), STR_2(16), STR_1(16), 
   848 ;; Auto vars:     Size  Location     Type
   849 ;;  a               1    7[COMMON] PTR unsigned char 
   850 ;;		 -> STR_4(14), STR_3(25), STR_2(16), STR_1(16), 
   851 ;;  i               2    5[COMMON] int 
   852 ;; Return value:  Size  Location     Type
   853 ;;                  1    wreg      void 
   854 ;; Registers used:
   855 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   856 ;; Tracked objects:
   857 ;;		On entry : 0/0
   858 ;;		On exit  : 0/0
   859 ;;		Unchanged: 0/0
   860 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   861 ;;      Params:         0       0       0       0       0
   862 ;;      Locals:         3       0       0       0       0
   863 ;;      Temps:          0       0       0       0       0
   864 ;;      Totals:         3       0       0       0       0
   865 ;;Total ram usage:        3 bytes
   866 ;; Hardware stack levels used:    1
   867 ;; Hardware stack levels required when called:    2
   868 ;; This function calls:
   869 ;;		_Lcd_Print_Char
   870 ;; This function is called by:
   871 ;;		_main
   872 ;; This function uses a non-reentrant model
   873 ;;
   874                           
   875                           
   876                           ;psect for function _Lcd_Print_String
   877  063F                     _Lcd_Print_String:	
   878                           
   879                           ;incstack = 0
   880                           ; Regs used in _Lcd_Print_String: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   881                           ;Lcd_Print_String@a stored from wreg
   882  063F  00F7               	movwf	Lcd_Print_String@a
   883                           
   884                           ;LCD.h: 99: int i;
   885                           ;LCD.h: 100: for(i=0;a[i]!='\0';i++)
   886  0640  01F5               	clrf	Lcd_Print_String@i
   887  0641  01F6               	clrf	Lcd_Print_String@i+1
   888  0642                     l745:	
   889  0642  0875               	movf	Lcd_Print_String@i,w
   890  0643  0777               	addwf	Lcd_Print_String@a,w
   891  0644  0084               	movwf	4
   892  0645  120A  118A  2003  120A  118A  	fcall	stringdir
   893  064A  3A00               	xorlw	0
   894  064B  1903               	btfsc	3,2
   895  064C  0008               	return
   896                           
   897                           ;LCD.h: 101: Lcd_Print_Char(a[i]);
   898  064D  0875               	movf	Lcd_Print_String@i,w
   899  064E  0777               	addwf	Lcd_Print_String@a,w
   900  064F  0084               	movwf	4
   901  0650  120A  118A  2003  120A  118A  	fcall	stringdir
   902  0655  120A  118A  2661  120A  118A  	fcall	_Lcd_Print_Char
   903  065A  3001               	movlw	1
   904  065B  07F5               	addwf	Lcd_Print_String@i,f
   905  065C  1803               	skipnc
   906  065D  0AF6               	incf	Lcd_Print_String@i+1,f
   907  065E  3000               	movlw	0
   908  065F  07F6               	addwf	Lcd_Print_String@i+1,f
   909  0660  2E42               	goto	l745
   910  0661                     __end_of_Lcd_Print_String:	
   911                           
   912                           	psect	text5
   913  0661                     __ptext5:	
   914 ;; *************** function _Lcd_Print_Char *****************
   915 ;; Defined at:
   916 ;;		line 81 in file "LCD.h"
   917 ;; Parameters:    Size  Location     Type
   918 ;;  a               1    wreg     unsigned char 
   919 ;; Auto vars:     Size  Location     Type
   920 ;;  a               1    4[COMMON] unsigned char 
   921 ;;  y               1    3[COMMON] unsigned char 
   922 ;;  temp            1    2[COMMON] unsigned char 
   923 ;; Return value:  Size  Location     Type
   924 ;;                  1    wreg      void 
   925 ;; Registers used:
   926 ;;		wreg, status,2, status,0, pclath, cstack
   927 ;; Tracked objects:
   928 ;;		On entry : 0/0
   929 ;;		On exit  : 0/0
   930 ;;		Unchanged: 0/0
   931 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   932 ;;      Params:         0       0       0       0       0
   933 ;;      Locals:         3       0       0       0       0
   934 ;;      Temps:          1       0       0       0       0
   935 ;;      Totals:         4       0       0       0       0
   936 ;;Total ram usage:        4 bytes
   937 ;; Hardware stack levels used:    1
   938 ;; Hardware stack levels required when called:    1
   939 ;; This function calls:
   940 ;;		_Lcd_Port
   941 ;; This function is called by:
   942 ;;		_Lcd_Print_String
   943 ;; This function uses a non-reentrant model
   944 ;;
   945                           
   946                           
   947                           ;psect for function _Lcd_Print_Char
   948  0661                     _Lcd_Print_Char:	
   949                           
   950                           ;incstack = 0
   951                           ; Regs used in _Lcd_Print_Char: [wreg+status,2+status,0+pclath+cstack]
   952                           ;Lcd_Print_Char@a stored from wreg
   953  0661  00F4               	movwf	Lcd_Print_Char@a
   954                           
   955                           ;LCD.h: 83: char temp,y;
   956                           ;LCD.h: 84: temp = a&0x0F;
   957  0662  0874               	movf	Lcd_Print_Char@a,w
   958  0663  390F               	andlw	15
   959  0664  00F1               	movwf	??_Lcd_Print_Char
   960  0665  0871               	movf	??_Lcd_Print_Char,w
   961  0666  00F2               	movwf	Lcd_Print_Char@temp
   962                           
   963                           ;LCD.h: 85: y = a&0xF0;
   964  0667  0874               	movf	Lcd_Print_Char@a,w
   965  0668  39F0               	andlw	240
   966  0669  00F1               	movwf	??_Lcd_Print_Char
   967  066A  0871               	movf	??_Lcd_Print_Char,w
   968  066B  00F3               	movwf	Lcd_Print_Char@y
   969                           
   970                           ;LCD.h: 86: RD7 = 1;
   971  066C  1283               	bcf	3,5	;RP0=0, select bank0
   972  066D  1303               	bcf	3,6	;RP1=0, select bank0
   973  066E  1788               	bsf	8,7	;volatile
   974                           
   975                           ;LCD.h: 87: Lcd_Port(y>>4);
   976  066F  0873               	movf	Lcd_Print_Char@y,w
   977  0670  00F1               	movwf	??_Lcd_Print_Char
   978  0671  3004               	movlw	4
   979  0672                     u195:	
   980  0672  1003               	clrc
   981  0673  0CF1               	rrf	??_Lcd_Print_Char,f
   982  0674  3EFF               	addlw	-1
   983  0675  1D03               	skipz
   984  0676  2E72               	goto	u195
   985  0677  0871               	movf	??_Lcd_Print_Char,w
   986  0678  120A  118A  260B  120A  118A  	fcall	_Lcd_Port
   987                           
   988                           ;LCD.h: 88: RD6 = 1;
   989  067D  1283               	bcf	3,5	;RP0=0, select bank0
   990  067E  1303               	bcf	3,6	;RP1=0, select bank0
   991  067F  1708               	bsf	8,6	;volatile
   992                           
   993                           ;LCD.h: 89: _delay((unsigned long)((40)*(11059200/4000000.0)));
   994  0680  3024               	movlw	36
   995  0681  00F1               	movwf	??_Lcd_Print_Char
   996  0682                     u337:	
   997  0682  0BF1               	decfsz	??_Lcd_Print_Char,f
   998  0683  2E82               	goto	u337
   999  0684  0000               	nop
  1000                           
  1001                           ;LCD.h: 90: RD6 = 0;
  1002  0685  1283               	bcf	3,5	;RP0=0, select bank0
  1003  0686  1303               	bcf	3,6	;RP1=0, select bank0
  1004  0687  1308               	bcf	8,6	;volatile
  1005                           
  1006                           ;LCD.h: 91: Lcd_Port(temp);
  1007  0688  0872               	movf	Lcd_Print_Char@temp,w
  1008  0689  120A  118A  260B  120A  118A  	fcall	_Lcd_Port
  1009                           
  1010                           ;LCD.h: 92: RD6 = 1;
  1011  068E  1283               	bcf	3,5	;RP0=0, select bank0
  1012  068F  1303               	bcf	3,6	;RP1=0, select bank0
  1013  0690  1708               	bsf	8,6	;volatile
  1014                           
  1015                           ;LCD.h: 93: _delay((unsigned long)((40)*(11059200/4000000.0)));
  1016  0691  3024               	movlw	36
  1017  0692  00F1               	movwf	??_Lcd_Print_Char
  1018  0693                     u347:	
  1019  0693  0BF1               	decfsz	??_Lcd_Print_Char,f
  1020  0694  2E93               	goto	u347
  1021  0695  0000               	nop
  1022                           
  1023                           ;LCD.h: 94: RD6 = 0;
  1024  0696  1283               	bcf	3,5	;RP0=0, select bank0
  1025  0697  1303               	bcf	3,6	;RP1=0, select bank0
  1026  0698  1308               	bcf	8,6	;volatile
  1027  0699  0008               	return
  1028  069A                     __end_of_Lcd_Print_Char:	
  1029                           
  1030                           	psect	text6
  1031  06E4                     __ptext6:	
  1032 ;; *************** function _Lcd_Init *****************
  1033 ;; Defined at:
  1034 ;;		line 62 in file "LCD.h"
  1035 ;; Parameters:    Size  Location     Type
  1036 ;;		None
  1037 ;; Auto vars:     Size  Location     Type
  1038 ;;		None
  1039 ;; Return value:  Size  Location     Type
  1040 ;;                  1    wreg      void 
  1041 ;; Registers used:
  1042 ;;		wreg, status,2, status,0, pclath, cstack
  1043 ;; Tracked objects:
  1044 ;;		On entry : 0/0
  1045 ;;		On exit  : 0/0
  1046 ;;		Unchanged: 0/0
  1047 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1048 ;;      Params:         0       0       0       0       0
  1049 ;;      Locals:         0       0       0       0       0
  1050 ;;      Temps:          2       0       0       0       0
  1051 ;;      Totals:         2       0       0       0       0
  1052 ;;Total ram usage:        2 bytes
  1053 ;; Hardware stack levels used:    1
  1054 ;; Hardware stack levels required when called:    2
  1055 ;; This function calls:
  1056 ;;		_Lcd_Cmd
  1057 ;;		_Lcd_Port
  1058 ;; This function is called by:
  1059 ;;		_main
  1060 ;; This function uses a non-reentrant model
  1061 ;;
  1062                           
  1063                           
  1064                           ;psect for function _Lcd_Init
  1065  06E4                     _Lcd_Init:	
  1066                           
  1067                           ;LCD.h: 64: Lcd_Port(0x00);
  1068                           
  1069                           ;incstack = 0
  1070                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  1071  06E4  3000               	movlw	0
  1072  06E5  120A  118A  260B  120A  118A  	fcall	_Lcd_Port
  1073                           
  1074                           ;LCD.h: 65: _delay((unsigned long)((20)*(11059200/4000.0)));
  1075  06EA  3048               	movlw	72
  1076  06EB  00F5               	movwf	??_Lcd_Init+1
  1077  06EC  30CF               	movlw	207
  1078  06ED  00F4               	movwf	??_Lcd_Init
  1079  06EE                     u357:	
  1080  06EE  0BF4               	decfsz	??_Lcd_Init,f
  1081  06EF  2EEE               	goto	u357
  1082  06F0  0BF5               	decfsz	??_Lcd_Init+1,f
  1083  06F1  2EEE               	goto	u357
  1084                           
  1085                           ;LCD.h: 66: Lcd_Cmd(0x03);
  1086  06F2  3003               	movlw	3
  1087  06F3  120A  118A  2625  120A  118A  	fcall	_Lcd_Cmd
  1088                           
  1089                           ;LCD.h: 67: _delay((unsigned long)((5)*(11059200/4000.0)));
  1090  06F8  3012               	movlw	18
  1091  06F9  00F5               	movwf	??_Lcd_Init+1
  1092  06FA  30F3               	movlw	243
  1093  06FB  00F4               	movwf	??_Lcd_Init
  1094  06FC                     u367:	
  1095  06FC  0BF4               	decfsz	??_Lcd_Init,f
  1096  06FD  2EFC               	goto	u367
  1097  06FE  0BF5               	decfsz	??_Lcd_Init+1,f
  1098  06FF  2EFC               	goto	u367
  1099                           
  1100                           ;LCD.h: 68: Lcd_Cmd(0x03);
  1101  0700  3003               	movlw	3
  1102  0701  120A  118A  2625  120A  118A  	fcall	_Lcd_Cmd
  1103                           
  1104                           ;LCD.h: 69: _delay((unsigned long)((11)*(11059200/4000.0)));
  1105  0706  3028               	movlw	40
  1106  0707  00F5               	movwf	??_Lcd_Init+1
  1107  0708  307D               	movlw	125
  1108  0709  00F4               	movwf	??_Lcd_Init
  1109  070A                     u377:	
  1110  070A  0BF4               	decfsz	??_Lcd_Init,f
  1111  070B  2F0A               	goto	u377
  1112  070C  0BF5               	decfsz	??_Lcd_Init+1,f
  1113  070D  2F0A               	goto	u377
  1114  070E  2F0F               	nop2
  1115                           
  1116                           ;LCD.h: 70: Lcd_Cmd(0x03);
  1117  070F  3003               	movlw	3
  1118  0710  120A  118A  2625  120A  118A  	fcall	_Lcd_Cmd
  1119                           
  1120                           ;LCD.h: 72: Lcd_Cmd(0x02);
  1121  0715  3002               	movlw	2
  1122  0716  120A  118A  2625  120A  118A  	fcall	_Lcd_Cmd
  1123                           
  1124                           ;LCD.h: 73: Lcd_Cmd(0x02);
  1125  071B  3002               	movlw	2
  1126  071C  120A  118A  2625  120A  118A  	fcall	_Lcd_Cmd
  1127                           
  1128                           ;LCD.h: 74: Lcd_Cmd(0x08);
  1129  0721  3008               	movlw	8
  1130  0722  120A  118A  2625  120A  118A  	fcall	_Lcd_Cmd
  1131                           
  1132                           ;LCD.h: 75: Lcd_Cmd(0x00);
  1133  0727  3000               	movlw	0
  1134  0728  120A  118A  2625  120A  118A  	fcall	_Lcd_Cmd
  1135                           
  1136                           ;LCD.h: 76: Lcd_Cmd(0x0C);
  1137  072D  300C               	movlw	12
  1138  072E  120A  118A  2625  120A  118A  	fcall	_Lcd_Cmd
  1139                           
  1140                           ;LCD.h: 77: Lcd_Cmd(0x00);
  1141  0733  3000               	movlw	0
  1142  0734  120A  118A  2625  120A  118A  	fcall	_Lcd_Cmd
  1143                           
  1144                           ;LCD.h: 78: Lcd_Cmd(0x06);
  1145  0739  3006               	movlw	6
  1146  073A  120A  118A  2625   	fcall	_Lcd_Cmd
  1147  073D  0008               	return
  1148  073E                     __end_of_Lcd_Init:	
  1149                           
  1150                           	psect	text7
  1151  05EA                     __ptext7:	
  1152 ;; *************** function _Lcd_Clear *****************
  1153 ;; Defined at:
  1154 ;;		line 35 in file "LCD.h"
  1155 ;; Parameters:    Size  Location     Type
  1156 ;;		None
  1157 ;; Auto vars:     Size  Location     Type
  1158 ;;		None
  1159 ;; Return value:  Size  Location     Type
  1160 ;;                  2   32[None  ] int 
  1161 ;; Registers used:
  1162 ;;		wreg, status,2, status,0, pclath, cstack
  1163 ;; Tracked objects:
  1164 ;;		On entry : 0/0
  1165 ;;		On exit  : 0/0
  1166 ;;		Unchanged: 0/0
  1167 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1168 ;;      Params:         0       0       0       0       0
  1169 ;;      Locals:         0       0       0       0       0
  1170 ;;      Temps:          0       0       0       0       0
  1171 ;;      Totals:         0       0       0       0       0
  1172 ;;Total ram usage:        0 bytes
  1173 ;; Hardware stack levels used:    1
  1174 ;; Hardware stack levels required when called:    2
  1175 ;; This function calls:
  1176 ;;		_Lcd_Cmd
  1177 ;; This function is called by:
  1178 ;;		_main
  1179 ;; This function uses a non-reentrant model
  1180 ;;
  1181                           
  1182                           
  1183                           ;psect for function _Lcd_Clear
  1184  05EA                     _Lcd_Clear:	
  1185                           
  1186                           ;LCD.h: 37: Lcd_Cmd(0);
  1187                           
  1188                           ;incstack = 0
  1189                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  1190  05EA  3000               	movlw	0
  1191  05EB  120A  118A  2625  120A  118A  	fcall	_Lcd_Cmd
  1192                           
  1193                           ;LCD.h: 38: Lcd_Cmd(1);
  1194  05F0  3001               	movlw	1
  1195  05F1  120A  118A  2625   	fcall	_Lcd_Cmd
  1196  05F4  0008               	return
  1197  05F5                     __end_of_Lcd_Clear:	
  1198                           
  1199                           	psect	text8
  1200  0625                     __ptext8:	
  1201 ;; *************** function _Lcd_Cmd *****************
  1202 ;; Defined at:
  1203 ;;		line 26 in file "LCD.h"
  1204 ;; Parameters:    Size  Location     Type
  1205 ;;  a               1    wreg     unsigned char 
  1206 ;; Auto vars:     Size  Location     Type
  1207 ;;  a               1    3[COMMON] unsigned char 
  1208 ;; Return value:  Size  Location     Type
  1209 ;;                  1    wreg      void 
  1210 ;; Registers used:
  1211 ;;		wreg, status,2, status,0, pclath, cstack
  1212 ;; Tracked objects:
  1213 ;;		On entry : 0/0
  1214 ;;		On exit  : 0/0
  1215 ;;		Unchanged: 0/0
  1216 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1217 ;;      Params:         0       0       0       0       0
  1218 ;;      Locals:         1       0       0       0       0
  1219 ;;      Temps:          2       0       0       0       0
  1220 ;;      Totals:         3       0       0       0       0
  1221 ;;Total ram usage:        3 bytes
  1222 ;; Hardware stack levels used:    1
  1223 ;; Hardware stack levels required when called:    1
  1224 ;; This function calls:
  1225 ;;		_Lcd_Port
  1226 ;; This function is called by:
  1227 ;;		_Lcd_Clear
  1228 ;;		_Lcd_Set_Cursor
  1229 ;;		_Lcd_Init
  1230 ;;		_Lcd_Shift_Right
  1231 ;;		_Lcd_Shift_Left
  1232 ;; This function uses a non-reentrant model
  1233 ;;
  1234                           
  1235                           
  1236                           ;psect for function _Lcd_Cmd
  1237  0625                     _Lcd_Cmd:	
  1238                           
  1239                           ;incstack = 0
  1240                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  1241                           ;Lcd_Cmd@a stored from wreg
  1242  0625  00F3               	movwf	Lcd_Cmd@a
  1243                           
  1244                           ;LCD.h: 28: RD7 = 0;
  1245  0626  1283               	bcf	3,5	;RP0=0, select bank0
  1246  0627  1303               	bcf	3,6	;RP1=0, select bank0
  1247  0628  1388               	bcf	8,7	;volatile
  1248                           
  1249                           ;LCD.h: 29: Lcd_Port(a);
  1250  0629  0873               	movf	Lcd_Cmd@a,w
  1251  062A  120A  118A  260B  120A  118A  	fcall	_Lcd_Port
  1252                           
  1253                           ;LCD.h: 30: RD6 = 1;
  1254  062F  1283               	bcf	3,5	;RP0=0, select bank0
  1255  0630  1303               	bcf	3,6	;RP1=0, select bank0
  1256  0631  1708               	bsf	8,6	;volatile
  1257                           
  1258                           ;LCD.h: 31: _delay((unsigned long)((4)*(11059200/4000.0)));
  1259  0632  300F               	movlw	15
  1260  0633  00F2               	movwf	??_Lcd_Cmd+1
  1261  0634  305B               	movlw	91
  1262  0635  00F1               	movwf	??_Lcd_Cmd
  1263  0636                     u387:	
  1264  0636  0BF1               	decfsz	??_Lcd_Cmd,f
  1265  0637  2E36               	goto	u387
  1266  0638  0BF2               	decfsz	??_Lcd_Cmd+1,f
  1267  0639  2E36               	goto	u387
  1268  063A  0000               	nop
  1269                           
  1270                           ;LCD.h: 32: RD6 = 0;
  1271  063B  1283               	bcf	3,5	;RP0=0, select bank0
  1272  063C  1303               	bcf	3,6	;RP1=0, select bank0
  1273  063D  1308               	bcf	8,6	;volatile
  1274  063E  0008               	return
  1275  063F                     __end_of_Lcd_Cmd:	
  1276                           
  1277                           	psect	text9
  1278  060B                     __ptext9:	
  1279 ;; *************** function _Lcd_Port *****************
  1280 ;; Defined at:
  1281 ;;		line 4 in file "LCD.h"
  1282 ;; Parameters:    Size  Location     Type
  1283 ;;  a               1    wreg     unsigned char 
  1284 ;; Auto vars:     Size  Location     Type
  1285 ;;  a               1    0[COMMON] unsigned char 
  1286 ;; Return value:  Size  Location     Type
  1287 ;;                  1    wreg      void 
  1288 ;; Registers used:
  1289 ;;		wreg
  1290 ;; Tracked objects:
  1291 ;;		On entry : 0/0
  1292 ;;		On exit  : 0/0
  1293 ;;		Unchanged: 0/0
  1294 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1295 ;;      Params:         0       0       0       0       0
  1296 ;;      Locals:         1       0       0       0       0
  1297 ;;      Temps:          0       0       0       0       0
  1298 ;;      Totals:         1       0       0       0       0
  1299 ;;Total ram usage:        1 bytes
  1300 ;; Hardware stack levels used:    1
  1301 ;; This function calls:
  1302 ;;		Nothing
  1303 ;; This function is called by:
  1304 ;;		_Lcd_Cmd
  1305 ;;		_Lcd_Init
  1306 ;;		_Lcd_Print_Char
  1307 ;; This function uses a non-reentrant model
  1308 ;;
  1309                           
  1310                           
  1311                           ;psect for function _Lcd_Port
  1312  060B                     _Lcd_Port:	
  1313                           
  1314                           ;incstack = 0
  1315                           ; Regs used in _Lcd_Port: [wreg]
  1316                           ;Lcd_Port@a stored from wreg
  1317  060B  00F0               	movwf	Lcd_Port@a
  1318                           
  1319                           ;LCD.h: 6: if(a & 1)
  1320  060C  1C70               	btfss	Lcd_Port@a,0
  1321  060D  2E12               	goto	l19
  1322                           
  1323                           ;LCD.h: 7: RD5 = 1;
  1324  060E  1283               	bcf	3,5	;RP0=0, select bank0
  1325  060F  1303               	bcf	3,6	;RP1=0, select bank0
  1326  0610  1688               	bsf	8,5	;volatile
  1327  0611  2E15               	goto	l20
  1328  0612                     l19:	
  1329                           
  1330                           ;LCD.h: 8: else
  1331                           ;LCD.h: 9: RD5 = 0;
  1332  0612  1283               	bcf	3,5	;RP0=0, select bank0
  1333  0613  1303               	bcf	3,6	;RP1=0, select bank0
  1334  0614  1288               	bcf	8,5	;volatile
  1335  0615                     l20:	
  1336                           
  1337                           ;LCD.h: 11: if(a & 2)
  1338  0615  1CF0               	btfss	Lcd_Port@a,1
  1339  0616  2E19               	goto	l21
  1340                           
  1341                           ;LCD.h: 12: RD4 = 1;
  1342  0617  1608               	bsf	8,4	;volatile
  1343  0618  2E1A               	goto	l22
  1344  0619                     l21:	
  1345                           
  1346                           ;LCD.h: 13: else
  1347                           ;LCD.h: 14: RD4 = 0;
  1348  0619  1208               	bcf	8,4	;volatile
  1349  061A                     l22:	
  1350                           
  1351                           ;LCD.h: 16: if(a & 4)
  1352  061A  1D70               	btfss	Lcd_Port@a,2
  1353  061B  2E1E               	goto	l23
  1354                           
  1355                           ;LCD.h: 17: RD3 = 1;
  1356  061C  1588               	bsf	8,3	;volatile
  1357  061D  2E1F               	goto	l24
  1358  061E                     l23:	
  1359                           
  1360                           ;LCD.h: 18: else
  1361                           ;LCD.h: 19: RD3 = 0;
  1362  061E  1188               	bcf	8,3	;volatile
  1363  061F                     l24:	
  1364                           
  1365                           ;LCD.h: 21: if(a & 8)
  1366  061F  1DF0               	btfss	Lcd_Port@a,3
  1367  0620  2E23               	goto	l25
  1368                           
  1369                           ;LCD.h: 22: RD2 = 1;
  1370  0621  1508               	bsf	8,2	;volatile
  1371  0622  0008               	return
  1372  0623                     l25:	
  1373                           
  1374                           ;LCD.h: 23: else
  1375                           ;LCD.h: 24: RD2 = 0;
  1376  0623  1108               	bcf	8,2	;volatile
  1377  0624  0008               	return
  1378  0625                     __end_of_Lcd_Port:	
  1379  007E                     btemp	set	126	;btemp
  1380  007E                     wtemp0	set	126


Data Sizes:
    Strings     71
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80      2       2
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    Lcd_Print_String@a	PTR unsigned char  size(1) Largest target is 25
		 -> STR_4(CODE[14]), STR_3(CODE[25]), STR_2(CODE[16]), STR_1(CODE[16]), 


Critical Paths under _main in COMMON

    _main->_Lcd_Set_Cursor
    _Lcd_Shift_Right->_Lcd_Cmd
    _Lcd_Shift_Left->_Lcd_Cmd
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Print_String->_Lcd_Print_Char
    _Lcd_Print_Char->_Lcd_Port
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                25    25      0    1588
                                             11 COMMON     3     3      0
                                              0 BANK0      2     2      0
                          _Lcd_Clear
                           _Lcd_Init
                   _Lcd_Print_String
                     _Lcd_Set_Cursor
                     _Lcd_Shift_Left
                    _Lcd_Shift_Right
 ---------------------------------------------------------------------------------
 (1) _Lcd_Shift_Right                                      0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Shift_Left                                       0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       7     6      1     592
                                              4 COMMON     7     6      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Print_String                                     3     3      0     376
                                              5 COMMON     3     3      0
                     _Lcd_Print_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Print_Char                                       4     4      0     178
                                              1 COMMON     4     4      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     198
                                              4 COMMON     2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              3     3      0     110
                                              1 COMMON     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0      88
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _Lcd_Print_String
     _Lcd_Print_Char
       _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Shift_Left
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Shift_Right
     _Lcd_Cmd
       _Lcd_Port

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      2       2       5        2.5%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       0      12        0.0%


Microchip Technology PIC Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Fri Jan 18 01:18:19 2019

                        pc 0002                __CFG_CP$OFF 0000                         l20 0615  
                       l21 0619                         l22 061A                         l23 061E  
                       l24 061F                         l25 0623                         l19 0612  
                       fsr 0004                        l801 07DC                        l719 06BF  
                      l745 0642                        l755 0746                        l793 07BB  
                      l787 07B2                        l779 0791                        _RD2 0042  
                      _RD3 0043                        _RD4 0044                        _RD5 0045  
                      _RD6 0046                        _RD7 0047                        u215 06A6  
                      u235 06CB                        u307 0797                        u317 07C1  
                      u327 07F5                        u337 0682               __CFG_CPD$OFF 0000  
                      u347 0693                        u195 0672                        u357 06EE  
                      u367 06FC                        u377 070A                        u297 076D  
                      u387 0636                        fsr0 0004               __CFG_IESO$ON 0000  
             __CFG_FOSC$HS 0000               __CFG_LVP$OFF 0000                       STR_1 0032  
                     STR_2 0022                       STR_3 0009                       STR_4 0042  
             __CFG_WRT$OFF 0000              __CFG_FCMEN$ON 0000                       _main 073E  
                     btemp 007E              __CFG_BOREN$ON 0000                       start 0000  
          __end_of_Lcd_Cmd 063F         Lcd_Print_Char@temp 0072              __CFG_MCLRE$ON 0000  
                    ?_main 0070              __CFG_WDTE$OFF 0000    __size_of_Lcd_Set_Cursor 004A  
                    _TRISD 0088    __size_of_Lcd_Shift_Left 000B                      main@a 0020  
                    pclath 000A  __size_of_Lcd_Print_String 0022                      status 0003  
                    wtemp0 007E    __size_of_Lcd_Print_Char 0039           __end_of_Lcd_Init 073E  
         __end_of_Lcd_Port 0625            __initialization 07FC               __end_of_main 07FC  
                   ??_main 007B         __size_of_Lcd_Clear 000B                  ??_Lcd_Cmd 0071  
           __CFG_PWRTE$OFF 0000   __size_of_Lcd_Shift_Right 000B            Lcd_Set_Cursor@a 0077  
          Lcd_Set_Cursor@b 0074            Lcd_Set_Cursor@y 0079            Lcd_Set_Cursor@z 0078  
  __end_of__initialization 07FC          __end_of_Lcd_Clear 05F5             __pcstackCOMMON 0070  
           _Lcd_Set_Cursor 069A             _Lcd_Shift_Left 05F5                  ?_Lcd_Init 0070  
                ?_Lcd_Port 0070           _Lcd_Print_String 063F             _Lcd_Print_Char 0661  
               __pmaintext 073E     __end_of_Lcd_Set_Cursor 06E4     __end_of_Lcd_Shift_Left 0600  
        ??_Lcd_Shift_Right 0074                 ??_Lcd_Init 0074                 ??_Lcd_Port 0070  
               __stringtab 0003            Lcd_Print_Char@a 0074            Lcd_Print_Char@y 0073  
                  _Lcd_Cmd 0625     __end_of_Lcd_Print_Char 069A            ?_Lcd_Set_Cursor 0074  
                  __ptext1 0600                    __ptext2 05F5                    __ptext3 069A  
                  __ptext4 063F                    __ptext5 0661                    __ptext6 06E4  
                  __ptext7 05EA                    __ptext8 0625                    __ptext9 060B  
          ?_Lcd_Shift_Left 0070       end_of_initialization 07FC            ?_Lcd_Print_Char 0070  
                Lcd_Port@a 0070                  _Lcd_Clear 05EA   __end_of_Lcd_Print_String 0661  
      start_initialization 07FC          __size_of_Lcd_Init 005A          __size_of_Lcd_Port 001A  
        Lcd_Print_String@a 0077          Lcd_Print_String@i 0075                 ?_Lcd_Clear 0070  
          _Lcd_Shift_Right 0600                  ___latbits 0002              __pcstackBANK0 0020  
                 ?_Lcd_Cmd 0070           ??_Lcd_Set_Cursor 0075           ??_Lcd_Shift_Left 0074  
                __pstrings 0003           ??_Lcd_Print_Char 0071    __end_of_Lcd_Shift_Right 060B  
                 Lcd_Cmd@a 0073                ??_Lcd_Clear 0074                __stringbase 0008  
                 _Lcd_Init 06E4                   _Lcd_Port 060B           __size_of_Lcd_Cmd 001A  
       __end_of__stringtab 0009          ?_Lcd_Print_String 0070         ??_Lcd_Print_String 0075  
        __CFG_BOR4V$BOR40V 0000              __size_of_main 00BE           ?_Lcd_Shift_Right 0070  
                stringcode 0003         Lcd_Set_Cursor@temp 007A                   stringdir 0003  
                 stringtab 0003  
