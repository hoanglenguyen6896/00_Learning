

Microchip Technology PIC LITE Macro Assembler V1.41 build -162212810 
                                                                                               Sat Jan 19 02:49:17 2019

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     8                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	inittext,global,class=CODE,delta=2
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	maintext,global,class=CODE,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2,group=2
    16                           	psect	text3,local,class=CODE,merge=1,delta=2,group=2
    17                           	psect	text4,local,class=CODE,merge=1,delta=2,group=2
    18                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    19                           	psect	text6,local,class=CODE,merge=1,delta=2
    20                           	psect	text7,local,class=CODE,merge=1,delta=2,group=2
    21                           	psect	text8,local,class=CODE,merge=1,delta=2
    22                           	psect	text9,local,class=CODE,merge=1,delta=2,group=2
    23                           	psect	text10,local,class=CODE,merge=1,delta=2,group=2
    24                           	psect	text11,local,class=CODE,merge=1,delta=2
    25                           	psect	text12,local,class=CODE,merge=1,delta=2
    26                           	psect	text13,local,class=CODE,merge=1,delta=2
    27                           	psect	text14,local,class=CODE,merge=1,delta=2
    28                           	psect	text15,local,class=CODE,merge=1,delta=2
    29                           	psect	text16,local,class=CODE,merge=1,delta=2
    30                           	psect	text17,local,class=CODE,merge=1,inline,delta=2
    31                           	psect	text18,local,class=CODE,merge=1,delta=2
    32                           	psect	text19,local,class=CODE,merge=1,delta=2
    33                           	psect	text20,local,class=CODE,merge=1,delta=2
    34                           	psect	text21,local,class=CODE,merge=1,delta=2
    35                           	psect	text22,local,class=CODE,merge=1,delta=2,group=2
    36                           	psect	text23,local,class=CODE,merge=1,delta=2
    37                           	psect	text24,local,class=CODE,merge=1,delta=2
    38                           	psect	text25,local,class=CODE,merge=1,delta=2
    39                           	psect	text26,local,class=CODE,merge=1,delta=2
    40                           	psect	text27,local,class=CODE,merge=1,delta=2
    41                           	psect	text28,local,class=CODE,merge=1,delta=2
    42                           	psect	text29,local,class=CODE,merge=1,delta=2
    43                           	dabs	1,0x7E,2
    44  0000                     
    45                           ; Version 1.41
    46                           ; Generated 25/01/2017 GMT
    47                           ; 
    48                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    49                           ; All rights reserved.
    50                           ; 
    51                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    52                           ; 
    53                           ; Redistribution and use in source and binary forms, with or without modification, are
    54                           ; permitted provided that the following conditions are met:
    55                           ; 
    56                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    57                           ;        conditions and the following disclaimer.
    58                           ; 
    59                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    60                           ;        of conditions and the following disclaimer in the documentation and/or other
    61                           ;        materials provided with the distribution.
    62                           ; 
    63                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    64                           ;        software without specific prior written permission.
    65                           ; 
    66                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    67                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    68                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    69                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    70                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    71                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    72                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    73                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    74                           ; 
    75                           ; 
    76                           ; Code-generator required, PIC16F887 Definitions
    77                           ; 
    78                           ; SFR Addresses
    79  0000                     	;# 
    80  0001                     	;# 
    81  0002                     	;# 
    82  0003                     	;# 
    83  0004                     	;# 
    84  0005                     	;# 
    85  0006                     	;# 
    86  0007                     	;# 
    87  0008                     	;# 
    88  0009                     	;# 
    89  000A                     	;# 
    90  000B                     	;# 
    91  000C                     	;# 
    92  000D                     	;# 
    93  000E                     	;# 
    94  000E                     	;# 
    95  000F                     	;# 
    96  0010                     	;# 
    97  0011                     	;# 
    98  0012                     	;# 
    99  0013                     	;# 
   100  0014                     	;# 
   101  0015                     	;# 
   102  0015                     	;# 
   103  0016                     	;# 
   104  0017                     	;# 
   105  0018                     	;# 
   106  0019                     	;# 
   107  001A                     	;# 
   108  001B                     	;# 
   109  001B                     	;# 
   110  001C                     	;# 
   111  001D                     	;# 
   112  001E                     	;# 
   113  001F                     	;# 
   114  0081                     	;# 
   115  0085                     	;# 
   116  0086                     	;# 
   117  0087                     	;# 
   118  0088                     	;# 
   119  0089                     	;# 
   120  008C                     	;# 
   121  008D                     	;# 
   122  008E                     	;# 
   123  008F                     	;# 
   124  0090                     	;# 
   125  0091                     	;# 
   126  0092                     	;# 
   127  0093                     	;# 
   128  0093                     	;# 
   129  0093                     	;# 
   130  0094                     	;# 
   131  0095                     	;# 
   132  0096                     	;# 
   133  0097                     	;# 
   134  0098                     	;# 
   135  0099                     	;# 
   136  009A                     	;# 
   137  009B                     	;# 
   138  009C                     	;# 
   139  009D                     	;# 
   140  009E                     	;# 
   141  009F                     	;# 
   142  0105                     	;# 
   143  0107                     	;# 
   144  0108                     	;# 
   145  0109                     	;# 
   146  010C                     	;# 
   147  010C                     	;# 
   148  010D                     	;# 
   149  010E                     	;# 
   150  010F                     	;# 
   151  0185                     	;# 
   152  0187                     	;# 
   153  0188                     	;# 
   154  0189                     	;# 
   155  018C                     	;# 
   156  018D                     	;# 
   157                           
   158                           	psect	idataBANK1
   159  0E75                     __pidataBANK1:	
   160                           
   161                           ;initializer for __esp8266_waitResponse@F2069
   162  0E75  3409               	retlw	low (STR_13| (0+32768))
   163  0E76  348A               	retlw	high (STR_13| (0+32768))
   164  0E77  34D4               	retlw	low (STR_40| (0+32768))
   165  0E78  3489               	retlw	high (STR_40| (0+32768))
   166  0E79  34E9               	retlw	low (STR_41| (0+32768))
   167  0E7A  3489               	retlw	high (STR_41| (0+32768))
   168  0E7B  3482               	retlw	low (STR_42| (0+32768))
   169  0E7C  3489               	retlw	high (STR_42| (0+32768))
   170  0E7D  34C0               	retlw	low (STR_43| (0+32768))
   171  0E7E  3489               	retlw	high (STR_43| (0+32768))
   172  0E7F  34C7               	retlw	low (STR_44| (0+32768))
   173  0E80  3489               	retlw	high (STR_44| (0+32768))
   174  0E81  3478               	retlw	low (STR_45| (0+32768))
   175  0E82  3489               	retlw	high (STR_45| (0+32768))
   176  0E83  34A7               	retlw	low (STR_46| (0+32768))
   177  0E84  3489               	retlw	high (STR_46| (0+32768))
   178                           
   179                           	psect	stringtext
   180  0800                     __pstringtext:	
   181  0800                     stringtab:	
   182  0800                     __stringtab:	
   183                           
   184                           ;	String table - string pointers are 2 bytes each
   185  0800  1BFF               	btfsc	btemp+1,7
   186  0801  280A               	ljmp	stringcode
   187  0802  1383               	bcf	3,7
   188  0803  187F               	btfsc	btemp+1,0
   189  0804  1783               	bsf	3,7
   190  0805  0800               	movf	0,w
   191  0806  0A84               	incf	4,f
   192  0807  1903               	skipnz
   193  0808  0AFF               	incf	btemp+1,f
   194  0809  0008               	return
   195  080A                     stringcode:	
   196  080A  087F               	movf	btemp+1,w
   197  080B  397F               	andlw	127
   198  080C  008A               	movwf	10
   199  080D  0804               	movf	4,w
   200  080E  0A84               	incf	4,f
   201  080F  1903               	skipnz
   202  0810  0AFF               	incf	btemp+1,f
   203  0811  0082               	movwf	2
   204  0812                     __stringbase:	
   205  0812                     __end_of__stringtab:	
   206  0812                     _dpowers:	
   207  0812  3401               	retlw	1
   208  0813  3400               	retlw	0
   209  0814  340A               	retlw	10
   210  0815  3400               	retlw	0
   211  0816  3464               	retlw	100
   212  0817  3400               	retlw	0
   213  0818  34E8               	retlw	232
   214  0819  3403               	retlw	3
   215  081A  3410               	retlw	16
   216  081B  3427               	retlw	39
   217  081C                     __end_of_dpowers:	
   218  081C                     __esp8266_waitResponse@responses:	
   219  081C  3401               	retlw	1
   220  081D  3402               	retlw	2
   221  081E  3403               	retlw	3
   222  081F  3404               	retlw	4
   223  0820  3405               	retlw	5
   224  0821  3406               	retlw	6
   225  0822  3407               	retlw	7
   226  0823  3408               	retlw	8
   227  0824                     __end_of__esp8266_waitResponse@responses:	
   228  0824                     __esp8266_waitResponse@lengths:	
   229  0824  3402               	retlw	2
   230  0825  3405               	retlw	5
   231  0826  3404               	retlw	4
   232  0827  3409               	retlw	9
   233  0828  3406               	retlw	6
   234  0829  3406               	retlw	6
   235  082A  3409               	retlw	9
   236  082B  3409               	retlw	9
   237  082C                     __end_of__esp8266_waitResponse@lengths:	
   238  001A                     _RCREG	set	26
   239  0019                     _TXREG	set	25
   240  0065                     _RCIF	set	101
   241  00C1                     _OERR	set	193
   242  0064                     _TXIF	set	100
   243  00C4                     _CREN	set	196
   244  00C7                     _SPEN	set	199
   245  0046                     _RD6	set	70
   246  0047                     _RD7	set	71
   247  0042                     _RD2	set	66
   248  0043                     _RD3	set	67
   249  0044                     _RD4	set	68
   250  0045                     _RD5	set	69
   251  0088                     _TRISD	set	136
   252  0099                     _SPBRG	set	153
   253  04C5                     _TXEN	set	1221
   254  043E                     _TRISC6	set	1086
   255  043F                     _TRISC7	set	1087
   256  04C4                     _SYNC	set	1220
   257  04C2                     _BRGH	set	1218
   258  082C                     STR_5:	
   259  082C  3441               	retlw	65	;'A'
   260  082D  3454               	retlw	84	;'T'
   261  082E  342B               	retlw	43	;'+'
   262  082F  3443               	retlw	67	;'C'
   263  0830  3449               	retlw	73	;'I'
   264  0831  3450               	retlw	80	;'P'
   265  0832  3453               	retlw	83	;'S'
   266  0833  3445               	retlw	69	;'E'
   267  0834  3452               	retlw	82	;'R'
   268  0835  3456               	retlw	86	;'V'
   269  0836  3445               	retlw	69	;'E'
   270  0837  3452               	retlw	82	;'R'
   271  0838  343D               	retlw	61	;'='
   272  0839  3431               	retlw	49	;'1'
   273  083A  342C               	retlw	44	;','
   274  083B  3438               	retlw	56	;'8'
   275  083C  3430               	retlw	48	;'0'
   276  083D  340D               	retlw	13
   277  083E  340A               	retlw	10
   278  083F  3400               	retlw	0
   279  0840                     STR_53:	
   280  0840  3445               	retlw	69	;'E'
   281  0841  3453               	retlw	83	;'S'
   282  0842  3450               	retlw	80	;'P'
   283  0843  3420               	retlw	32	;' '
   284  0844  3473               	retlw	115	;'s'
   285  0845  3465               	retlw	101	;'e'
   286  0846  3474               	retlw	116	;'t'
   287  0847  3420               	retlw	32	;' '
   288  0848  3461               	retlw	97	;'a'
   289  0849  3473               	retlw	115	;'s'
   290  084A  3420               	retlw	32	;' '
   291  084B  3473               	retlw	115	;'s'
   292  084C  3465               	retlw	101	;'e'
   293  084D  3472               	retlw	114	;'r'
   294  084E  3476               	retlw	118	;'v'
   295  084F  3465               	retlw	101	;'e'
   296  0850  3472               	retlw	114	;'r'
   297  0851  3400               	retlw	0
   298  0852                     STR_48:	
   299  0852  3445               	retlw	69	;'E'
   300  0853  3453               	retlw	83	;'S'
   301  0854  3450               	retlw	80	;'P'
   302  0855  3438               	retlw	56	;'8'
   303  0856  3432               	retlw	50	;'2'
   304  0857  3436               	retlw	54	;'6'
   305  0858  3436               	retlw	54	;'6'
   306  0859  3420               	retlw	32	;' '
   307  085A  3477               	retlw	119	;'w'
   308  085B  3469               	retlw	105	;'i'
   309  085C  3474               	retlw	116	;'t'
   310  085D  3468               	retlw	104	;'h'
   311  085E  3420               	retlw	32	;' '
   312  085F  3450               	retlw	80	;'P'
   313  0860  3449               	retlw	73	;'I'
   314  0861  3443               	retlw	67	;'C'
   315  0862  3400               	retlw	0
   316  0863                     STR_50:	
   317  0863  3445               	retlw	69	;'E'
   318  0864  3453               	retlw	83	;'S'
   319  0865  3450               	retlw	80	;'P'
   320  0866  3420               	retlw	32	;' '
   321  0867  3469               	retlw	105	;'i'
   322  0868  3473               	retlw	115	;'s'
   323  0869  3420               	retlw	32	;' '
   324  086A  3463               	retlw	99	;'c'
   325  086B  346F               	retlw	111	;'o'
   326  086C  346E               	retlw	110	;'n'
   327  086D  346E               	retlw	110	;'n'
   328  086E  3465               	retlw	101	;'e'
   329  086F  3463               	retlw	99	;'c'
   330  0870  3474               	retlw	116	;'t'
   331  0871  3465               	retlw	101	;'e'
   332  0872  3464               	retlw	100	;'d'
   333  0873  3400               	retlw	0
   334  0874                     STR_19:	
   335  0874  3441               	retlw	65	;'A'
   336  0875  3454               	retlw	84	;'T'
   337  0876  342B               	retlw	43	;'+'
   338  0877  3443               	retlw	67	;'C'
   339  0878  3449               	retlw	73	;'I'
   340  0879  3450               	retlw	80	;'P'
   341  087A  3443               	retlw	67	;'C'
   342  087B  344C               	retlw	76	;'L'
   343  087C  344F               	retlw	79	;'O'
   344  087D  3453               	retlw	83	;'S'
   345  087E  3445               	retlw	69	;'E'
   346  087F  343D               	retlw	61	;'='
   347  0880  3431               	retlw	49	;'1'
   348  0881  340D               	retlw	13
   349  0882  340A               	retlw	10
   350  0883  3400               	retlw	0
   351  0884                     STR_51:	
   352  0884  3445               	retlw	69	;'E'
   353  0885  346E               	retlw	110	;'n'
   354  0886  3461               	retlw	97	;'a'
   355  0887  3462               	retlw	98	;'b'
   356  0888  346C               	retlw	108	;'l'
   357  0889  3465               	retlw	101	;'e'
   358  088A  3420               	retlw	32	;' '
   359  088B  346D               	retlw	109	;'m'
   360  088C  3475               	retlw	117	;'u'
   361  088D  346C               	retlw	108	;'l'
   362  088E  3474               	retlw	116	;'t'
   363  088F  3469               	retlw	105	;'i'
   364  0890  3470               	retlw	112	;'p'
   365  0891  346C               	retlw	108	;'l'
   366  0892  3465               	retlw	101	;'e'
   367  0893  3400               	retlw	0
   368  0894                     STR_52:	
   369  0894  3445               	retlw	69	;'E'
   370  0895  3453               	retlw	83	;'S'
   371  0896  3450               	retlw	80	;'P'
   372  0897  3420               	retlw	32	;' '
   373  0898  3473               	retlw	115	;'s'
   374  0899  3465               	retlw	101	;'e'
   375  089A  3474               	retlw	116	;'t'
   376  089B  3420               	retlw	32	;' '
   377  089C  3461               	retlw	97	;'a'
   378  089D  3473               	retlw	115	;'s'
   379  089E  3420               	retlw	32	;' '
   380  089F  3444               	retlw	68	;'D'
   381  08A0  3475               	retlw	117	;'u'
   382  08A1  3461               	retlw	97	;'a'
   383  08A2  346C               	retlw	108	;'l'
   384  08A3  3400               	retlw	0
   385  08A4                     STR_57:	
   386  08A4  3450               	retlw	80	;'P'
   387  08A5  3461               	retlw	97	;'a'
   388  08A6  3473               	retlw	115	;'s'
   389  08A7  3473               	retlw	115	;'s'
   390  08A8  343A               	retlw	58	;':'
   391  08A9  3420               	retlw	32	;' '
   392  08AA  3431               	retlw	49	;'1'
   393  08AB  3432               	retlw	50	;'2'
   394  08AC  3433               	retlw	51	;'3'
   395  08AD  3434               	retlw	52	;'4'
   396  08AE  3435               	retlw	53	;'5'
   397  08AF  3436               	retlw	54	;'6'
   398  08B0  3437               	retlw	55	;'7'
   399  08B1  3438               	retlw	56	;'8'
   400  08B2  3400               	retlw	0
   401  08B3                     STR_4:	
   402  08B3  3441               	retlw	65	;'A'
   403  08B4  3454               	retlw	84	;'T'
   404  08B5  342B               	retlw	43	;'+'
   405  08B6  3443               	retlw	67	;'C'
   406  08B7  3449               	retlw	73	;'I'
   407  08B8  3450               	retlw	80	;'P'
   408  08B9  344D               	retlw	77	;'M'
   409  08BA  3455               	retlw	85	;'U'
   410  08BB  3458               	retlw	88	;'X'
   411  08BC  343D               	retlw	61	;'='
   412  08BD  3431               	retlw	49	;'1'
   413  08BE  340D               	retlw	13
   414  08BF  340A               	retlw	10
   415  08C0  3400               	retlw	0
   416  08C1                     STR_25:	
   417  08C1  3441               	retlw	65	;'A'
   418  08C2  3454               	retlw	84	;'T'
   419  08C3  342B               	retlw	43	;'+'
   420  08C4  3443               	retlw	67	;'C'
   421  08C5  3449               	retlw	73	;'I'
   422  08C6  3450               	retlw	80	;'P'
   423  08C7  3453               	retlw	83	;'S'
   424  08C8  3454               	retlw	84	;'T'
   425  08C9  3441               	retlw	65	;'A'
   426  08CA  3452               	retlw	82	;'R'
   427  08CB  3454               	retlw	84	;'T'
   428  08CC  343D               	retlw	61	;'='
   429  08CD  3422               	retlw	34	;'"'
   430  08CE  3400               	retlw	0
   431  08CF                     STR_33:	
   432  08CF  3441               	retlw	65	;'A'
   433  08D0  3454               	retlw	84	;'T'
   434  08D1  342B               	retlw	43	;'+'
   435  08D2  3443               	retlw	67	;'C'
   436  08D3  3449               	retlw	73	;'I'
   437  08D4  3450               	retlw	80	;'P'
   438  08D5  3453               	retlw	83	;'S'
   439  08D6  3445               	retlw	69	;'E'
   440  08D7  344E               	retlw	78	;'N'
   441  08D8  3444               	retlw	68	;'D'
   442  08D9  343D               	retlw	61	;'='
   443  08DA  3430               	retlw	48	;'0'
   444  08DB  342C               	retlw	44	;','
   445  08DC  3400               	retlw	0
   446  08DD                     STR_47:	
   447  08DD  3448               	retlw	72	;'H'
   448  08DE  346F               	retlw	111	;'o'
   449  08DF  3461               	retlw	97	;'a'
   450  08E0  346E               	retlw	110	;'n'
   451  08E1  3467               	retlw	103	;'g'
   452  08E2  346E               	retlw	110	;'n'
   453  08E3  346C               	retlw	108	;'l'
   454  08E4  3431               	retlw	49	;'1'
   455  08E5  3434               	retlw	52	;'4'
   456  08E6  3431               	retlw	49	;'1'
   457  08E7  3437               	retlw	55	;'7'
   458  08E8  3438               	retlw	56	;'8'
   459  08E9  3432               	retlw	50	;'2'
   460  08EA  3400               	retlw	0
   461  08EB                     STR_58:	
   462  08EB  3441               	retlw	65	;'A'
   463  08EC  3450               	retlw	80	;'P'
   464  08ED  3420               	retlw	32	;' '
   465  08EE  3463               	retlw	99	;'c'
   466  08EF  346F               	retlw	111	;'o'
   467  08F0  346E               	retlw	110	;'n'
   468  08F1  3466               	retlw	102	;'f'
   469  08F2  3469               	retlw	105	;'i'
   470  08F3  3467               	retlw	103	;'g'
   471  08F4  3475               	retlw	117	;'u'
   472  08F5  3472               	retlw	114	;'r'
   473  08F6  3465               	retlw	101	;'e'
   474  08F7  3464               	retlw	100	;'d'
   475  08F8  3400               	retlw	0
   476  08F9                     STR_49:	
   477  08F9  3445               	retlw	69	;'E'
   478  08FA  3453               	retlw	83	;'S'
   479  08FB  3450               	retlw	80	;'P'
   480  08FC  3420               	retlw	32	;' '
   481  08FD  346E               	retlw	110	;'n'
   482  08FE  346F               	retlw	111	;'o'
   483  08FF  3474               	retlw	116	;'t'
   484  0900  3420               	retlw	32	;' '
   485  0901  3466               	retlw	102	;'f'
   486  0902  346F               	retlw	111	;'o'
   487  0903  3475               	retlw	117	;'u'
   488  0904  346E               	retlw	110	;'n'
   489  0905  3464               	retlw	100	;'d'
   490  0906  3400               	retlw	0
   491  0907                     STR_56:	
   492  0907  3449               	retlw	73	;'I'
   493  0908  3444               	retlw	68	;'D'
   494  0909  343A               	retlw	58	;':'
   495  090A  3420               	retlw	32	;' '
   496  090B  3445               	retlw	69	;'E'
   497  090C  3453               	retlw	83	;'S'
   498  090D  3450               	retlw	80	;'P'
   499  090E  3438               	retlw	56	;'8'
   500  090F  3432               	retlw	50	;'2'
   501  0910  3436               	retlw	54	;'6'
   502  0911  3436               	retlw	54	;'6'
   503  0912  3400               	retlw	0
   504  0913                     STR_62:	
   505  0913  3432               	retlw	50	;'2'
   506  0914  342E               	retlw	46	;'.'
   507  0915  3420               	retlw	32	;' '
   508  0916  344E               	retlw	78	;'N'
   509  0917  3468               	retlw	104	;'h'
   510  0918  3461               	retlw	97	;'a'
   511  0919  3470               	retlw	112	;'p'
   512  091A  3420               	retlw	32	;' '
   513  091B  3447               	retlw	71	;'G'
   514  091C  3469               	retlw	105	;'i'
   515  091D  3461               	retlw	97	;'a'
   516  091E  3400               	retlw	0
   517  091F                     STR_60:	
   518  091F  3431               	retlw	49	;'1'
   519  0920  342E               	retlw	46	;'.'
   520  0921  3420               	retlw	32	;' '
   521  0922  344E               	retlw	78	;'N'
   522  0923  3468               	retlw	104	;'h'
   523  0924  3461               	retlw	97	;'a'
   524  0925  3470               	retlw	112	;'p'
   525  0926  3420               	retlw	32	;' '
   526  0927  3454               	retlw	84	;'T'
   527  0928  3465               	retlw	101	;'e'
   528  0929  346E               	retlw	110	;'n'
   529  092A  3400               	retlw	0
   530  092B                     STR_6:	
   531  092B  3441               	retlw	65	;'A'
   532  092C  3454               	retlw	84	;'T'
   533  092D  342B               	retlw	43	;'+'
   534  092E  3443               	retlw	67	;'C'
   535  092F  3457               	retlw	87	;'W'
   536  0930  344C               	retlw	76	;'L'
   537  0931  3449               	retlw	73	;'I'
   538  0932  3446               	retlw	70	;'F'
   539  0933  340D               	retlw	13
   540  0934  340A               	retlw	10
   541  0935  3400               	retlw	0
   542  0936                     STR_21:	
   543  0936  3441               	retlw	65	;'A'
   544  0937  3454               	retlw	84	;'T'
   545  0938  342B               	retlw	43	;'+'
   546  0939  3443               	retlw	67	;'C'
   547  093A  3457               	retlw	87	;'W'
   548  093B  3451               	retlw	81	;'Q'
   549  093C  3441               	retlw	65	;'A'
   550  093D  3450               	retlw	80	;'P'
   551  093E  340D               	retlw	13
   552  093F  340A               	retlw	10
   553  0940  3400               	retlw	0
   554  0941                     STR_23:	
   555  0941  3441               	retlw	65	;'A'
   556  0942  3454               	retlw	84	;'T'
   557  0943  342B               	retlw	43	;'+'
   558  0944  3443               	retlw	67	;'C'
   559  0945  3449               	retlw	73	;'I'
   560  0946  3446               	retlw	70	;'F'
   561  0947  3453               	retlw	83	;'S'
   562  0948  3452               	retlw	82	;'R'
   563  0949  340D               	retlw	13
   564  094A  340A               	retlw	10
   565  094B  3400               	retlw	0
   566  094C                     STR_16:	
   567  094C  3441               	retlw	65	;'A'
   568  094D  3454               	retlw	84	;'T'
   569  094E  342B               	retlw	43	;'+'
   570  094F  3443               	retlw	67	;'C'
   571  0950  3457               	retlw	87	;'W'
   572  0951  344A               	retlw	74	;'J'
   573  0952  3441               	retlw	65	;'A'
   574  0953  3450               	retlw	80	;'P'
   575  0954  343D               	retlw	61	;'='
   576  0955  3422               	retlw	34	;'"'
   577  0956  3400               	retlw	0
   578  0957                     STR_1:	
   579  0957  3441               	retlw	65	;'A'
   580  0958  3454               	retlw	84	;'T'
   581  0959  342B               	retlw	43	;'+'
   582  095A  3443               	retlw	67	;'C'
   583  095B  3457               	retlw	87	;'W'
   584  095C  3453               	retlw	83	;'S'
   585  095D  3441               	retlw	65	;'A'
   586  095E  3450               	retlw	80	;'P'
   587  095F  343D               	retlw	61	;'='
   588  0960  3422               	retlw	34	;'"'
   589  0961  3400               	retlw	0
   590  0962                     STR_59:	
   591  0962  3457               	retlw	87	;'W'
   592  0963  3461               	retlw	97	;'a'
   593  0964  3469               	retlw	105	;'i'
   594  0965  3474               	retlw	116	;'t'
   595  0966  3469               	retlw	105	;'i'
   596  0967  346E               	retlw	110	;'n'
   597  0968  3467               	retlw	103	;'g'
   598  0969  342E               	retlw	46	;'.'
   599  096A  342E               	retlw	46	;'.'
   600  096B  342E               	retlw	46	;'.'
   601  096C  3400               	retlw	0
   602  096D                     STR_14:	
   603  096D  3441               	retlw	65	;'A'
   604  096E  3454               	retlw	84	;'T'
   605  096F  342B               	retlw	43	;'+'
   606  0970  3443               	retlw	67	;'C'
   607  0971  3457               	retlw	87	;'W'
   608  0972  344D               	retlw	77	;'M'
   609  0973  344F               	retlw	79	;'O'
   610  0974  3444               	retlw	68	;'D'
   611  0975  3445               	retlw	69	;'E'
   612  0976  343D               	retlw	61	;'='
   613  0977  3400               	retlw	0
   614  0978                     STR_45:	
   615  0978  3430               	retlw	48	;'0'
   616  0979  342C               	retlw	44	;','
   617  097A  3443               	retlw	67	;'C'
   618  097B  344F               	retlw	79	;'O'
   619  097C  344E               	retlw	78	;'N'
   620  097D  344E               	retlw	78	;'N'
   621  097E  3445               	retlw	69	;'E'
   622  097F  3443               	retlw	67	;'C'
   623  0980  3454               	retlw	84	;'T'
   624  0981  3400               	retlw	0
   625  0982                     STR_42:	
   626  0982  346E               	retlw	110	;'n'
   627  0983  346F               	retlw	111	;'o'
   628  0984  3420               	retlw	32	;' '
   629  0985  3463               	retlw	99	;'c'
   630  0986  3468               	retlw	104	;'h'
   631  0987  3461               	retlw	97	;'a'
   632  0988  346E               	retlw	110	;'n'
   633  0989  3467               	retlw	103	;'g'
   634  098A  3465               	retlw	101	;'e'
   635  098B  3400               	retlw	0
   636  098C                     STR_10:	
   637  098C  3441               	retlw	65	;'A'
   638  098D  3454               	retlw	84	;'T'
   639  098E  342B               	retlw	43	;'+'
   640  098F  3452               	retlw	82	;'R'
   641  0990  3453               	retlw	83	;'S'
   642  0991  3454               	retlw	84	;'T'
   643  0992  340D               	retlw	13
   644  0993  340A               	retlw	10
   645  0994  3400               	retlw	0
   646  0995                     STR_63:	
   647  0995  3432               	retlw	50	;'2'
   648  0996  342E               	retlw	46	;'.'
   649  0997  3420               	retlw	32	;' '
   650  0998  3447               	retlw	71	;'G'
   651  0999  3469               	retlw	105	;'i'
   652  099A  3461               	retlw	97	;'a'
   653  099B  340D               	retlw	13
   654  099C  340A               	retlw	10
   655  099D  3400               	retlw	0
   656  099E                     STR_61:	
   657  099E  3431               	retlw	49	;'1'
   658  099F  342E               	retlw	46	;'.'
   659  09A0  3420               	retlw	32	;' '
   660  09A1  3454               	retlw	84	;'T'
   661  09A2  3465               	retlw	101	;'e'
   662  09A3  346E               	retlw	110	;'n'
   663  09A4  340D               	retlw	13
   664  09A5  340A               	retlw	10
   665  09A6  3400               	retlw	0
   666  09A7                     STR_46:	
   667  09A7  3430               	retlw	48	;'0'
   668  09A8  342C               	retlw	44	;','
   669  09A9  3443               	retlw	67	;'C'
   670  09AA  344C               	retlw	76	;'L'
   671  09AB  344F               	retlw	79	;'O'
   672  09AC  3453               	retlw	83	;'S'
   673  09AD  3445               	retlw	69	;'E'
   674  09AE  3444               	retlw	68	;'D'
   675  09AF  3400               	retlw	0
   676  09B0                     STR_3:	
   677  09B0  3422               	retlw	34	;'"'
   678  09B1  342C               	retlw	44	;','
   679  09B2  3435               	retlw	53	;'5'
   680  09B3  342C               	retlw	44	;','
   681  09B4  3433               	retlw	51	;'3'
   682  09B5  340D               	retlw	13
   683  09B6  340A               	retlw	10
   684  09B7  3400               	retlw	0
   685  09B8                     STR_38:	
   686  09B8  342B               	retlw	43	;'+'
   687  09B9  3449               	retlw	73	;'I'
   688  09BA  3450               	retlw	80	;'P'
   689  09BB  3444               	retlw	68	;'D'
   690  09BC  342C               	retlw	44	;','
   691  09BD  3430               	retlw	48	;'0'
   692  09BE  342C               	retlw	44	;','
   693  09BF  3400               	retlw	0
   694  09C0                     STR_43:	
   695  09C0  344C               	retlw	76	;'L'
   696  09C1  3469               	retlw	105	;'i'
   697  09C2  346E               	retlw	110	;'n'
   698  09C3  346B               	retlw	107	;'k'
   699  09C4  3465               	retlw	101	;'e'
   700  09C5  3464               	retlw	100	;'d'
   701  09C6  3400               	retlw	0
   702  09C7                     STR_44:	
   703  09C7  3455               	retlw	85	;'U'
   704  09C8  346E               	retlw	110	;'n'
   705  09C9  346C               	retlw	108	;'l'
   706  09CA  3469               	retlw	105	;'i'
   707  09CB  346E               	retlw	110	;'n'
   708  09CC  346B               	retlw	107	;'k'
   709  09CD  3400               	retlw	0
   710  09CE                     STR_35:	
   711  09CE  342B               	retlw	43	;'+'
   712  09CF  3449               	retlw	73	;'I'
   713  09D0  3450               	retlw	80	;'P'
   714  09D1  3444               	retlw	68	;'D'
   715  09D2  342C               	retlw	44	;','
   716  09D3  3400               	retlw	0
   717  09D4                     STR_40:	
   718  09D4  3472               	retlw	114	;'r'
   719  09D5  3465               	retlw	101	;'e'
   720  09D6  3461               	retlw	97	;'a'
   721  09D7  3464               	retlw	100	;'d'
   722  09D8  3479               	retlw	121	;'y'
   723  09D9  3400               	retlw	0
   724  09DA                     STR_36:	
   725  09DA  340D               	retlw	13
   726  09DB  340A               	retlw	10
   727  09DC  340D               	retlw	13
   728  09DD  340A               	retlw	10
   729  09DE  3400               	retlw	0
   730  09DF                     STR_9:	
   731  09DF  3441               	retlw	65	;'A'
   732  09E0  3454               	retlw	84	;'T'
   733  09E1  340D               	retlw	13
   734  09E2  340A               	retlw	10
   735  09E3  3400               	retlw	0
   736  09E4                     STR_8:	
   737  09E4  344D               	retlw	77	;'M'
   738  09E5  3441               	retlw	65	;'A'
   739  09E6  3443               	retlw	67	;'C'
   740  09E7  343A               	retlw	58	;':'
   741  09E8  3400               	retlw	0
   742  09E9                     STR_41:	
   743  09E9  3446               	retlw	70	;'F'
   744  09EA  3441               	retlw	65	;'A'
   745  09EB  3449               	retlw	73	;'I'
   746  09EC  344C               	retlw	76	;'L'
   747  09ED  3400               	retlw	0
   748  09EE                     STR_18:	
   749  09EE  3422               	retlw	34	;'"'
   750  09EF  340D               	retlw	13
   751  09F0  340A               	retlw	10
   752  09F1  3400               	retlw	0
   753  09F2                     STR_2:	
   754  09F2  3422               	retlw	34	;'"'
   755  09F3  342C               	retlw	44	;','
   756  09F4  3422               	retlw	34	;'"'
   757  09F5  3400               	retlw	0
   758  09F6                     STR_7:	
   759  09F6  3449               	retlw	73	;'I'
   760  09F7  3450               	retlw	80	;'P'
   761  09F8  343A               	retlw	58	;':'
   762  09F9  3400               	retlw	0
   763  09FA                     STR_11:	
   764  09FA  3441               	retlw	65	;'A'
   765  09FB  3454               	retlw	84	;'T'
   766  09FC  3445               	retlw	69	;'E'
   767  09FD  3400               	retlw	0
   768  09FE                     STR_26:	
   769  09FE  3454               	retlw	84	;'T'
   770  09FF  3443               	retlw	67	;'C'
   771  0A00  3450               	retlw	80	;'P'
   772  0A01  3400               	retlw	0
   773  0A02                     STR_27:	
   774  0A02  3455               	retlw	85	;'U'
   775  0A03  3444               	retlw	68	;'D'
   776  0A04  3450               	retlw	80	;'P'
   777  0A05  3400               	retlw	0
   778  0A06                     STR_29:	
   779  0A06  3422               	retlw	34	;'"'
   780  0A07  342C               	retlw	44	;','
   781  0A08  3400               	retlw	0
   782  0A09                     STR_13:	
   783  0A09  344F               	retlw	79	;'O'
   784  0A0A  344B               	retlw	75	;'K'
   785  0A0B  3400               	retlw	0
   786  0A0C                     STR_30:	
   787  0A0C  3425               	retlw	37	;'%'
   788  0A0D  3475               	retlw	117	;'u'
   789  0A0E  3400               	retlw	0
   790  09DC                     
   791                           ; #config settings
   792  0000                     
   793                           	psect	cinit
   794  07E8                     start_initialization:	
   795  07E8                     __initialization:	
   796                           
   797                           ; Initialize objects allocated to BANK1
   798  07E8  1383               	bcf	3,7	;select IRP bank0
   799  07E9  30C7               	movlw	low (__pdataBANK1+16)
   800  07EA  00FD               	movwf	btemp+-1
   801  07EB  300E               	movlw	high __pidataBANK1
   802  07EC  00FE               	movwf	btemp
   803  07ED  3075               	movlw	low __pidataBANK1
   804  07EE  00FF               	movwf	btemp+1
   805  07EF  30B7               	movlw	low __pdataBANK1
   806  07F0  0084               	movwf	4
   807  07F1  120A  158A  2689  120A  118A  	fcall	init_ram0
   808                           
   809                           ; Clear objects allocated to BANK1
   810  07F6  30A0               	movlw	low __pbssBANK1
   811  07F7  0084               	movwf	4
   812  07F8  30B7               	movlw	low (__pbssBANK1+23)
   813  07F9  120A  118A  2003   	fcall	clear_ram0
   814  07FC                     end_of_initialization:	
   815                           ;End of C runtime variable initialization code
   816                           
   817  07FC                     __end_of__initialization:	
   818  07FC  0183               	clrf	3
   819  07FD  120A  118A  2DCE   	ljmp	_main	;jump to C main() function
   820                           
   821                           	psect	bssBANK1
   822  00A0                     __pbssBANK1:	
   823  00A0                     __esp8266_waitResponse@F2066:	
   824  00A0                     	ds	8
   825  00A8                     esp8266_send@F2041:	
   826  00A8                     	ds	6
   827  00AE                     esp8266_start@F2038:	
   828  00AE                     	ds	5
   829  00B3                     revClient@F2055:	
   830  00B3                     	ds	4
   831                           
   832                           	psect	dataBANK1
   833  00B7                     __pdataBANK1:	
   834  00B7                     __esp8266_waitResponse@F2069:	
   835  00B7                     	ds	16
   836                           
   837                           	psect	inittext
   838  0E85                     init_fetch0:	
   839                           ;	Called with low address in FSR and high address in W
   840                           
   841  0E85  087E               	movf	126,w
   842  0E86  008A               	movwf	10
   843  0E87  087F               	movf	127,w
   844  0E88  0082               	movwf	2
   845  0E89                     init_ram0:	
   846                           ;Called with:
   847                           ;	high address of idata address in btemp 
   848                           ;	low address of idata address in btemp+1 
   849                           ;	low address of data in FSR
   850                           ;	high address + 1 of data in btemp-1
   851                           
   852  0E89  2685  120A  158A   	fcall	init_fetch0
   853  0E8C  0080               	movwf	0
   854  0E8D  0A84               	incf	4,f
   855  0E8E  0804               	movf	4,w
   856  0E8F  067D               	xorwf	125,w
   857  0E90  1903               	btfsc	3,2
   858  0E91  3400               	retlw	0
   859  0E92  0AFF               	incf	127,f
   860  0E93  1903               	btfsc	3,2
   861  0E94  0AFE               	incf	126,f
   862  0E95  2E89               	goto	init_ram0
   863                           
   864                           	psect	clrtext
   865  0003                     clear_ram0:	
   866                           ;	Called with FSR containing the base address, and
   867                           ;	W with the last address+1
   868                           
   869  0003  0064               	clrwdt	;clear the watchdog before getting into this loop
   870  0004                     clrloop0:	
   871  0004  0180               	clrf	0	;clear RAM location pointed to by FSR
   872  0005  0A84               	incf	4,f	;increment pointer
   873  0006  0604               	xorwf	4,w	;XOR with final address
   874  0007  1903               	btfsc	3,2	;have we reached the end yet?
   875  0008  3400               	retlw	0	;all done for this memory range, return
   876  0009  0604               	xorwf	4,w	;XOR again to restore value
   877  000A  2804               	goto	clrloop0	;do the next byte
   878                           
   879                           	psect	cstackCOMMON
   880  0070                     __pcstackCOMMON:	
   881  0070                     ?_isdigit:	
   882  0070                     ?_esp8266_isStarted:	
   883                           ; 1 bit 
   884                           
   885  0070                     ?__esp8266_waitResponse:	
   886                           ; 1 bit 
   887                           
   888  0070                     ??__esp8266_waitResponse:	
   889                           ; 1 bytes @ 0x0
   890                           
   891  0070                     ??_isdigit:	
   892                           ; 1 bytes @ 0x0
   893                           
   894  0070                     ?_Lcd_Port:	
   895                           ; 1 bytes @ 0x0
   896                           
   897  0070                     ??_Lcd_Port:	
   898                           ; 1 bytes @ 0x0
   899                           
   900  0070                     ?_Lcd_Cmd:	
   901                           ; 1 bytes @ 0x0
   902                           
   903  0070                     ?_Lcd_Init:	
   904                           ; 1 bytes @ 0x0
   905                           
   906  0070                     ?_Lcd_Print_Char:	
   907                           ; 1 bytes @ 0x0
   908                           
   909  0070                     ?__esp8266_putch:	
   910                           ; 1 bytes @ 0x0
   911                           
   912  0070                     ??__esp8266_putch:	
   913                           ; 1 bytes @ 0x0
   914                           
   915  0070                     ?__esp8266_getch:	
   916                           ; 1 bytes @ 0x0
   917                           
   918  0070                     ??__esp8266_getch:	
   919                           ; 1 bytes @ 0x0
   920                           
   921  0070                     ?_esp8266_multi:	
   922                           ; 1 bytes @ 0x0
   923                           
   924  0070                     ?_esp8266_config_server:	
   925                           ; 1 bytes @ 0x0
   926                           
   927  0070                     ?_esp8266_mode:	
   928                           ; 1 bytes @ 0x0
   929                           
   930  0070                     ?_main:	
   931                           ; 1 bytes @ 0x0
   932                           
   933  0070                     ?__esp8266_waitFor:	
   934                           ; 1 bytes @ 0x0
   935                           
   936  0070                     ?_strlen:	
   937                           ; 2 bytes @ 0x0
   938                           
   939  0070                     ?_Lcd_Clear:	
   940                           ; 2 bytes @ 0x0
   941                           
   942  0070                     ?___wmul:	
   943                           ; 2 bytes @ 0x0
   944                           
   945  0070                     ?___lwdiv:	
   946                           ; 2 bytes @ 0x0
   947                           
   948  0070                     ?___aldiv:	
   949                           ; 2 bytes @ 0x0
   950                           
   951  0070                     Lcd_Port@a:	
   952                           ; 4 bytes @ 0x0
   953                           
   954  0070                     __esp8266_putch@bt:	
   955                           ; 1 bytes @ 0x0
   956                           
   957  0070                     _isdigit$480:	
   958                           ; 1 bytes @ 0x0
   959                           
   960  0070                     __esp8266_waitFor@string:	
   961                           ; 1 bytes @ 0x0
   962                           
   963  0070                     ___wmul@multiplier:	
   964                           ; 2 bytes @ 0x0
   965                           
   966  0070                     ___lwdiv@divisor:	
   967                           ; 2 bytes @ 0x0
   968                           
   969  0070                     strlen@s:	
   970                           ; 2 bytes @ 0x0
   971                           
   972  0070                     ___aldiv@divisor:	
   973                           ; 2 bytes @ 0x0
   974                           
   975                           
   976                           ; 4 bytes @ 0x0
   977  0070                     	ds	1
   978  0071                     ?__esp8266_print:	
   979  0071                     ??_Lcd_Cmd:	
   980                           ; 1 bytes @ 0x1
   981                           
   982  0071                     ??_Lcd_Print_Char:	
   983                           ; 1 bytes @ 0x1
   984                           
   985  0071                     ?_ESP8266_send_string:	
   986                           ; 1 bytes @ 0x1
   987                           
   988  0071                     isdigit@c:	
   989                           ; 1 bytes @ 0x1
   990                           
   991  0071                     ESP8266_send_string@st_pt:	
   992                           ; 1 bytes @ 0x1
   993                           
   994  0071                     __esp8266_print@ptr:	
   995                           ; 2 bytes @ 0x1
   996                           
   997                           
   998                           ; 2 bytes @ 0x1
   999  0071                     	ds	1
  1000  0072                     ??__esp8266_waitFor:	
  1001  0072                     ??_strlen:	
  1002                           ; 1 bytes @ 0x2
  1003                           
  1004  0072                     Lcd_Print_Char@temp:	
  1005                           ; 1 bytes @ 0x2
  1006                           
  1007  0072                     ___wmul@multiplicand:	
  1008                           ; 1 bytes @ 0x2
  1009                           
  1010  0072                     ___lwdiv@dividend:	
  1011                           ; 2 bytes @ 0x2
  1012                           
  1013                           
  1014                           ; 2 bytes @ 0x2
  1015  0072                     	ds	1
  1016  0073                     ??__esp8266_print:	
  1017  0073                     ??_ESP8266_send_string:	
  1018                           ; 1 bytes @ 0x3
  1019                           
  1020  0073                     Lcd_Cmd@a:	
  1021                           ; 1 bytes @ 0x3
  1022                           
  1023  0073                     Lcd_Print_Char@y:	
  1024                           ; 1 bytes @ 0x3
  1025                           
  1026  0073                     __esp8266_waitFor@counter:	
  1027                           ; 1 bytes @ 0x3
  1028                           
  1029                           
  1030                           ; 2 bytes @ 0x3
  1031  0073                     	ds	1
  1032  0074                     ??_Lcd_Clear:	
  1033  0074                     ?_Lcd_Set_Cursor:	
  1034                           ; 1 bytes @ 0x4
  1035                           
  1036  0074                     ??_Lcd_Init:	
  1037                           ; 1 bytes @ 0x4
  1038                           
  1039  0074                     ?_esp8266_config_softAP:	
  1040                           ; 1 bytes @ 0x4
  1041                           
  1042  0074                     ??_esp8266_multi:	
  1043                           ; 1 bytes @ 0x4
  1044                           
  1045  0074                     ??_esp8266_config_server:	
  1046                           ; 1 bytes @ 0x4
  1047                           
  1048  0074                     ??_esp8266_isStarted:	
  1049                           ; 1 bytes @ 0x4
  1050                           
  1051  0074                     ??_esp8266_mode:	
  1052                           ; 1 bytes @ 0x4
  1053                           
  1054  0074                     ??___wmul:	
  1055                           ; 1 bytes @ 0x4
  1056                           
  1057  0074                     ??___lwdiv:	
  1058                           ; 1 bytes @ 0x4
  1059                           
  1060  0074                     Lcd_Set_Cursor@b:	
  1061                           ; 1 bytes @ 0x4
  1062                           
  1063  0074                     Lcd_Print_Char@a:	
  1064                           ; 1 bytes @ 0x4
  1065                           
  1066  0074                     esp8266_mode@mode:	
  1067                           ; 1 bytes @ 0x4
  1068                           
  1069  0074                     esp8266_config_softAP@softssid:	
  1070                           ; 1 bytes @ 0x4
  1071                           
  1072  0074                     ___wmul@product:	
  1073                           ; 2 bytes @ 0x4
  1074                           
  1075  0074                     strlen@cp:	
  1076                           ; 2 bytes @ 0x4
  1077                           
  1078  0074                     ___aldiv@dividend:	
  1079                           ; 2 bytes @ 0x4
  1080                           
  1081                           
  1082                           ; 4 bytes @ 0x4
  1083  0074                     	ds	1
  1084  0075                     ??_Lcd_Set_Cursor:	
  1085  0075                     ?_Lcd_Print_String:	
  1086                           ; 1 bytes @ 0x5
  1087                           
  1088  0075                     __esp8266_waitFor@received:	
  1089                           ; 1 bytes @ 0x5
  1090                           
  1091  0075                     Lcd_Print_String@a:	
  1092                           ; 1 bytes @ 0x5
  1093                           
  1094  0075                     ___lwdiv@quotient:	
  1095                           ; 2 bytes @ 0x5
  1096                           
  1097                           
  1098                           ; 2 bytes @ 0x5
  1099  0075                     	ds	1
  1100  0076                     ?_atoi:	
  1101  0076                     __esp8266_waitFor@temp:	
  1102                           ; 2 bytes @ 0x6
  1103                           
  1104  0076                     esp8266_config_softAP@softpass:	
  1105                           ; 1 bytes @ 0x6
  1106                           
  1107                           
  1108                           ; 2 bytes @ 0x6
  1109  0076                     	ds	1
  1110  0077                     ??_Lcd_Print_String:	
  1111  0077                     Lcd_Set_Cursor@a:	
  1112                           ; 1 bytes @ 0x7
  1113                           
  1114  0077                     ___lwdiv@counter:	
  1115                           ; 1 bytes @ 0x7
  1116                           
  1117                           
  1118                           ; 1 bytes @ 0x7
  1119  0077                     	ds	1
  1120  0078                     ??_atoi:	
  1121  0078                     ??_esp8266_config_softAP:	
  1122                           ; 1 bytes @ 0x8
  1123                           
  1124  0078                     ??___aldiv:	
  1125                           ; 1 bytes @ 0x8
  1126                           
  1127  0078                     ?___lwmod:	
  1128                           ; 1 bytes @ 0x8
  1129                           
  1130  0078                     Lcd_Set_Cursor@z:	
  1131                           ; 2 bytes @ 0x8
  1132                           
  1133  0078                     ___lwmod@divisor:	
  1134                           ; 1 bytes @ 0x8
  1135                           
  1136                           
  1137                           ; 2 bytes @ 0x8
  1138  0078                     	ds	1
  1139  0079                     Lcd_Set_Cursor@y:	
  1140  0079                     UART_Init@x:	
  1141                           ; 1 bytes @ 0x9
  1142                           
  1143                           
  1144                           ; 2 bytes @ 0x9
  1145  0079                     	ds	1
  1146  007A                     Lcd_Set_Cursor@temp:	
  1147  007A                     atoi@sign:	
  1148                           ; 1 bytes @ 0xA
  1149                           
  1150  007A                     Lcd_Print_String@i:	
  1151                           ; 1 bytes @ 0xA
  1152                           
  1153  007A                     ___lwmod@dividend:	
  1154                           ; 2 bytes @ 0xA
  1155                           
  1156                           
  1157                           ; 2 bytes @ 0xA
  1158  007A                     	ds	1
  1159  007B                     atoi@a:	
  1160                           
  1161                           ; 2 bytes @ 0xB
  1162  007B                     	ds	1
  1163  007C                     ??___lwmod:	
  1164                           
  1165                           ; 1 bytes @ 0xC
  1166  007C                     	ds	1
  1167  007D                     atoi@s:	
  1168  007D                     ___lwmod@counter:	
  1169                           ; 1 bytes @ 0xD
  1170                           
  1171                           
  1172                           ; 1 bytes @ 0xD
  1173  007D                     	ds	1
  1174  007E                     ??_esp8266_send:	
  1175                           
  1176                           	psect	cstackBANK0
  1177  0020                     __pcstackBANK0:	
  1178                           ; 1 bytes @ 0xE
  1179                           
  1180  0020                     ?_revClient:	
  1181  0020                     ?_sprintf:	
  1182                           ; 1 bytes @ 0x0
  1183                           
  1184  0020                     ___aldiv@counter:	
  1185                           ; 2 bytes @ 0x0
  1186                           
  1187  0020                     revClient@lenght:	
  1188                           ; 1 bytes @ 0x0
  1189                           
  1190  0020                     sprintf@f:	
  1191                           ; 2 bytes @ 0x0
  1192                           
  1193  0020                     __esp8266_waitResponse@strings:	
  1194                           ; 2 bytes @ 0x0
  1195                           
  1196                           
  1197                           ; 16 bytes @ 0x0
  1198  0020                     	ds	1
  1199  0021                     ___aldiv@sign:	
  1200                           
  1201                           ; 1 bytes @ 0x1
  1202  0021                     	ds	1
  1203  0022                     ??_revClient:	
  1204  0022                     ___aldiv@quotient:	
  1205                           ; 1 bytes @ 0x2
  1206                           
  1207                           
  1208                           ; 4 bytes @ 0x2
  1209  0022                     	ds	2
  1210  0024                     ??_sprintf:	
  1211  0024                     revClient@_lenght2:	
  1212                           ; 1 bytes @ 0x4
  1213                           
  1214                           
  1215                           ; 1 bytes @ 0x4
  1216  0024                     	ds	1
  1217  0025                     revClient@_lenght:	
  1218                           
  1219                           ; 4 bytes @ 0x5
  1220  0025                     	ds	1
  1221  0026                     ?_UART_Init:	
  1222  0026                     UART_Init@baudrate:	
  1223                           ; 1 bytes @ 0x6
  1224                           
  1225                           
  1226                           ; 4 bytes @ 0x6
  1227  0026                     	ds	1
  1228  0027                     sprintf@flag:	
  1229                           
  1230                           ; 1 bytes @ 0x7
  1231  0027                     	ds	1
  1232  0028                     sprintf@ap:	
  1233                           
  1234                           ; 1 bytes @ 0x8
  1235  0028                     	ds	1
  1236  0029                     revClient@_string_Rev:	
  1237  0029                     sprintf@val:	
  1238                           ; 1 bytes @ 0x9
  1239                           
  1240                           
  1241                           ; 2 bytes @ 0x9
  1242  0029                     	ds	1
  1243  002A                     ??_UART_Init:	
  1244  002A                     revClient@_truesize:	
  1245                           ; 1 bytes @ 0xA
  1246                           
  1247                           
  1248                           ; 2 bytes @ 0xA
  1249  002A                     	ds	1
  1250  002B                     sprintf@prec:	
  1251                           
  1252                           ; 1 bytes @ 0xB
  1253  002B                     	ds	1
  1254  002C                     sprintf@sp:	
  1255  002C                     revClient@_temp2:	
  1256                           ; 1 bytes @ 0xC
  1257                           
  1258                           
  1259                           ; 2 bytes @ 0xC
  1260  002C                     	ds	1
  1261  002D                     sprintf@c:	
  1262                           
  1263                           ; 1 bytes @ 0xD
  1264  002D                     	ds	1
  1265  002E                     revClient@_temp:	
  1266                           
  1267                           ; 2 bytes @ 0xE
  1268  002E                     	ds	2
  1269  0030                     __esp8266_waitResponse@so_far:	
  1270                           
  1271                           ; 8 bytes @ 0x10
  1272  0030                     	ds	8
  1273  0038                     __esp8266_waitResponse@received:	
  1274                           
  1275                           ; 1 bytes @ 0x18
  1276  0038                     	ds	1
  1277  0039                     __esp8266_waitResponse@response:	
  1278                           
  1279                           ; 1 bytes @ 0x19
  1280  0039                     	ds	1
  1281  003A                     __esp8266_waitResponse@continue_loop:	
  1282                           
  1283                           ; 1 bytes @ 0x1A
  1284  003A                     	ds	1
  1285  003B                     __esp8266_waitResponse@i:	
  1286                           
  1287                           ; 1 bytes @ 0x1B
  1288  003B                     	ds	1
  1289  003C                     ?_esp8266_send:	
  1290  003C                     esp8266_send@data:	
  1291                           ; 1 bit 
  1292                           
  1293                           
  1294                           ; 2 bytes @ 0x1C
  1295  003C                     	ds	2
  1296  003E                     esp8266_send@length_str:	
  1297                           
  1298                           ; 6 bytes @ 0x1E
  1299  003E                     	ds	6
  1300  0044                     ??_main:	
  1301                           
  1302                           ; 1 bytes @ 0x24
  1303  0044                     	ds	3
  1304  0047                     main@revN:	
  1305                           
  1306                           ; 16 bytes @ 0x27
  1307  0047                     	ds	16
  1308  0057                     main@revC:	
  1309                           
  1310                           ; 16 bytes @ 0x37
  1311  0057                     	ds	16
  1312  0067                     main@_revSizeN:	
  1313                           
  1314                           ; 2 bytes @ 0x47
  1315  0067                     	ds	2
  1316  0069                     main@_revSizeC:	
  1317                           
  1318                           ; 2 bytes @ 0x49
  1319  0069                     	ds	2
  1320  006B                     main@a:	
  1321                           
  1322                           ; 2 bytes @ 0x4B
  1323  006B                     	ds	2
  1324                           
  1325                           	psect	maintext
  1326  05CE                     __pmaintext:	
  1327 ;;
  1328 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  1329 ;;
  1330 ;; *************** function _main *****************
  1331 ;; Defined at:
  1332 ;;		line 27 in file "main887.c"
  1333 ;; Parameters:    Size  Location     Type
  1334 ;;		None
  1335 ;; Auto vars:     Size  Location     Type
  1336 ;;  revC           16   55[BANK0 ] unsigned char [16]
  1337 ;;  revN           16   39[BANK0 ] unsigned char [16]
  1338 ;;  a               2   75[BANK0 ] int 
  1339 ;;  _revSizeC       2   73[BANK0 ] int 
  1340 ;;  _revSizeN       2   71[BANK0 ] int 
  1341 ;; Return value:  Size  Location     Type
  1342 ;;                  1    wreg      void 
  1343 ;; Registers used:
  1344 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1345 ;; Tracked objects:
  1346 ;;		On entry : B00/0
  1347 ;;		On exit  : 0/0
  1348 ;;		Unchanged: 0/0
  1349 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1350 ;;      Params:         0       0       0       0       0
  1351 ;;      Locals:         0      38       0       0       0
  1352 ;;      Temps:          0       3       0       0       0
  1353 ;;      Totals:         0      41       0       0       0
  1354 ;;Total ram usage:       41 bytes
  1355 ;; Hardware stack levels required when called:    3
  1356 ;; This function calls:
  1357 ;;		_Lcd_Clear
  1358 ;;		_Lcd_Init
  1359 ;;		_Lcd_Print_String
  1360 ;;		_Lcd_Set_Cursor
  1361 ;;		_UART_Init
  1362 ;;		__esp8266_waitResponse
  1363 ;;		_esp8266_config_server
  1364 ;;		_esp8266_config_softAP
  1365 ;;		_esp8266_isStarted
  1366 ;;		_esp8266_mode
  1367 ;;		_esp8266_multi
  1368 ;;		_esp8266_send
  1369 ;;		_revClient
  1370 ;; This function is called by:
  1371 ;;		Startup code after reset
  1372 ;; This function uses a non-reentrant model
  1373 ;;
  1374                           
  1375                           
  1376                           ;psect for function _main
  1377  05CE                     _main:	
  1378                           
  1379                           ;main887.c: 29: TRISD = 0x00;
  1380                           
  1381                           ;incstack = 0
  1382                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1383  05CE  1683               	bsf	3,5	;RP0=1, select bank1
  1384  05CF  1303               	bcf	3,6	;RP1=0, select bank1
  1385  05D0  0188               	clrf	8	;volatile
  1386                           
  1387                           ;main887.c: 30: int a =0;
  1388  05D1  1283               	bcf	3,5	;RP0=0, select bank0
  1389  05D2  1303               	bcf	3,6	;RP1=0, select bank0
  1390  05D3  01EB               	clrf	main@a
  1391  05D4  01EC               	clrf	main@a+1
  1392                           
  1393                           ;main887.c: 31: char revN[16], revC[16];
  1394                           ;main887.c: 32: int _revSizeN = 0, _revSizeC = 0;
  1395  05D5  01E7               	clrf	main@_revSizeN
  1396  05D6  01E8               	clrf	main@_revSizeN+1
  1397  05D7  01E9               	clrf	main@_revSizeC
  1398  05D8  01EA               	clrf	main@_revSizeC+1
  1399                           
  1400                           ;main887.c: 33: Lcd_Init();
  1401  05D9  120A  118A  2131  120A  118A  	fcall	_Lcd_Init
  1402                           
  1403                           ;main887.c: 34: UART_Init(9600) ;
  1404  05DE  3000               	movlw	0
  1405  05DF  1283               	bcf	3,5	;RP0=0, select bank0
  1406  05E0  1303               	bcf	3,6	;RP1=0, select bank0
  1407  05E1  00A9               	movwf	UART_Init@baudrate+3
  1408  05E2  3000               	movlw	0
  1409  05E3  00A8               	movwf	UART_Init@baudrate+2
  1410  05E4  3025               	movlw	37
  1411  05E5  00A7               	movwf	UART_Init@baudrate+1
  1412  05E6  3080               	movlw	128
  1413  05E7  00A6               	movwf	UART_Init@baudrate
  1414  05E8  120A  118A  24E6  120A  118A  	fcall	_UART_Init
  1415                           
  1416                           ;main887.c: 36: Lcd_Set_Cursor(1,1);
  1417  05ED  01F4               	clrf	Lcd_Set_Cursor@b
  1418  05EE  0AF4               	incf	Lcd_Set_Cursor@b,f
  1419  05EF  3001               	movlw	1
  1420  05F0  120A  118A  20E7  120A  118A  	fcall	_Lcd_Set_Cursor
  1421                           
  1422                           ;main887.c: 37: Lcd_Print_String("Hoangnl141782");
  1423  05F5  30DD               	movlw	low (STR_47| (0+32768))
  1424  05F6  00F5               	movwf	Lcd_Print_String@a
  1425  05F7  3088               	movlw	high (STR_47| (0+32768))
  1426  05F8  00F6               	movwf	Lcd_Print_String@a+1
  1427  05F9  120A  118A  20AA  120A  118A  	fcall	_Lcd_Print_String
  1428                           
  1429                           ;main887.c: 38: Lcd_Set_Cursor(2,1);
  1430  05FE  01F4               	clrf	Lcd_Set_Cursor@b
  1431  05FF  0AF4               	incf	Lcd_Set_Cursor@b,f
  1432  0600  3002               	movlw	2
  1433  0601  120A  118A  20E7  120A  118A  	fcall	_Lcd_Set_Cursor
  1434                           
  1435                           ;main887.c: 39: Lcd_Print_String("ESP8266 with PIC");
  1436  0606  3052               	movlw	low (STR_48| (0+32768))
  1437  0607  00F5               	movwf	Lcd_Print_String@a
  1438  0608  3088               	movlw	high (STR_48| (0+32768))
  1439  0609  00F6               	movwf	Lcd_Print_String@a+1
  1440  060A  120A  118A  20AA  120A  118A  	fcall	_Lcd_Print_String
  1441                           
  1442                           ;main887.c: 40: _delay((unsigned long)((1500)*(11059200/4000.0)));
  1443  060F  3016               	movlw	22
  1444  0610  1283               	bcf	3,5	;RP0=0, select bank0
  1445  0611  1303               	bcf	3,6	;RP1=0, select bank0
  1446  0612  00C6               	movwf	??_main+2
  1447  0613  300A               	movlw	10
  1448  0614  00C5               	movwf	??_main+1
  1449  0615  30E8               	movlw	232
  1450  0616  00C4               	movwf	??_main
  1451  0617                     u2137:	
  1452  0617  0BC4               	decfsz	??_main,f
  1453  0618  2E17               	goto	u2137
  1454  0619  0BC5               	decfsz	??_main+1,f
  1455  061A  2E17               	goto	u2137
  1456  061B  0BC6               	decfsz	??_main+2,f
  1457  061C  2E17               	goto	u2137
  1458  061D  0000               	nop
  1459                           
  1460                           ;main887.c: 41: Lcd_Clear();
  1461  061E  120A  158A  2642  120A  118A  	fcall	_Lcd_Clear
  1462  0623                     l2219:	
  1463                           ;main887.c: 43: do
  1464                           
  1465                           
  1466                           ;main887.c: 44: {
  1467                           ;main887.c: 45: Lcd_Set_Cursor(1,1);
  1468  0623  01F4               	clrf	Lcd_Set_Cursor@b
  1469  0624  0AF4               	incf	Lcd_Set_Cursor@b,f
  1470  0625  3001               	movlw	1
  1471  0626  120A  118A  20E7  120A  118A  	fcall	_Lcd_Set_Cursor
  1472                           
  1473                           ;main887.c: 46: Lcd_Print_String("ESP not found");
  1474  062B  30F9               	movlw	low (STR_49| (0+32768))
  1475  062C  00F5               	movwf	Lcd_Print_String@a
  1476  062D  3088               	movlw	high (STR_49| (0+32768))
  1477  062E  00F6               	movwf	Lcd_Print_String@a+1
  1478  062F  120A  118A  20AA  120A  118A  	fcall	_Lcd_Print_String
  1479                           
  1480                           ;main887.c: 47: }while (!esp8266_isStarted());
  1481  0634  120A  158A  2696  120A  118A  	fcall	_esp8266_isStarted
  1482  0639  1C03               	btfss	3,0
  1483  063A  2E23               	goto	l2219
  1484                           
  1485                           ;main887.c: 48: Lcd_Set_Cursor(1,1);
  1486  063B  01F4               	clrf	Lcd_Set_Cursor@b
  1487  063C  0AF4               	incf	Lcd_Set_Cursor@b,f
  1488  063D  3001               	movlw	1
  1489  063E  120A  118A  20E7  120A  118A  	fcall	_Lcd_Set_Cursor
  1490                           
  1491                           ;main887.c: 49: Lcd_Print_String("ESP is connected");
  1492  0643  3063               	movlw	low (STR_50| (0+32768))
  1493  0644  00F5               	movwf	Lcd_Print_String@a
  1494  0645  3088               	movlw	high (STR_50| (0+32768))
  1495  0646  00F6               	movwf	Lcd_Print_String@a+1
  1496  0647  120A  118A  20AA  120A  118A  	fcall	_Lcd_Print_String
  1497                           
  1498                           ;main887.c: 50: _delay((unsigned long)((1500)*(11059200/4000.0)));
  1499  064C  3016               	movlw	22
  1500  064D  1283               	bcf	3,5	;RP0=0, select bank0
  1501  064E  1303               	bcf	3,6	;RP1=0, select bank0
  1502  064F  00C6               	movwf	??_main+2
  1503  0650  300A               	movlw	10
  1504  0651  00C5               	movwf	??_main+1
  1505  0652  30E8               	movlw	232
  1506  0653  00C4               	movwf	??_main
  1507  0654                     u2147:	
  1508  0654  0BC4               	decfsz	??_main,f
  1509  0655  2E54               	goto	u2147
  1510  0656  0BC5               	decfsz	??_main+1,f
  1511  0657  2E54               	goto	u2147
  1512  0658  0BC6               	decfsz	??_main+2,f
  1513  0659  2E54               	goto	u2147
  1514  065A  0000               	nop
  1515                           
  1516                           ;main887.c: 52: esp8266_multi();
  1517  065B  120A  158A  265A  120A  118A  	fcall	_esp8266_multi
  1518                           
  1519                           ;main887.c: 53: Lcd_Set_Cursor(2,1);
  1520  0660  01F4               	clrf	Lcd_Set_Cursor@b
  1521  0661  0AF4               	incf	Lcd_Set_Cursor@b,f
  1522  0662  3002               	movlw	2
  1523  0663  120A  118A  20E7  120A  118A  	fcall	_Lcd_Set_Cursor
  1524                           
  1525                           ;main887.c: 54: Lcd_Print_String("Enable multiple");
  1526  0668  3084               	movlw	low (STR_51| (0+32768))
  1527  0669  00F5               	movwf	Lcd_Print_String@a
  1528  066A  3088               	movlw	high (STR_51| (0+32768))
  1529  066B  00F6               	movwf	Lcd_Print_String@a+1
  1530  066C  120A  118A  20AA  120A  118A  	fcall	_Lcd_Print_String
  1531                           
  1532                           ;main887.c: 55: _delay((unsigned long)((1500)*(11059200/4000.0)));
  1533  0671  3016               	movlw	22
  1534  0672  1283               	bcf	3,5	;RP0=0, select bank0
  1535  0673  1303               	bcf	3,6	;RP1=0, select bank0
  1536  0674  00C6               	movwf	??_main+2
  1537  0675  300A               	movlw	10
  1538  0676  00C5               	movwf	??_main+1
  1539  0677  30E8               	movlw	232
  1540  0678  00C4               	movwf	??_main
  1541  0679                     u2157:	
  1542  0679  0BC4               	decfsz	??_main,f
  1543  067A  2E79               	goto	u2157
  1544  067B  0BC5               	decfsz	??_main+1,f
  1545  067C  2E79               	goto	u2157
  1546  067D  0BC6               	decfsz	??_main+2,f
  1547  067E  2E79               	goto	u2157
  1548  067F  0000               	nop
  1549                           
  1550                           ;main887.c: 56: Lcd_Clear();
  1551  0680  120A  158A  2642  120A  118A  	fcall	_Lcd_Clear
  1552                           
  1553                           ;main887.c: 58: esp8266_mode(3);
  1554  0685  3003               	movlw	3
  1555  0686  120A  158A  26DF  120A  118A  	fcall	_esp8266_mode
  1556                           
  1557                           ;main887.c: 59: Lcd_Set_Cursor(1,1);
  1558  068B  01F4               	clrf	Lcd_Set_Cursor@b
  1559  068C  0AF4               	incf	Lcd_Set_Cursor@b,f
  1560  068D  3001               	movlw	1
  1561  068E  120A  118A  20E7  120A  118A  	fcall	_Lcd_Set_Cursor
  1562                           
  1563                           ;main887.c: 60: Lcd_Print_String("ESP set as Dual");
  1564  0693  3094               	movlw	low (STR_52| (0+32768))
  1565  0694  00F5               	movwf	Lcd_Print_String@a
  1566  0695  3088               	movlw	high (STR_52| (0+32768))
  1567  0696  00F6               	movwf	Lcd_Print_String@a+1
  1568  0697  120A  118A  20AA  120A  118A  	fcall	_Lcd_Print_String
  1569                           
  1570                           ;main887.c: 61: _delay((unsigned long)((1500)*(11059200/4000.0)));
  1571  069C  3016               	movlw	22
  1572  069D  1283               	bcf	3,5	;RP0=0, select bank0
  1573  069E  1303               	bcf	3,6	;RP1=0, select bank0
  1574  069F  00C6               	movwf	??_main+2
  1575  06A0  300A               	movlw	10
  1576  06A1  00C5               	movwf	??_main+1
  1577  06A2  30E8               	movlw	232
  1578  06A3  00C4               	movwf	??_main
  1579  06A4                     u2167:	
  1580  06A4  0BC4               	decfsz	??_main,f
  1581  06A5  2EA4               	goto	u2167
  1582  06A6  0BC5               	decfsz	??_main+1,f
  1583  06A7  2EA4               	goto	u2167
  1584  06A8  0BC6               	decfsz	??_main+2,f
  1585  06A9  2EA4               	goto	u2167
  1586  06AA  0000               	nop
  1587                           
  1588                           ;main887.c: 63: esp8266_config_server();
  1589  06AB  120A  158A  264D  120A  118A  	fcall	_esp8266_config_server
  1590                           
  1591                           ;main887.c: 64: Lcd_Set_Cursor(2,1);
  1592  06B0  01F4               	clrf	Lcd_Set_Cursor@b
  1593  06B1  0AF4               	incf	Lcd_Set_Cursor@b,f
  1594  06B2  3002               	movlw	2
  1595  06B3  120A  118A  20E7  120A  118A  	fcall	_Lcd_Set_Cursor
  1596                           
  1597                           ;main887.c: 65: Lcd_Print_String("ESP set as server");
  1598  06B8  3040               	movlw	low (STR_53| (0+32768))
  1599  06B9  00F5               	movwf	Lcd_Print_String@a
  1600  06BA  3088               	movlw	high (STR_53| (0+32768))
  1601  06BB  00F6               	movwf	Lcd_Print_String@a+1
  1602  06BC  120A  118A  20AA  120A  118A  	fcall	_Lcd_Print_String
  1603                           
  1604                           ;main887.c: 66: _delay((unsigned long)((1500)*(11059200/4000.0)));
  1605  06C1  3016               	movlw	22
  1606  06C2  1283               	bcf	3,5	;RP0=0, select bank0
  1607  06C3  1303               	bcf	3,6	;RP1=0, select bank0
  1608  06C4  00C6               	movwf	??_main+2
  1609  06C5  300A               	movlw	10
  1610  06C6  00C5               	movwf	??_main+1
  1611  06C7  30E8               	movlw	232
  1612  06C8  00C4               	movwf	??_main
  1613  06C9                     u2177:	
  1614  06C9  0BC4               	decfsz	??_main,f
  1615  06CA  2EC9               	goto	u2177
  1616  06CB  0BC5               	decfsz	??_main+1,f
  1617  06CC  2EC9               	goto	u2177
  1618  06CD  0BC6               	decfsz	??_main+2,f
  1619  06CE  2EC9               	goto	u2177
  1620  06CF  0000               	nop
  1621                           
  1622                           ;main887.c: 67: Lcd_Clear();
  1623  06D0  120A  158A  2642  120A  118A  	fcall	_Lcd_Clear
  1624                           
  1625                           ;main887.c: 69: esp8266_config_softAP("ESP8266","12345678");
  1626  06D5  300B               	movlw	low ((STR_56+4)| (0+32768))
  1627  06D6  00F4               	movwf	esp8266_config_softAP@softssid
  1628  06D7  3089               	movlw	high ((STR_56+4)| (0+32768))
  1629  06D8  00F5               	movwf	esp8266_config_softAP@softssid+1
  1630  06D9  30AA               	movlw	low ((STR_57+6)| (0+32768))
  1631  06DA  00F6               	movwf	esp8266_config_softAP@softpass
  1632  06DB  3088               	movlw	high ((STR_57+6)| (0+32768))
  1633  06DC  00F7               	movwf	esp8266_config_softAP@softpass+1
  1634  06DD  120A  158A  2764  120A  118A  	fcall	_esp8266_config_softAP
  1635                           
  1636                           ;main887.c: 70: Lcd_Set_Cursor(1,1);
  1637  06E2  01F4               	clrf	Lcd_Set_Cursor@b
  1638  06E3  0AF4               	incf	Lcd_Set_Cursor@b,f
  1639  06E4  3001               	movlw	1
  1640  06E5  120A  118A  20E7  120A  118A  	fcall	_Lcd_Set_Cursor
  1641                           
  1642                           ;main887.c: 71: Lcd_Print_String("ID: ESP8266");
  1643  06EA  3007               	movlw	low (STR_56| (0+32768))
  1644  06EB  00F5               	movwf	Lcd_Print_String@a
  1645  06EC  3089               	movlw	high (STR_56| (0+32768))
  1646  06ED  00F6               	movwf	Lcd_Print_String@a+1
  1647  06EE  120A  118A  20AA  120A  118A  	fcall	_Lcd_Print_String
  1648                           
  1649                           ;main887.c: 72: Lcd_Set_Cursor(2,1);
  1650  06F3  01F4               	clrf	Lcd_Set_Cursor@b
  1651  06F4  0AF4               	incf	Lcd_Set_Cursor@b,f
  1652  06F5  3002               	movlw	2
  1653  06F6  120A  118A  20E7  120A  118A  	fcall	_Lcd_Set_Cursor
  1654                           
  1655                           ;main887.c: 73: Lcd_Print_String("Pass: 12345678");
  1656  06FB  30A4               	movlw	low (STR_57| (0+32768))
  1657  06FC  00F5               	movwf	Lcd_Print_String@a
  1658  06FD  3088               	movlw	high (STR_57| (0+32768))
  1659  06FE  00F6               	movwf	Lcd_Print_String@a+1
  1660  06FF  120A  118A  20AA  120A  118A  	fcall	_Lcd_Print_String
  1661                           
  1662                           ;main887.c: 74: _delay((unsigned long)((1500)*(11059200/4000.0)));
  1663  0704  3016               	movlw	22
  1664  0705  1283               	bcf	3,5	;RP0=0, select bank0
  1665  0706  1303               	bcf	3,6	;RP1=0, select bank0
  1666  0707  00C6               	movwf	??_main+2
  1667  0708  300A               	movlw	10
  1668  0709  00C5               	movwf	??_main+1
  1669  070A  30E8               	movlw	232
  1670  070B  00C4               	movwf	??_main
  1671  070C                     u2187:	
  1672  070C  0BC4               	decfsz	??_main,f
  1673  070D  2F0C               	goto	u2187
  1674  070E  0BC5               	decfsz	??_main+1,f
  1675  070F  2F0C               	goto	u2187
  1676  0710  0BC6               	decfsz	??_main+2,f
  1677  0711  2F0C               	goto	u2187
  1678  0712  0000               	nop
  1679                           
  1680                           ;main887.c: 75: Lcd_Clear();
  1681  0713  120A  158A  2642  120A  118A  	fcall	_Lcd_Clear
  1682                           
  1683                           ;main887.c: 77: Lcd_Set_Cursor(1,1);
  1684  0718  01F4               	clrf	Lcd_Set_Cursor@b
  1685  0719  0AF4               	incf	Lcd_Set_Cursor@b,f
  1686  071A  3001               	movlw	1
  1687  071B  120A  118A  20E7  120A  118A  	fcall	_Lcd_Set_Cursor
  1688                           
  1689                           ;main887.c: 78: Lcd_Print_String("AP configured");
  1690  0720  30EB               	movlw	low (STR_58| (0+32768))
  1691  0721  00F5               	movwf	Lcd_Print_String@a
  1692  0722  3088               	movlw	high (STR_58| (0+32768))
  1693  0723  00F6               	movwf	Lcd_Print_String@a+1
  1694  0724  120A  118A  20AA  120A  118A  	fcall	_Lcd_Print_String
  1695                           
  1696                           ;main887.c: 79: Lcd_Set_Cursor(2,1);
  1697  0729  01F4               	clrf	Lcd_Set_Cursor@b
  1698  072A  0AF4               	incf	Lcd_Set_Cursor@b,f
  1699  072B  3002               	movlw	2
  1700  072C  120A  118A  20E7  120A  118A  	fcall	_Lcd_Set_Cursor
  1701                           
  1702                           ;main887.c: 80: Lcd_Print_String("Waiting...");
  1703  0731  3062               	movlw	low (STR_59| (0+32768))
  1704  0732  00F5               	movwf	Lcd_Print_String@a
  1705  0733  3089               	movlw	high (STR_59| (0+32768))
  1706  0734                     L1:	
  1707  0734  00F6               	movwf	Lcd_Print_String@a+1
  1708  0735  120A  118A  20AA  120A  118A  	fcall	_Lcd_Print_String
  1709                           
  1710                           ;main887.c: 83: {
  1711                           ;main887.c: 84: if(_esp8266_waitResponse() == 7)
  1712                           
  1713                           ;main887.c: 82: while(1)
  1714  073A  120A  118A  237E  120A  118A  	fcall	__esp8266_waitResponse
  1715  073F  3A07               	xorlw	7
  1716  0740  1D03               	skipz
  1717  0741  2FC6               	goto	l2305
  1718                           
  1719                           ;main887.c: 85: {
  1720                           ;main887.c: 86: for(a=0; a<16; a++)
  1721  0742  1283               	bcf	3,5	;RP0=0, select bank0
  1722  0743  1303               	bcf	3,6	;RP1=0, select bank0
  1723  0744  01EB               	clrf	main@a
  1724  0745  01EC               	clrf	main@a+1
  1725  0746  086C               	movf	main@a+1,w
  1726  0747  3A80               	xorlw	128
  1727  0748  00FF               	movwf	127
  1728  0749  3080               	movlw	128
  1729  074A  027F               	subwf	127,w
  1730  074B  1D03               	skipz
  1731  074C  2F4F               	goto	u2095
  1732  074D  3010               	movlw	16
  1733  074E  026B               	subwf	main@a,w
  1734  074F                     u2095:	
  1735  074F  1803               	btfsc	3,0
  1736  0750  2F6D               	goto	l2289
  1737  0751                     l2283:	
  1738                           
  1739                           ;main887.c: 87: {
  1740                           ;main887.c: 88: revN[a]='\0';
  1741  0751  1283               	bcf	3,5	;RP0=0, select bank0
  1742  0752  1303               	bcf	3,6	;RP1=0, select bank0
  1743  0753  086B               	movf	main@a,w
  1744  0754  3E47               	addlw	(low (main@revN| 0))& (0+255)
  1745  0755  0084               	movwf	4
  1746  0756  1383               	bcf	3,7	;select IRP bank0
  1747  0757  0180               	clrf	0
  1748                           
  1749                           ;main887.c: 89: revC[a]='\0';
  1750  0758  086B               	movf	main@a,w
  1751  0759  3E57               	addlw	(low (main@revC| 0))& (0+255)
  1752  075A  0084               	movwf	4
  1753  075B  0180               	clrf	0
  1754  075C  3001               	movlw	1
  1755  075D  07EB               	addwf	main@a,f
  1756  075E  1803               	skipnc
  1757  075F  0AEC               	incf	main@a+1,f
  1758  0760  3000               	movlw	0
  1759  0761  07EC               	addwf	main@a+1,f
  1760  0762  086C               	movf	main@a+1,w
  1761  0763  3A80               	xorlw	128
  1762  0764  00FF               	movwf	127
  1763  0765  3080               	movlw	128
  1764  0766  027F               	subwf	127,w
  1765  0767  1D03               	skipz
  1766  0768  2F6B               	goto	u2105
  1767  0769  3010               	movlw	16
  1768  076A  026B               	subwf	main@a,w
  1769  076B                     u2105:	
  1770  076B  1C03               	skipc
  1771  076C  2F51               	goto	l2283
  1772  076D                     l2289:	
  1773                           
  1774                           ;main887.c: 90: }
  1775                           ;main887.c: 91: Lcd_Clear();
  1776  076D  120A  158A  2642  120A  118A  	fcall	_Lcd_Clear
  1777  0772                     l258:	
  1778                           ;main887.c: 92: do{
  1779                           
  1780                           
  1781                           ;main887.c: 93: Lcd_Set_Cursor(1,1);
  1782  0772  01F4               	clrf	Lcd_Set_Cursor@b
  1783  0773  0AF4               	incf	Lcd_Set_Cursor@b,f
  1784  0774  3001               	movlw	1
  1785  0775  120A  118A  20E7  120A  118A  	fcall	_Lcd_Set_Cursor
  1786                           
  1787                           ;main887.c: 94: Lcd_Print_String("1. Nhap Ten");
  1788  077A  301F               	movlw	low (STR_60| (0+32768))
  1789  077B  00F5               	movwf	Lcd_Print_String@a
  1790  077C  3089               	movlw	high (STR_60| (0+32768))
  1791  077D  00F6               	movwf	Lcd_Print_String@a+1
  1792  077E  120A  118A  20AA  120A  118A  	fcall	_Lcd_Print_String
  1793                           
  1794                           ;main887.c: 95: }while(!esp8266_send("1. Ten\r\n"));
  1795  0783  309E               	movlw	low (STR_61| (0+32768))
  1796  0784  1283               	bcf	3,5	;RP0=0, select bank0
  1797  0785  1303               	bcf	3,6	;RP1=0, select bank0
  1798  0786  00BC               	movwf	esp8266_send@data
  1799  0787  3089               	movlw	high (STR_61| (0+32768))
  1800  0788  00BD               	movwf	esp8266_send@data+1
  1801  0789  120A  118A  21F4  120A  118A  	fcall	_esp8266_send
  1802  078E  1C03               	btfss	3,0
  1803  078F  2F72               	goto	l258
  1804                           
  1805                           ;main887.c: 96: revClient(revN, _revSizeN);
  1806  0790  1283               	bcf	3,5	;RP0=0, select bank0
  1807  0791  1303               	bcf	3,6	;RP1=0, select bank0
  1808  0792  0868               	movf	main@_revSizeN+1,w
  1809  0793  00A1               	movwf	revClient@lenght+1
  1810  0794  0867               	movf	main@_revSizeN,w
  1811  0795  00A0               	movwf	revClient@lenght
  1812  0796  3047               	movlw	(low (main@revN| 0))& (0+255)
  1813  0797  120A  118A  22EE  120A  118A  	fcall	_revClient
  1814  079C                     l2297:	
  1815                           ;main887.c: 97: do{
  1816                           
  1817                           
  1818                           ;main887.c: 98: Lcd_Set_Cursor(2,1);
  1819  079C  01F4               	clrf	Lcd_Set_Cursor@b
  1820  079D  0AF4               	incf	Lcd_Set_Cursor@b,f
  1821  079E  3002               	movlw	2
  1822  079F  120A  118A  20E7  120A  118A  	fcall	_Lcd_Set_Cursor
  1823                           
  1824                           ;main887.c: 99: Lcd_Print_String("2. Nhap Gia");
  1825  07A4  3013               	movlw	low (STR_62| (0+32768))
  1826  07A5  00F5               	movwf	Lcd_Print_String@a
  1827  07A6  3089               	movlw	high (STR_62| (0+32768))
  1828  07A7  00F6               	movwf	Lcd_Print_String@a+1
  1829  07A8  120A  118A  20AA  120A  118A  	fcall	_Lcd_Print_String
  1830                           
  1831                           ;main887.c: 100: }while(!esp8266_send("2. Gia\r\n"));
  1832  07AD  3095               	movlw	low (STR_63| (0+32768))
  1833  07AE  1283               	bcf	3,5	;RP0=0, select bank0
  1834  07AF  1303               	bcf	3,6	;RP1=0, select bank0
  1835  07B0  00BC               	movwf	esp8266_send@data
  1836  07B1  3089               	movlw	high (STR_63| (0+32768))
  1837  07B2  00BD               	movwf	esp8266_send@data+1
  1838  07B3  120A  118A  21F4  120A  118A  	fcall	_esp8266_send
  1839  07B8  1C03               	btfss	3,0
  1840  07B9  2F9C               	goto	l2297
  1841                           
  1842                           ;main887.c: 101: revClient(revC, _revSizeC);
  1843  07BA  1283               	bcf	3,5	;RP0=0, select bank0
  1844  07BB  1303               	bcf	3,6	;RP1=0, select bank0
  1845  07BC  086A               	movf	main@_revSizeC+1,w
  1846  07BD  00A1               	movwf	revClient@lenght+1
  1847  07BE  0869               	movf	main@_revSizeC,w
  1848  07BF  00A0               	movwf	revClient@lenght
  1849  07C0  3057               	movlw	(low (main@revC| 0))& (0+255)
  1850  07C1  120A  118A  22EE  120A  118A  	fcall	_revClient
  1851  07C6                     l2305:	
  1852                           
  1853                           ;main887.c: 102: }
  1854                           ;main887.c: 103: Lcd_Clear();
  1855  07C6  120A  158A  2642  120A  118A  	fcall	_Lcd_Clear
  1856                           
  1857                           ;main887.c: 104: Lcd_Set_Cursor(1,1);
  1858  07CB  01F4               	clrf	Lcd_Set_Cursor@b
  1859  07CC  0AF4               	incf	Lcd_Set_Cursor@b,f
  1860  07CD  3001               	movlw	1
  1861  07CE  120A  118A  20E7  120A  118A  	fcall	_Lcd_Set_Cursor
  1862                           
  1863                           ;main887.c: 105: Lcd_Print_String(revN);
  1864  07D3  3047               	movlw	(low (main@revN| 0))& (0+255)
  1865  07D4  00F5               	movwf	Lcd_Print_String@a
  1866  07D5  3000               	movlw	0
  1867  07D6  00F6               	movwf	Lcd_Print_String@a+1
  1868  07D7  120A  118A  20AA  120A  118A  	fcall	_Lcd_Print_String
  1869                           
  1870                           ;main887.c: 106: Lcd_Set_Cursor(2,1);
  1871  07DC  01F4               	clrf	Lcd_Set_Cursor@b
  1872  07DD  0AF4               	incf	Lcd_Set_Cursor@b,f
  1873  07DE  3002               	movlw	2
  1874  07DF  120A  118A  20E7  120A  118A  	fcall	_Lcd_Set_Cursor
  1875                           
  1876                           ;main887.c: 107: Lcd_Print_String(revC);
  1877  07E4  3057               	movlw	(low (main@revC| 0))& (0+255)
  1878  07E5  00F5               	movwf	Lcd_Print_String@a
  1879  07E6  3000               	movlw	0
  1880  07E7  2F34               	goto	L1
  1881  07E8                     __end_of_main:	
  1882                           
  1883                           	psect	text1
  1884  02EE                     __ptext1:	
  1885 ;; *************** function _revClient *****************
  1886 ;; Defined at:
  1887 ;;		line 419 in file "ESP_lib.h"
  1888 ;; Parameters:    Size  Location     Type
  1889 ;;  _string_Rev     1    wreg     PTR unsigned char 
  1890 ;;		 -> main@revC(16), main@revN(16), 
  1891 ;;  lenght          2    0[BANK0 ] int 
  1892 ;; Auto vars:     Size  Location     Type
  1893 ;;  _string_Rev     1    9[BANK0 ] PTR unsigned char 
  1894 ;;		 -> main@revC(16), main@revN(16), 
  1895 ;;  _lenght         4    5[BANK0 ] unsigned char [4]
  1896 ;;  _temp           2   14[BANK0 ] unsigned int 
  1897 ;;  _temp2          2   12[BANK0 ] unsigned int 
  1898 ;;  _truesize       2   10[BANK0 ] unsigned int 
  1899 ;;  _lenght2        1    4[BANK0 ] unsigned char 
  1900 ;; Return value:  Size  Location     Type
  1901 ;;                  1    wreg      void 
  1902 ;; Registers used:
  1903 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1904 ;; Tracked objects:
  1905 ;;		On entry : 0/0
  1906 ;;		On exit  : 0/0
  1907 ;;		Unchanged: 0/0
  1908 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1909 ;;      Params:         0       2       0       0       0
  1910 ;;      Locals:         0      12       0       0       0
  1911 ;;      Temps:          0       2       0       0       0
  1912 ;;      Totals:         0      16       0       0       0
  1913 ;;Total ram usage:       16 bytes
  1914 ;; Hardware stack levels used:    1
  1915 ;; Hardware stack levels required when called:    2
  1916 ;; This function calls:
  1917 ;;		__esp8266_getch
  1918 ;;		__esp8266_waitFor
  1919 ;;		_atoi
  1920 ;; This function is called by:
  1921 ;;		_main
  1922 ;; This function uses a non-reentrant model
  1923 ;;
  1924                           
  1925                           
  1926                           ;psect for function _revClient
  1927  02EE                     _revClient:	
  1928                           
  1929                           ;incstack = 0
  1930                           ; Regs used in _revClient: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1931                           ;revClient@_string_Rev stored from wreg
  1932  02EE  1283               	bcf	3,5	;RP0=0, select bank0
  1933  02EF  1303               	bcf	3,6	;RP1=0, select bank0
  1934  02F0  00A9               	movwf	revClient@_string_Rev
  1935                           
  1936                           ;ESP_lib.h: 421: _esp8266_waitFor("+IPD,0,");
  1937  02F1  30B8               	movlw	low (STR_38| (0+32768))
  1938  02F2  00F0               	movwf	__esp8266_waitFor@string
  1939  02F3  3089               	movlw	high (STR_38| (0+32768))
  1940  02F4  00F1               	movwf	__esp8266_waitFor@string+1
  1941  02F5  120A  118A  206E  120A  118A  	fcall	__esp8266_waitFor
  1942                           
  1943                           ;ESP_lib.h: 422: unsigned int _temp = 0;
  1944  02FA  1283               	bcf	3,5	;RP0=0, select bank0
  1945  02FB  1303               	bcf	3,6	;RP1=0, select bank0
  1946  02FC  01AE               	clrf	revClient@_temp
  1947  02FD  01AF               	clrf	revClient@_temp+1
  1948                           
  1949                           ;ESP_lib.h: 423: unsigned int _temp2 = 0;
  1950  02FE  01AC               	clrf	revClient@_temp2
  1951  02FF  01AD               	clrf	revClient@_temp2+1
  1952                           
  1953                           ;ESP_lib.h: 424: unsigned int _truesize = 0;
  1954  0300  01AA               	clrf	revClient@_truesize
  1955  0301  01AB               	clrf	revClient@_truesize+1
  1956                           
  1957                           ;ESP_lib.h: 425: char _lenght[]={'\0','\0','\0','\0'};
  1958  0302  1683               	bsf	3,5	;RP0=1, select bank1
  1959  0303  1303               	bcf	3,6	;RP1=0, select bank1
  1960  0304  0836               	movf	(revClient@F2055+3)^(0+128),w
  1961  0305  1283               	bcf	3,5	;RP0=0, select bank0
  1962  0306  1303               	bcf	3,6	;RP1=0, select bank0
  1963  0307  00A8               	movwf	revClient@_lenght+3
  1964  0308  1683               	bsf	3,5	;RP0=1, select bank1
  1965  0309  1303               	bcf	3,6	;RP1=0, select bank1
  1966  030A  0835               	movf	(revClient@F2055+2)^(0+128),w
  1967  030B  1283               	bcf	3,5	;RP0=0, select bank0
  1968  030C  1303               	bcf	3,6	;RP1=0, select bank0
  1969  030D  00A7               	movwf	revClient@_lenght+2
  1970  030E  1683               	bsf	3,5	;RP0=1, select bank1
  1971  030F  1303               	bcf	3,6	;RP1=0, select bank1
  1972  0310  0834               	movf	(revClient@F2055+1)^(0+128),w
  1973  0311  1283               	bcf	3,5	;RP0=0, select bank0
  1974  0312  1303               	bcf	3,6	;RP1=0, select bank0
  1975  0313  00A6               	movwf	revClient@_lenght+1
  1976  0314  1683               	bsf	3,5	;RP0=1, select bank1
  1977  0315  1303               	bcf	3,6	;RP1=0, select bank1
  1978  0316  0833               	movf	revClient@F2055^(0+128),w
  1979  0317  1283               	bcf	3,5	;RP0=0, select bank0
  1980  0318  1303               	bcf	3,6	;RP1=0, select bank0
  1981  0319  00A5               	movwf	revClient@_lenght
  1982                           
  1983                           ;ESP_lib.h: 426: char _lenght2 = '\0';
  1984  031A  01A4               	clrf	revClient@_lenght2
  1985  031B                     l2031:	
  1986                           ;ESP_lib.h: 427: do{
  1987                           
  1988                           
  1989                           ;ESP_lib.h: 428: _lenght[_temp]=_esp8266_getch();
  1990  031B  120A  158A  2638  120A  118A  	fcall	__esp8266_getch
  1991  0320  1283               	bcf	3,5	;RP0=0, select bank0
  1992  0321  1303               	bcf	3,6	;RP1=0, select bank0
  1993  0322  00A2               	movwf	??_revClient
  1994  0323  082E               	movf	revClient@_temp,w
  1995  0324  3E25               	addlw	(low (revClient@_lenght| 0))& (0+255)
  1996  0325  0084               	movwf	4
  1997  0326  0822               	movf	??_revClient,w
  1998  0327  1383               	bcf	3,7	;select IRP bank0
  1999  0328  0080               	movwf	0
  2000                           
  2001                           ;ESP_lib.h: 429: _lenght2 = _lenght[_temp];
  2002  0329  082E               	movf	revClient@_temp,w
  2003  032A  3E25               	addlw	(low (revClient@_lenght| 0))& (0+255)
  2004  032B  0084               	movwf	4
  2005  032C  0800               	movf	0,w
  2006  032D  00A2               	movwf	??_revClient
  2007  032E  0822               	movf	??_revClient,w
  2008  032F  00A4               	movwf	revClient@_lenght2
  2009                           
  2010                           ;ESP_lib.h: 430: if(_lenght[_temp]==':')
  2011  0330  082E               	movf	revClient@_temp,w
  2012  0331  3E25               	addlw	(low (revClient@_lenght| 0))& (0+255)
  2013  0332  0084               	movwf	4
  2014  0333  303A               	movlw	58
  2015  0334  0600               	xorwf	0,w
  2016  0335  1D03               	btfss	3,2
  2017  0336  2B3B               	goto	l2039
  2018                           
  2019                           ;ESP_lib.h: 431: _lenght[_temp] = '\0';
  2020  0337  082E               	movf	revClient@_temp,w
  2021  0338  3E25               	addlw	(low (revClient@_lenght| 0))& (0+255)
  2022  0339  0084               	movwf	4
  2023  033A  0180               	clrf	0
  2024  033B                     l2039:	
  2025                           
  2026                           ;ESP_lib.h: 432: _temp++;
  2027  033B  3001               	movlw	1
  2028  033C  07AE               	addwf	revClient@_temp,f
  2029  033D  1803               	skipnc
  2030  033E  0AAF               	incf	revClient@_temp+1,f
  2031  033F  3000               	movlw	0
  2032  0340  07AF               	addwf	revClient@_temp+1,f
  2033                           
  2034                           ;ESP_lib.h: 433: }while(_lenght2 != ':');
  2035  0341  303A               	movlw	58
  2036  0342  0624               	xorwf	revClient@_lenght2,w
  2037  0343  1D03               	btfss	3,2
  2038  0344  2B1B               	goto	l2031
  2039                           
  2040                           ;ESP_lib.h: 434: _truesize = atoi(_lenght);
  2041  0345  3025               	movlw	(low (revClient@_lenght| 0))& (0+255)
  2042  0346  120A  118A  218B  120A  118A  	fcall	_atoi
  2043  034B  0877               	movf	?_atoi+1,w
  2044  034C  1283               	bcf	3,5	;RP0=0, select bank0
  2045  034D  1303               	bcf	3,6	;RP1=0, select bank0
  2046  034E  00AB               	movwf	revClient@_truesize+1
  2047  034F  0876               	movf	?_atoi,w
  2048  0350  00AA               	movwf	revClient@_truesize
  2049                           
  2050                           ;ESP_lib.h: 435: lenght = _truesize;
  2051  0351  082B               	movf	revClient@_truesize+1,w
  2052  0352  00A1               	movwf	revClient@lenght+1
  2053  0353  082A               	movf	revClient@_truesize,w
  2054  0354  00A0               	movwf	revClient@lenght
  2055                           
  2056                           ;ESP_lib.h: 436: for(_temp2 = 0; _temp2 < _truesize-2 ; _temp2++)
  2057  0355  01AC               	clrf	revClient@_temp2
  2058  0356  01AD               	clrf	revClient@_temp2+1
  2059  0357                     l2053:	
  2060  0357  082A               	movf	revClient@_truesize,w
  2061  0358  3EFE               	addlw	254
  2062  0359  00A2               	movwf	??_revClient
  2063  035A  082B               	movf	revClient@_truesize+1,w
  2064  035B  1803               	skipnc
  2065  035C  3E01               	addlw	1
  2066  035D  3EFF               	addlw	255
  2067  035E  00A3               	movwf	??_revClient+1
  2068  035F  0823               	movf	??_revClient+1,w
  2069  0360  022D               	subwf	revClient@_temp2+1,w
  2070  0361  1D03               	skipz
  2071  0362  2B65               	goto	u1885
  2072  0363  0822               	movf	??_revClient,w
  2073  0364  022C               	subwf	revClient@_temp2,w
  2074  0365                     u1885:	
  2075  0365  1803               	btfsc	3,0
  2076  0366  0008               	return
  2077                           
  2078                           ;ESP_lib.h: 437: {
  2079                           ;ESP_lib.h: 438: _string_Rev[_temp2] = _esp8266_getch();
  2080  0367  120A  158A  2638  120A  118A  	fcall	__esp8266_getch
  2081  036C  1283               	bcf	3,5	;RP0=0, select bank0
  2082  036D  1303               	bcf	3,6	;RP1=0, select bank0
  2083  036E  00A2               	movwf	??_revClient
  2084  036F  082C               	movf	revClient@_temp2,w
  2085  0370  0729               	addwf	revClient@_string_Rev,w
  2086  0371  00A3               	movwf	??_revClient+1
  2087  0372  0823               	movf	??_revClient+1,w
  2088  0373  0084               	movwf	4
  2089  0374  0822               	movf	??_revClient,w
  2090  0375  1383               	bcf	3,7	;select IRP bank0
  2091  0376  0080               	movwf	0
  2092  0377  3001               	movlw	1
  2093  0378  07AC               	addwf	revClient@_temp2,f
  2094  0379  1803               	skipnc
  2095  037A  0AAD               	incf	revClient@_temp2+1,f
  2096  037B  3000               	movlw	0
  2097  037C  07AD               	addwf	revClient@_temp2+1,f
  2098  037D  2B57               	goto	l2053
  2099  037E                     __end_of_revClient:	
  2100                           
  2101                           	psect	text2
  2102  018B                     __ptext2:	
  2103 ;; *************** function _atoi *****************
  2104 ;; Defined at:
  2105 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\atoi.c"
  2106 ;; Parameters:    Size  Location     Type
  2107 ;;  s               1    wreg     PTR const unsigned char 
  2108 ;;		 -> revClient@_lenght(4), 
  2109 ;; Auto vars:     Size  Location     Type
  2110 ;;  s               1   13[COMMON] PTR const unsigned char 
  2111 ;;		 -> revClient@_lenght(4), 
  2112 ;;  a               2   11[COMMON] int 
  2113 ;;  sign            1   10[COMMON] unsigned char 
  2114 ;; Return value:  Size  Location     Type
  2115 ;;                  2    6[COMMON] int 
  2116 ;; Registers used:
  2117 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2118 ;; Tracked objects:
  2119 ;;		On entry : 0/0
  2120 ;;		On exit  : 0/0
  2121 ;;		Unchanged: 0/0
  2122 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2123 ;;      Params:         2       0       0       0       0
  2124 ;;      Locals:         4       0       0       0       0
  2125 ;;      Temps:          2       0       0       0       0
  2126 ;;      Totals:         8       0       0       0       0
  2127 ;;Total ram usage:        8 bytes
  2128 ;; Hardware stack levels used:    1
  2129 ;; Hardware stack levels required when called:    1
  2130 ;; This function calls:
  2131 ;;		___wmul
  2132 ;;		_isdigit
  2133 ;; This function is called by:
  2134 ;;		_revClient
  2135 ;; This function uses a non-reentrant model
  2136 ;;
  2137                           
  2138                           
  2139                           ;psect for function _atoi
  2140  018B                     _atoi:	
  2141                           
  2142                           ;incstack = 0
  2143                           ; Regs used in _atoi: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2144                           ;atoi@s stored from wreg
  2145  018B  00FD               	movwf	atoi@s
  2146  018C                     l1833:	
  2147  018C  087D               	movf	atoi@s,w
  2148  018D  0084               	movwf	4
  2149  018E  3020               	movlw	32
  2150  018F  1383               	bcf	3,7	;select IRP bank0
  2151  0190  0600               	xorwf	0,w
  2152  0191  1D03               	btfss	3,2
  2153  0192  2998               	goto	l1835
  2154  0193                     l1831:	
  2155  0193  3001               	movlw	1
  2156  0194  00F8               	movwf	??_atoi
  2157  0195  0878               	movf	??_atoi,w
  2158  0196  07FD               	addwf	atoi@s,f
  2159  0197  298C               	goto	l1833
  2160  0198                     l1835:	
  2161  0198  087D               	movf	atoi@s,w
  2162  0199  0084               	movwf	4
  2163  019A  3009               	movlw	9
  2164  019B  0600               	xorwf	0,w
  2165  019C  1903               	btfsc	3,2
  2166  019D  2993               	goto	l1831
  2167  019E  01FB               	clrf	atoi@a
  2168  019F  01FC               	clrf	atoi@a+1
  2169  01A0  01FA               	clrf	atoi@sign
  2170  01A1  087D               	movf	atoi@s,w
  2171  01A2  0084               	movwf	4
  2172  01A3  302D               	movlw	45
  2173  01A4  0600               	xorwf	0,w
  2174  01A5  1D03               	btfss	3,2
  2175  01A6  29AC               	goto	l1843
  2176  01A7  3001               	movlw	1
  2177  01A8  00F8               	movwf	??_atoi
  2178  01A9  0878               	movf	??_atoi,w
  2179  01AA  07FA               	addwf	atoi@sign,f
  2180  01AB  29B2               	goto	l1849
  2181  01AC                     l1843:	
  2182  01AC  087D               	movf	atoi@s,w
  2183  01AD  0084               	movwf	4
  2184  01AE  302B               	movlw	43
  2185  01AF  0600               	xorwf	0,w
  2186  01B0  1D03               	btfss	3,2
  2187  01B1  29B6               	goto	l1851
  2188  01B2                     l1849:	
  2189  01B2  3001               	movlw	1
  2190  01B3  00F8               	movwf	??_atoi
  2191  01B4  0878               	movf	??_atoi,w
  2192  01B5  07FD               	addwf	atoi@s,f
  2193  01B6                     l1851:	
  2194  01B6  087D               	movf	atoi@s,w
  2195  01B7  0084               	movwf	4
  2196  01B8  0800               	movf	0,w
  2197  01B9  120A  158A  2667  120A  118A  	fcall	_isdigit
  2198  01BE  1C03               	btfss	3,0
  2199  01BF  29E0               	goto	l1853
  2200  01C0  087C               	movf	atoi@a+1,w
  2201  01C1  00F1               	movwf	___wmul@multiplier+1
  2202  01C2  087B               	movf	atoi@a,w
  2203  01C3  00F0               	movwf	___wmul@multiplier
  2204  01C4  300A               	movlw	10
  2205  01C5  00F2               	movwf	___wmul@multiplicand
  2206  01C6  3000               	movlw	0
  2207  01C7  00F3               	movwf	___wmul@multiplicand+1
  2208  01C8  120A  158A  26FD  120A  118A  	fcall	___wmul
  2209  01CD  087D               	movf	atoi@s,w
  2210  01CE  0084               	movwf	4
  2211  01CF  1383               	bcf	3,7	;select IRP bank0
  2212  01D0  0800               	movf	0,w
  2213  01D1  0770               	addwf	?___wmul,w
  2214  01D2  00F8               	movwf	??_atoi
  2215  01D3  0871               	movf	?___wmul+1,w
  2216  01D4  1803               	skipnc
  2217  01D5  0A71               	incf	?___wmul+1,w
  2218  01D6  00F9               	movwf	??_atoi+1
  2219  01D7  0878               	movf	??_atoi,w
  2220  01D8  3ED0               	addlw	208
  2221  01D9  00FB               	movwf	atoi@a
  2222  01DA  0879               	movf	??_atoi+1,w
  2223  01DB  1803               	skipnc
  2224  01DC  3E01               	addlw	1
  2225  01DD  3EFF               	addlw	255
  2226  01DE  00FC               	movwf	atoi@a+1
  2227  01DF  29B2               	goto	l1849
  2228  01E0                     l1853:	
  2229  01E0  087A               	movf	atoi@sign,w
  2230  01E1  1903               	btfsc	3,2
  2231  01E2  29EF               	goto	l1859
  2232  01E3  097B               	comf	atoi@a,w
  2233  01E4  00F8               	movwf	??_atoi
  2234  01E5  097C               	comf	atoi@a+1,w
  2235  01E6  00F9               	movwf	??_atoi+1
  2236  01E7  0AF8               	incf	??_atoi,f
  2237  01E8  1903               	skipnz
  2238  01E9  0AF9               	incf	??_atoi+1,f
  2239  01EA  0878               	movf	??_atoi,w
  2240  01EB  00F6               	movwf	?_atoi
  2241  01EC  0879               	movf	??_atoi+1,w
  2242  01ED  00F7               	movwf	?_atoi+1
  2243  01EE  0008               	return
  2244  01EF                     l1859:	
  2245  01EF  087C               	movf	atoi@a+1,w
  2246  01F0  00F7               	movwf	?_atoi+1
  2247  01F1  087B               	movf	atoi@a,w
  2248  01F2  00F6               	movwf	?_atoi
  2249  01F3  0008               	return
  2250  01F4                     __end_of_atoi:	
  2251                           
  2252                           	psect	text3
  2253  0E67                     __ptext3:	
  2254 ;; *************** function _isdigit *****************
  2255 ;; Defined at:
  2256 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\isdigit.c"
  2257 ;; Parameters:    Size  Location     Type
  2258 ;;  c               1    wreg     unsigned char 
  2259 ;; Auto vars:     Size  Location     Type
  2260 ;;  c               1    1[COMMON] unsigned char 
  2261 ;; Return value:  Size  Location     Type
  2262 ;;		None               void
  2263 ;; Registers used:
  2264 ;;		wreg, status,2, status,0
  2265 ;; Tracked objects:
  2266 ;;		On entry : 0/0
  2267 ;;		On exit  : 0/0
  2268 ;;		Unchanged: 0/0
  2269 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2270 ;;      Params:         0       0       0       0       0
  2271 ;;      Locals:         2       0       0       0       0
  2272 ;;      Temps:          0       0       0       0       0
  2273 ;;      Totals:         2       0       0       0       0
  2274 ;;Total ram usage:        2 bytes
  2275 ;; Hardware stack levels used:    1
  2276 ;; This function calls:
  2277 ;;		Nothing
  2278 ;; This function is called by:
  2279 ;;		_atoi
  2280 ;; This function uses a non-reentrant model
  2281 ;;
  2282                           
  2283                           
  2284                           ;psect for function _isdigit
  2285  0E67                     _isdigit:	
  2286                           
  2287                           ;incstack = 0
  2288                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  2289                           ;isdigit@c stored from wreg
  2290  0E67  00F1               	movwf	isdigit@c
  2291  0E68  01F0               	clrf	_isdigit$480
  2292  0E69  303A               	movlw	58
  2293  0E6A  0271               	subwf	isdigit@c,w
  2294  0E6B  1803               	skipnc
  2295  0E6C  2E73               	goto	l1623
  2296  0E6D  3030               	movlw	48
  2297  0E6E  0271               	subwf	isdigit@c,w
  2298  0E6F  1C03               	skipc
  2299  0E70  2E73               	goto	l1623
  2300  0E71  01F0               	clrf	_isdigit$480
  2301  0E72  0AF0               	incf	_isdigit$480,f
  2302  0E73                     l1623:	
  2303  0E73  0C70               	rrf	_isdigit$480,w
  2304  0E74  0008               	return
  2305  0E75                     __end_of_isdigit:	
  2306                           
  2307                           	psect	text4
  2308  0EFD                     __ptext4:	
  2309 ;; *************** function ___wmul *****************
  2310 ;; Defined at:
  2311 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul16.c"
  2312 ;; Parameters:    Size  Location     Type
  2313 ;;  multiplier      2    0[COMMON] unsigned int 
  2314 ;;  multiplicand    2    2[COMMON] unsigned int 
  2315 ;; Auto vars:     Size  Location     Type
  2316 ;;  product         2    4[COMMON] unsigned int 
  2317 ;; Return value:  Size  Location     Type
  2318 ;;                  2    0[COMMON] unsigned int 
  2319 ;; Registers used:
  2320 ;;		wreg, status,2, status,0
  2321 ;; Tracked objects:
  2322 ;;		On entry : 0/0
  2323 ;;		On exit  : 0/0
  2324 ;;		Unchanged: 0/0
  2325 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2326 ;;      Params:         4       0       0       0       0
  2327 ;;      Locals:         2       0       0       0       0
  2328 ;;      Temps:          0       0       0       0       0
  2329 ;;      Totals:         6       0       0       0       0
  2330 ;;Total ram usage:        6 bytes
  2331 ;; Hardware stack levels used:    1
  2332 ;; This function calls:
  2333 ;;		Nothing
  2334 ;; This function is called by:
  2335 ;;		_atoi
  2336 ;;		_esp8266_receive
  2337 ;; This function uses a non-reentrant model
  2338 ;;
  2339                           
  2340                           
  2341                           ;psect for function ___wmul
  2342  0EFD                     ___wmul:	
  2343                           
  2344                           ;incstack = 0
  2345                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  2346  0EFD  01F4               	clrf	___wmul@product
  2347  0EFE  01F5               	clrf	___wmul@product+1
  2348  0EFF                     l1603:	
  2349  0EFF  1C70               	btfss	___wmul@multiplier,0
  2350  0F00  2F07               	goto	l373
  2351  0F01  0872               	movf	___wmul@multiplicand,w
  2352  0F02  07F4               	addwf	___wmul@product,f
  2353  0F03  1803               	skipnc
  2354  0F04  0AF5               	incf	___wmul@product+1,f
  2355  0F05  0873               	movf	___wmul@multiplicand+1,w
  2356  0F06  07F5               	addwf	___wmul@product+1,f
  2357  0F07                     l373:	
  2358  0F07  3001               	movlw	1
  2359  0F08                     u1155:	
  2360  0F08  1003               	clrc
  2361  0F09  0DF2               	rlf	___wmul@multiplicand,f
  2362  0F0A  0DF3               	rlf	___wmul@multiplicand+1,f
  2363  0F0B  3EFF               	addlw	-1
  2364  0F0C  1D03               	skipz
  2365  0F0D  2F08               	goto	u1155
  2366  0F0E  3001               	movlw	1
  2367  0F0F                     u1165:	
  2368  0F0F  1003               	clrc
  2369  0F10  0CF1               	rrf	___wmul@multiplier+1,f
  2370  0F11  0CF0               	rrf	___wmul@multiplier,f
  2371  0F12  3EFF               	addlw	-1
  2372  0F13  1D03               	skipz
  2373  0F14  2F0F               	goto	u1165
  2374  0F15  0870               	movf	___wmul@multiplier,w
  2375  0F16  0471               	iorwf	___wmul@multiplier+1,w
  2376  0F17  1D03               	btfss	3,2
  2377  0F18  2EFF               	goto	l1603
  2378  0F19  0875               	movf	___wmul@product+1,w
  2379  0F1A  00F1               	movwf	?___wmul+1
  2380  0F1B  0874               	movf	___wmul@product,w
  2381  0F1C  00F0               	movwf	?___wmul
  2382  0F1D  0008               	return
  2383  0F1E                     __end_of___wmul:	
  2384                           
  2385                           	psect	text5
  2386  006E                     __ptext5:	
  2387 ;; *************** function __esp8266_waitFor *****************
  2388 ;; Defined at:
  2389 ;;		line 464 in file "ESP_lib.h"
  2390 ;; Parameters:    Size  Location     Type
  2391 ;;  string          2    0[COMMON] PTR unsigned char 
  2392 ;;		 -> STR_38(8), STR_37(3), STR_36(5), STR_35(6), 
  2393 ;;		 -> STR_24(3), STR_22(3), STR_20(3), STR_13(3), 
  2394 ;; Auto vars:     Size  Location     Type
  2395 ;;  counter         2    3[COMMON] unsigned int 
  2396 ;;  temp            1    6[COMMON] unsigned char 
  2397 ;;  received        1    5[COMMON] unsigned char 
  2398 ;; Return value:  Size  Location     Type
  2399 ;;                  2    0[COMMON] unsigned int 
  2400 ;; Registers used:
  2401 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2402 ;; Tracked objects:
  2403 ;;		On entry : 0/0
  2404 ;;		On exit  : 0/0
  2405 ;;		Unchanged: 0/0
  2406 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2407 ;;      Params:         2       0       0       0       0
  2408 ;;      Locals:         4       0       0       0       0
  2409 ;;      Temps:          1       0       0       0       0
  2410 ;;      Totals:         7       0       0       0       0
  2411 ;;Total ram usage:        7 bytes
  2412 ;; Hardware stack levels used:    1
  2413 ;; Hardware stack levels required when called:    1
  2414 ;; This function calls:
  2415 ;;		__esp8266_getch
  2416 ;; This function is called by:
  2417 ;;		_revClient
  2418 ;;		_esp8266_echoCmds
  2419 ;;		_esp8266_close
  2420 ;;		_esp8266_disconnect
  2421 ;;		_esp8266_ip
  2422 ;;		_esp8266_receive
  2423 ;; This function uses a non-reentrant model
  2424 ;;
  2425                           
  2426                           
  2427                           ;psect for function __esp8266_waitFor
  2428  006E                     __esp8266_waitFor:	
  2429                           
  2430                           ;ESP_lib.h: 465: unsigned char temp = 0;
  2431                           
  2432                           ;incstack = 0
  2433                           ; Regs used in __esp8266_waitFor: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2434  006E  01F6               	clrf	__esp8266_waitFor@temp
  2435                           
  2436                           ;ESP_lib.h: 466: unsigned char received;
  2437                           ;ESP_lib.h: 467: uint16_t counter = 0;
  2438  006F  01F3               	clrf	__esp8266_waitFor@counter
  2439  0070  01F4               	clrf	__esp8266_waitFor@counter+1
  2440  0071                     l1757:	
  2441                           ;ESP_lib.h: 468: do {
  2442                           
  2443                           
  2444                           ;ESP_lib.h: 469: received = _esp8266_getch();
  2445  0071  120A  158A  2638  120A  118A  	fcall	__esp8266_getch
  2446  0076  00F2               	movwf	??__esp8266_waitFor
  2447  0077  0872               	movf	??__esp8266_waitFor,w
  2448  0078  00F5               	movwf	__esp8266_waitFor@received
  2449                           
  2450                           ;ESP_lib.h: 470: counter++;
  2451  0079  3001               	movlw	1
  2452  007A  07F3               	addwf	__esp8266_waitFor@counter,f
  2453  007B  1803               	skipnc
  2454  007C  0AF4               	incf	__esp8266_waitFor@counter+1,f
  2455  007D  3000               	movlw	0
  2456  007E  07F4               	addwf	__esp8266_waitFor@counter+1,f
  2457                           
  2458                           ;ESP_lib.h: 471: if (received == string[temp]) {
  2459  007F  0876               	movf	__esp8266_waitFor@temp,w
  2460  0080  0770               	addwf	__esp8266_waitFor@string,w
  2461  0081  0084               	movwf	4
  2462  0082  0871               	movf	__esp8266_waitFor@string+1,w
  2463  0083  1803               	skipnc
  2464  0084  0A71               	incf	__esp8266_waitFor@string+1,w
  2465  0085  1283               	bcf	3,5	;RP0=0, select bank0
  2466  0086  1303               	bcf	3,6	;RP1=0, select bank0
  2467  0087  00FF               	movwf	127
  2468  0088  120A  158A  2000  120A  118A  	fcall	stringtab
  2469  008D  0675               	xorwf	__esp8266_waitFor@received,w
  2470  008E  1D03               	skipz
  2471  008F  2895               	goto	l1765
  2472                           
  2473                           ;ESP_lib.h: 472: temp++;
  2474  0090  3001               	movlw	1
  2475  0091  00F2               	movwf	??__esp8266_waitFor
  2476  0092  0872               	movf	??__esp8266_waitFor,w
  2477  0093  07F6               	addwf	__esp8266_waitFor@temp,f
  2478                           
  2479                           ;ESP_lib.h: 473: } else {
  2480  0094  2896               	goto	l1767
  2481  0095                     l1765:	
  2482                           
  2483                           ;ESP_lib.h: 474: temp = 0;
  2484  0095  01F6               	clrf	__esp8266_waitFor@temp
  2485  0096                     l1767:	
  2486                           
  2487                           ;ESP_lib.h: 475: }
  2488                           ;ESP_lib.h: 476: } while (string[temp] != 0);
  2489  0096  0876               	movf	__esp8266_waitFor@temp,w
  2490  0097  0770               	addwf	__esp8266_waitFor@string,w
  2491  0098  0084               	movwf	4
  2492  0099  0871               	movf	__esp8266_waitFor@string+1,w
  2493  009A  1803               	skipnc
  2494  009B  0A71               	incf	__esp8266_waitFor@string+1,w
  2495  009C  00FF               	movwf	127
  2496  009D  120A  158A  2000  120A  118A  	fcall	stringtab
  2497  00A2  3A00               	xorlw	0
  2498  00A3  1D03               	skipz
  2499  00A4  2871               	goto	l1757
  2500                           
  2501                           ;ESP_lib.h: 477: return counter;
  2502  00A5  0874               	movf	__esp8266_waitFor@counter+1,w
  2503  00A6  00F1               	movwf	?__esp8266_waitFor+1
  2504  00A7  0873               	movf	__esp8266_waitFor@counter,w
  2505  00A8  00F0               	movwf	?__esp8266_waitFor
  2506  00A9  0008               	return
  2507  00AA                     __end_of__esp8266_waitFor:	
  2508                           
  2509                           	psect	text6
  2510  01F4                     __ptext6:	
  2511 ;; *************** function _esp8266_send *****************
  2512 ;; Defined at:
  2513 ;;		line 362 in file "ESP_lib.h"
  2514 ;; Parameters:    Size  Location     Type
  2515 ;;  data            2   28[BANK0 ] PTR unsigned char 
  2516 ;;		 -> STR_63(9), STR_61(9), 
  2517 ;; Auto vars:     Size  Location     Type
  2518 ;;  length_str      6   30[BANK0 ] unsigned char [6]
  2519 ;; Return value:  Size  Location     Type
  2520 ;;		None               void
  2521 ;; Registers used:
  2522 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2523 ;; Tracked objects:
  2524 ;;		On entry : 0/0
  2525 ;;		On exit  : 0/0
  2526 ;;		Unchanged: 0/0
  2527 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2528 ;;      Params:         0       2       0       0       0
  2529 ;;      Locals:         0       6       0       0       0
  2530 ;;      Temps:          0       0       0       0       0
  2531 ;;      Totals:         0       8       0       0       0
  2532 ;;Total ram usage:        8 bytes
  2533 ;; Hardware stack levels used:    1
  2534 ;; Hardware stack levels required when called:    2
  2535 ;; This function calls:
  2536 ;;		__esp8266_getch
  2537 ;;		__esp8266_print
  2538 ;;		__esp8266_waitResponse
  2539 ;;		_sprintf
  2540 ;;		_strlen
  2541 ;; This function is called by:
  2542 ;;		_main
  2543 ;; This function uses a non-reentrant model
  2544 ;;
  2545                           
  2546                           
  2547                           ;psect for function _esp8266_send
  2548  01F4                     _esp8266_send:	
  2549                           
  2550                           ;ESP_lib.h: 363: unsigned char length_str[6] = "\0\0\0\0\0";
  2551                           
  2552                           ;incstack = 0
  2553                           ; Regs used in _esp8266_send: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2554  01F4  303E               	movlw	esp8266_send@length_str& (0+255)
  2555  01F5  0084               	movwf	4
  2556  01F6  1683               	bsf	3,5	;RP0=1, select bank1
  2557  01F7  1303               	bcf	3,6	;RP1=0, select bank1
  2558  01F8  0828               	movf	esp8266_send@F2041^(0+128),w
  2559  01F9  1383               	bcf	3,7	;select IRP bank0
  2560  01FA  0080               	movwf	0
  2561  01FB  0A84               	incf	4,f
  2562  01FC  0829               	movf	(esp8266_send@F2041^(0+128)+1),w
  2563  01FD  0080               	movwf	0
  2564  01FE  0A84               	incf	4,f
  2565  01FF  082A               	movf	(esp8266_send@F2041^(0+128)+2),w
  2566  0200  0080               	movwf	0
  2567  0201  0A84               	incf	4,f
  2568  0202  082B               	movf	(esp8266_send@F2041^(0+128)+3),w
  2569  0203  0080               	movwf	0
  2570  0204  0A84               	incf	4,f
  2571  0205  082C               	movf	(esp8266_send@F2041^(0+128)+4),w
  2572  0206  0080               	movwf	0
  2573  0207  0A84               	incf	4,f
  2574  0208  082D               	movf	(esp8266_send@F2041^(0+128)+5),w
  2575  0209  0080               	movwf	0
  2576                           
  2577                           ;ESP_lib.h: 365: sprintf(length_str, "%u", strlen(data));
  2578  020A  300C               	movlw	low (STR_30| (0+32768))
  2579  020B  1283               	bcf	3,5	;RP0=0, select bank0
  2580  020C  1303               	bcf	3,6	;RP1=0, select bank0
  2581  020D  00A0               	movwf	sprintf@f
  2582  020E  308A               	movlw	high (STR_30| (0+32768))
  2583  020F  00A1               	movwf	sprintf@f+1
  2584  0210  083C               	movf	esp8266_send@data,w
  2585  0211  00F0               	movwf	strlen@s
  2586  0212  083D               	movf	esp8266_send@data+1,w
  2587  0213  00F1               	movwf	strlen@s+1
  2588  0214  120A  118A  200B  120A  118A  	fcall	_strlen
  2589  0219  0871               	movf	?_strlen+1,w
  2590  021A  1283               	bcf	3,5	;RP0=0, select bank0
  2591  021B  1303               	bcf	3,6	;RP1=0, select bank0
  2592  021C  00A3               	movwf	?_sprintf+3
  2593  021D  0870               	movf	?_strlen,w
  2594  021E  00A2               	movwf	?_sprintf+2
  2595  021F  303E               	movlw	(low (esp8266_send@length_str| 0))& (0+255)
  2596  0220  120A  118A  2415  120A  118A  	fcall	_sprintf
  2597                           
  2598                           ;ESP_lib.h: 366: _esp8266_print("AT+CIPSEND=0,");
  2599  0225  30CF               	movlw	low (STR_33| (0+32768))
  2600  0226  00F1               	movwf	__esp8266_print@ptr
  2601  0227  3088               	movlw	high (STR_33| (0+32768))
  2602  0228  00F2               	movwf	__esp8266_print@ptr+1
  2603  0229  120A  158A  2741  120A  118A  	fcall	__esp8266_print
  2604                           
  2605                           ;ESP_lib.h: 367: _esp8266_print(length_str);
  2606  022E  303E               	movlw	(low (esp8266_send@length_str| 0))& (0+255)
  2607  022F  00F1               	movwf	__esp8266_print@ptr
  2608  0230  3000               	movlw	0
  2609  0231  00F2               	movwf	__esp8266_print@ptr+1
  2610  0232  120A  158A  2741  120A  118A  	fcall	__esp8266_print
  2611                           
  2612                           ;ESP_lib.h: 368: _esp8266_print("\r\n");
  2613  0237  30DC               	movlw	low ((STR_36+2)| (0+32768))
  2614  0238  00F1               	movwf	__esp8266_print@ptr
  2615  0239  3089               	movlw	high ((STR_36+2)| (0+32768))
  2616  023A  00F2               	movwf	__esp8266_print@ptr+1
  2617  023B  120A  158A  2741  120A  118A  	fcall	__esp8266_print
  2618  0240                     l2007:	
  2619                           ;ESP_lib.h: 369: while (_esp8266_getch() != '>');
  2620                           
  2621  0240  120A  158A  2638  120A  118A  	fcall	__esp8266_getch
  2622  0245  3A3E               	xorlw	62
  2623  0246  1D03               	skipz
  2624  0247  2A40               	goto	l2007
  2625                           
  2626                           ;ESP_lib.h: 370: _esp8266_print(data);
  2627  0248  1283               	bcf	3,5	;RP0=0, select bank0
  2628  0249  1303               	bcf	3,6	;RP1=0, select bank0
  2629  024A  083C               	movf	esp8266_send@data,w
  2630  024B  00F1               	movwf	__esp8266_print@ptr
  2631  024C  083D               	movf	esp8266_send@data+1,w
  2632  024D  00F2               	movwf	__esp8266_print@ptr+1
  2633  024E  120A  158A  2741  120A  118A  	fcall	__esp8266_print
  2634                           
  2635                           ;ESP_lib.h: 371: if (_esp8266_waitResponse() == 1) {
  2636  0253  120A  118A  237E  120A  118A  	fcall	__esp8266_waitResponse
  2637  0258  3A01               	xorlw	1
  2638  0259  1D03               	skipz
  2639  025A  2A5D               	goto	l2015
  2640                           
  2641                           ;ESP_lib.h: 372: return 1;
  2642  025B  1403               	setc
  2643  025C  0008               	return
  2644  025D                     l2015:	
  2645                           
  2646                           ;ESP_lib.h: 373: }
  2647                           ;ESP_lib.h: 374: return 0;
  2648  025D  1003               	clrc
  2649  025E  0008               	return
  2650  025F                     __end_of_esp8266_send:	
  2651                           
  2652                           	psect	text7
  2653  000B                     __ptext7:	
  2654 ;; *************** function _strlen *****************
  2655 ;; Defined at:
  2656 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\strlen.c"
  2657 ;; Parameters:    Size  Location     Type
  2658 ;;  s               2    0[COMMON] PTR const unsigned char 
  2659 ;;		 -> STR_63(9), STR_61(9), 
  2660 ;; Auto vars:     Size  Location     Type
  2661 ;;  cp              2    4[COMMON] PTR const unsigned char 
  2662 ;;		 -> STR_63(9), STR_61(9), 
  2663 ;; Return value:  Size  Location     Type
  2664 ;;                  2    0[COMMON] unsigned int 
  2665 ;; Registers used:
  2666 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
  2667 ;; Tracked objects:
  2668 ;;		On entry : 0/0
  2669 ;;		On exit  : 0/0
  2670 ;;		Unchanged: 0/0
  2671 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2672 ;;      Params:         2       0       0       0       0
  2673 ;;      Locals:         2       0       0       0       0
  2674 ;;      Temps:          2       0       0       0       0
  2675 ;;      Totals:         6       0       0       0       0
  2676 ;;Total ram usage:        6 bytes
  2677 ;; Hardware stack levels used:    2
  2678 ;; This function calls:
  2679 ;;		Nothing
  2680 ;; This function is called by:
  2681 ;;		_esp8266_send
  2682 ;; This function uses a non-reentrant model
  2683 ;;
  2684                           
  2685                           
  2686                           ;psect for function _strlen
  2687  000B                     _strlen:	
  2688                           
  2689                           ;incstack = 0
  2690                           ; Regs used in _strlen: [wreg-fsr0h+status,2+status,0+btemp+1+pclath]
  2691  000B  0870               	movf	strlen@s,w
  2692  000C  00F4               	movwf	strlen@cp
  2693  000D  0871               	movf	strlen@s+1,w
  2694  000E  00F5               	movwf	strlen@cp+1
  2695  000F                     l1823:	
  2696  000F  0875               	movf	strlen@cp+1,w
  2697  0010  1283               	bcf	3,5	;RP0=0, select bank0
  2698  0011  1303               	bcf	3,6	;RP1=0, select bank0
  2699  0012  00FF               	movwf	127
  2700  0013  0874               	movf	strlen@cp,w
  2701  0014  0084               	movwf	4
  2702  0015  120A  158A  2000  120A  118A  	fcall	stringtab
  2703  001A  3A00               	xorlw	0
  2704  001B  1903               	btfsc	3,2
  2705  001C  2822               	goto	l1825
  2706  001D  3001               	movlw	1
  2707  001E  07F4               	addwf	strlen@cp,f
  2708  001F  1803               	skipnc
  2709  0020  0AF5               	incf	strlen@cp+1,f
  2710  0021  280F               	goto	l1823
  2711  0022                     l1825:	
  2712  0022  0970               	comf	strlen@s,w
  2713  0023  00F2               	movwf	??_strlen
  2714  0024  0971               	comf	strlen@s+1,w
  2715  0025  00F3               	movwf	??_strlen+1
  2716  0026  0AF2               	incf	??_strlen,f
  2717  0027  1903               	skipnz
  2718  0028  0AF3               	incf	??_strlen+1,f
  2719  0029  0874               	movf	strlen@cp,w
  2720  002A  0772               	addwf	??_strlen,w
  2721  002B  00F0               	movwf	?_strlen
  2722  002C  0875               	movf	strlen@cp+1,w
  2723  002D  1803               	skipnc
  2724  002E  0A75               	incf	strlen@cp+1,w
  2725  002F  0773               	addwf	??_strlen+1,w
  2726  0030  00F1               	movwf	?_strlen+1
  2727  0031  0008               	return
  2728  0032                     __end_of_strlen:	
  2729                           
  2730                           	psect	text8
  2731  0415                     __ptext8:	
  2732 ;; *************** function _sprintf *****************
  2733 ;; Defined at:
  2734 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
  2735 ;; Parameters:    Size  Location     Type
  2736 ;;  sp              1    wreg     PTR unsigned char 
  2737 ;;		 -> esp8266_send@length_str(6), esp8266_start@port_str(5), 
  2738 ;;  f               2    0[BANK0 ] PTR const unsigned char 
  2739 ;;		 -> STR_32(3), STR_30(3), 
  2740 ;; Auto vars:     Size  Location     Type
  2741 ;;  sp              1   12[BANK0 ] PTR unsigned char 
  2742 ;;		 -> esp8266_send@length_str(6), esp8266_start@port_str(5), 
  2743 ;;  tmpval          4    0        struct .
  2744 ;;  val             2    9[BANK0 ] unsigned int 
  2745 ;;  cp              2    0        PTR const unsigned char 
  2746 ;;  len             2    0        unsigned int 
  2747 ;;  c               1   13[BANK0 ] char 
  2748 ;;  prec            1   11[BANK0 ] char 
  2749 ;;  ap              1    8[BANK0 ] PTR void [1]
  2750 ;;		 -> ?_sprintf(2), 
  2751 ;;  flag            1    7[BANK0 ] unsigned char 
  2752 ;; Return value:  Size  Location     Type
  2753 ;;                  2    0[BANK0 ] int 
  2754 ;; Registers used:
  2755 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2756 ;; Tracked objects:
  2757 ;;		On entry : 0/0
  2758 ;;		On exit  : 0/0
  2759 ;;		Unchanged: 0/0
  2760 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2761 ;;      Params:         0       4       0       0       0
  2762 ;;      Locals:         0       7       0       0       0
  2763 ;;      Temps:          0       3       0       0       0
  2764 ;;      Totals:         0      14       0       0       0
  2765 ;;Total ram usage:       14 bytes
  2766 ;; Hardware stack levels used:    1
  2767 ;; Hardware stack levels required when called:    1
  2768 ;; This function calls:
  2769 ;;		___lwdiv
  2770 ;;		___lwmod
  2771 ;; This function is called by:
  2772 ;;		_esp8266_send
  2773 ;;		_esp8266_start
  2774 ;; This function uses a non-reentrant model
  2775 ;;
  2776                           
  2777                           
  2778                           ;psect for function _sprintf
  2779  0415                     _sprintf:	
  2780                           
  2781                           ;incstack = 0
  2782                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2783                           ;sprintf@sp stored from wreg
  2784  0415  1283               	bcf	3,5	;RP0=0, select bank0
  2785  0416  1303               	bcf	3,6	;RP1=0, select bank0
  2786  0417  00AC               	movwf	sprintf@sp
  2787                           
  2788                           ;doprnt.c: 494: va_list ap;
  2789                           ;doprnt.c: 499: signed char c;
  2790                           ;doprnt.c: 506: signed char prec;
  2791                           ;doprnt.c: 508: unsigned char flag;
  2792                           ;doprnt.c: 523: union {
  2793                           ;doprnt.c: 524: unsigned long vd;
  2794                           ;doprnt.c: 525: double integ;
  2795                           ;doprnt.c: 526: } tmpval;
  2796                           ;doprnt.c: 528: unsigned int val;
  2797                           ;doprnt.c: 529: unsigned len;
  2798                           ;doprnt.c: 530: const char * cp;
  2799                           ;doprnt.c: 533: *ap = __va_start();
  2800  0418  3022               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
  2801  0419  00A4               	movwf	??_sprintf
  2802  041A  0824               	movf	??_sprintf,w
  2803  041B  00A8               	movwf	sprintf@ap
  2804  041C                     l1815:	
  2805                           ;doprnt.c: 536: while(c = *f++) {
  2806                           
  2807  041C  0821               	movf	sprintf@f+1,w
  2808  041D  00A5               	movwf	??_sprintf+1
  2809  041E  0820               	movf	sprintf@f,w
  2810  041F  00A4               	movwf	??_sprintf
  2811  0420  0AA0               	incf	sprintf@f,f
  2812  0421  1903               	skipnz
  2813  0422  0AA1               	incf	sprintf@f+1,f
  2814  0423  0825               	movf	??_sprintf+1,w
  2815  0424  00FF               	movwf	127
  2816  0425  0824               	movf	??_sprintf,w
  2817  0426  0084               	movwf	4
  2818  0427  120A  158A  2000  120A  118A  	fcall	stringtab
  2819  042C  00A6               	movwf	??_sprintf+2
  2820  042D  0826               	movf	??_sprintf+2,w
  2821  042E  00AD               	movwf	sprintf@c
  2822  042F  082D               	movf	sprintf@c,w
  2823  0430  1903               	btfsc	3,2
  2824  0431  2CE1               	goto	l1817
  2825                           
  2826                           ;doprnt.c: 538: if(c != '%')
  2827  0432  3025               	movlw	37
  2828  0433  062D               	xorwf	sprintf@c,w
  2829  0434  1903               	btfsc	3,2
  2830  0435  2C42               	goto	l1781
  2831                           
  2832                           ;doprnt.c: 540: {
  2833                           ;doprnt.c: 541: ((*sp++ = (c)));
  2834  0436  082D               	movf	sprintf@c,w
  2835  0437  00A4               	movwf	??_sprintf
  2836  0438  082C               	movf	sprintf@sp,w
  2837  0439  0084               	movwf	4
  2838  043A  0824               	movf	??_sprintf,w
  2839  043B  1383               	bcf	3,7	;select IRP bank0
  2840  043C  0080               	movwf	0
  2841  043D  3001               	movlw	1
  2842  043E  00A4               	movwf	??_sprintf
  2843  043F  0824               	movf	??_sprintf,w
  2844  0440  07AC               	addwf	sprintf@sp,f
  2845                           
  2846                           ;doprnt.c: 542: continue;
  2847  0441  2C1C               	goto	l1815
  2848  0442                     l1781:	
  2849                           
  2850                           ;doprnt.c: 543: }
  2851                           ;doprnt.c: 548: flag = 0;
  2852  0442  01A7               	clrf	sprintf@flag
  2853                           
  2854                           ;doprnt.c: 635: switch(c = *f++) {
  2855  0443  2C49               	goto	l1787
  2856  0444                     l1783:	
  2857                           ;doprnt.c: 817: case 'u':
  2858                           
  2859                           ;doprnt.c: 813: continue;
  2860                           
  2861                           ;doprnt.c: 802: default:
  2862                           
  2863                           ;doprnt.c: 638: goto alldone;
  2864                           
  2865                           ;doprnt.c: 637: case 0:
  2866                           
  2867                           
  2868                           ;doprnt.c: 818: flag |= 0xC0;
  2869  0444  30C0               	movlw	192
  2870  0445  00A4               	movwf	??_sprintf
  2871  0446  0824               	movf	??_sprintf,w
  2872  0447  04A7               	iorwf	sprintf@flag,f
  2873                           
  2874                           ;doprnt.c: 822: }
  2875                           
  2876                           ;doprnt.c: 819: break;
  2877  0448  2C61               	goto	l1789
  2878  0449                     l1787:	
  2879  0449  0821               	movf	sprintf@f+1,w
  2880  044A  00A5               	movwf	??_sprintf+1
  2881  044B  0820               	movf	sprintf@f,w
  2882  044C  00A4               	movwf	??_sprintf
  2883  044D  0AA0               	incf	sprintf@f,f
  2884  044E  1903               	skipnz
  2885  044F  0AA1               	incf	sprintf@f+1,f
  2886  0450  0825               	movf	??_sprintf+1,w
  2887  0451  00FF               	movwf	127
  2888  0452  0824               	movf	??_sprintf,w
  2889  0453  0084               	movwf	4
  2890  0454  120A  158A  2000  120A  118A  	fcall	stringtab
  2891  0459  00AD               	movwf	sprintf@c
  2892                           
  2893                           ; Switch size 1, requested type "space"
  2894                           ; Number of cases is 2, Range of values is 0 to 117
  2895                           ; switch strategies available:
  2896                           ; Name         Instructions Cycles
  2897                           ; simple_byte            7     4 (average)
  2898                           ; jumptable            260     6 (fixed)
  2899                           ;	Chosen strategy is simple_byte
  2900  045A  3A00               	xorlw	0	; case 0
  2901  045B  1903               	skipnz
  2902  045C  2CE1               	goto	l1817
  2903  045D  3A75               	xorlw	117	; case 117
  2904  045E  1903               	skipnz
  2905  045F  2C44               	goto	l1783
  2906  0460  2C1C               	goto	l1815
  2907  0461                     l1789:	
  2908                           
  2909                           ;doprnt.c: 1273: {
  2910                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  2911  0461  0828               	movf	sprintf@ap,w
  2912  0462  0084               	movwf	4
  2913  0463  1383               	bcf	3,7	;select IRP bank0
  2914  0464  0800               	movf	0,w
  2915  0465  00A9               	movwf	sprintf@val
  2916  0466  0A84               	incf	4,f
  2917  0467  0800               	movf	0,w
  2918  0468  00AA               	movwf	sprintf@val+1
  2919  0469  3002               	movlw	2
  2920  046A  00A4               	movwf	??_sprintf
  2921  046B  0824               	movf	??_sprintf,w
  2922  046C  07A8               	addwf	sprintf@ap,f
  2923                           
  2924                           ;doprnt.c: 1287: }
  2925                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2926  046D  01AD               	clrf	sprintf@c
  2927  046E  0AAD               	incf	sprintf@c,f
  2928  046F  3005               	movlw	5
  2929  0470  062D               	xorwf	sprintf@c,w
  2930  0471  1903               	btfsc	3,2
  2931  0472  2C98               	goto	l1805
  2932  0473                     l1799:	
  2933                           
  2934                           ;doprnt.c: 1306: if(val < dpowers[c])
  2935  0473  082D               	movf	sprintf@c,w
  2936  0474  00A4               	movwf	??_sprintf
  2937  0475  0724               	addwf	??_sprintf,w
  2938  0476  3E12               	addlw	low (_dpowers| (0+32768))
  2939  0477  0084               	movwf	4
  2940  0478  3088               	movlw	high (_dpowers| (0+32768))
  2941  0479  1803               	skipnc
  2942  047A  3E01               	addlw	1
  2943  047B  00FF               	movwf	127
  2944  047C  120A  158A  2000  120A  118A  	fcall	stringtab
  2945  0481  00A5               	movwf	??_sprintf+1
  2946  0482  120A  158A  2000  120A  118A  	fcall	stringtab
  2947  0487  00A6               	movwf	??_sprintf+2
  2948  0488  0826               	movf	??_sprintf+2,w
  2949  0489  022A               	subwf	sprintf@val+1,w
  2950  048A  1D03               	skipz
  2951  048B  2C8E               	goto	u1475
  2952  048C  0825               	movf	??_sprintf+1,w
  2953  048D  0229               	subwf	sprintf@val,w
  2954  048E                     u1475:	
  2955  048E  1C03               	btfss	3,0
  2956  048F  2C98               	goto	l1805
  2957                           
  2958                           ;doprnt.c: 1307: break;
  2959  0490  3001               	movlw	1
  2960  0491  00A4               	movwf	??_sprintf
  2961  0492  0824               	movf	??_sprintf,w
  2962  0493  07AD               	addwf	sprintf@c,f
  2963  0494  3005               	movlw	5
  2964  0495  062D               	xorwf	sprintf@c,w
  2965  0496  1D03               	btfss	3,2
  2966  0497  2C73               	goto	l1799
  2967  0498                     l1805:	
  2968                           
  2969                           ;doprnt.c: 1422: {
  2970                           ;doprnt.c: 1469: }
  2971                           ;doprnt.c: 1472: prec = c;
  2972  0498  082D               	movf	sprintf@c,w
  2973  0499  00A4               	movwf	??_sprintf
  2974  049A  0824               	movf	??_sprintf,w
  2975  049B  00AB               	movwf	sprintf@prec
  2976  049C                     l1813:	
  2977                           ;doprnt.c: 1474: while(prec--) {
  2978                           
  2979  049C  30FF               	movlw	255
  2980  049D  00A4               	movwf	??_sprintf
  2981  049E  0824               	movf	??_sprintf,w
  2982  049F  07AB               	addwf	sprintf@prec,f
  2983  04A0  0A2B               	incf	sprintf@prec,w
  2984  04A1  1903               	btfsc	3,2
  2985  04A2  2C1C               	goto	l1815
  2986                           
  2987                           ;doprnt.c: 1478: {
  2988                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2989  04A3  300A               	movlw	10
  2990  04A4  00F8               	movwf	___lwmod@divisor
  2991  04A5  3000               	movlw	0
  2992  04A6  00F9               	movwf	___lwmod@divisor+1
  2993  04A7  082B               	movf	sprintf@prec,w
  2994  04A8  00A4               	movwf	??_sprintf
  2995  04A9  0724               	addwf	??_sprintf,w
  2996  04AA  3E12               	addlw	low (_dpowers| (0+32768))
  2997  04AB  0084               	movwf	4
  2998  04AC  3088               	movlw	high (_dpowers| (0+32768))
  2999  04AD  1803               	skipnc
  3000  04AE  3E01               	addlw	1
  3001  04AF  00FF               	movwf	127
  3002  04B0  120A  158A  2000  120A  118A  	fcall	stringtab
  3003  04B5  00F0               	movwf	___lwdiv@divisor
  3004  04B6  120A  158A  2000  120A  118A  	fcall	stringtab
  3005  04BB  00F1               	movwf	___lwdiv@divisor+1
  3006  04BC  082A               	movf	sprintf@val+1,w
  3007  04BD  00F3               	movwf	___lwdiv@dividend+1
  3008  04BE  0829               	movf	sprintf@val,w
  3009  04BF  00F2               	movwf	___lwdiv@dividend
  3010  04C0  120A  118A  2032  120A  118A  	fcall	___lwdiv
  3011  04C5  0871               	movf	?___lwdiv+1,w
  3012  04C6  00FB               	movwf	___lwmod@dividend+1
  3013  04C7  0870               	movf	?___lwdiv,w
  3014  04C8  00FA               	movwf	___lwmod@dividend
  3015  04C9  120A  158A  2795  120A  118A  	fcall	___lwmod
  3016  04CE  0878               	movf	?___lwmod,w
  3017  04CF  3E30               	addlw	48
  3018  04D0  1283               	bcf	3,5	;RP0=0, select bank0
  3019  04D1  1303               	bcf	3,6	;RP1=0, select bank0
  3020  04D2  00A5               	movwf	??_sprintf+1
  3021  04D3  0825               	movf	??_sprintf+1,w
  3022  04D4  00AD               	movwf	sprintf@c
  3023                           
  3024                           ;doprnt.c: 1523: }
  3025                           ;doprnt.c: 1524: ((*sp++ = (c)));
  3026  04D5  082D               	movf	sprintf@c,w
  3027  04D6  00A4               	movwf	??_sprintf
  3028  04D7  082C               	movf	sprintf@sp,w
  3029  04D8  0084               	movwf	4
  3030  04D9  0824               	movf	??_sprintf,w
  3031  04DA  1383               	bcf	3,7	;select IRP bank0
  3032  04DB  0080               	movwf	0
  3033  04DC  3001               	movlw	1
  3034  04DD  00A4               	movwf	??_sprintf
  3035  04DE  0824               	movf	??_sprintf,w
  3036  04DF  07AC               	addwf	sprintf@sp,f
  3037  04E0  2C9C               	goto	l1813
  3038  04E1                     l1817:	
  3039                           ;doprnt.c: 1525: }
  3040                           ;doprnt.c: 1533: }
  3041                           ;doprnt.c: 1535: alldone:
  3042                           
  3043                           
  3044                           ;doprnt.c: 1538: *sp = 0;
  3045  04E1  082C               	movf	sprintf@sp,w
  3046  04E2  0084               	movwf	4
  3047  04E3  1383               	bcf	3,7	;select IRP bank0
  3048  04E4  0180               	clrf	0
  3049  04E5  0008               	return
  3050  04E6                     __end_of_sprintf:	
  3051                           ;doprnt.c: 1540: return 0;
  3052                           ;	Return value of _sprintf is never used
  3053                           
  3054                           
  3055                           	psect	text9
  3056  0F95                     __ptext9:	
  3057 ;; *************** function ___lwmod *****************
  3058 ;; Defined at:
  3059 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwmod.c"
  3060 ;; Parameters:    Size  Location     Type
  3061 ;;  divisor         2    8[COMMON] unsigned int 
  3062 ;;  dividend        2   10[COMMON] unsigned int 
  3063 ;; Auto vars:     Size  Location     Type
  3064 ;;  counter         1   13[COMMON] unsigned char 
  3065 ;; Return value:  Size  Location     Type
  3066 ;;                  2    8[COMMON] unsigned int 
  3067 ;; Registers used:
  3068 ;;		wreg, status,2, status,0
  3069 ;; Tracked objects:
  3070 ;;		On entry : 0/0
  3071 ;;		On exit  : 0/0
  3072 ;;		Unchanged: 0/0
  3073 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3074 ;;      Params:         4       0       0       0       0
  3075 ;;      Locals:         1       0       0       0       0
  3076 ;;      Temps:          1       0       0       0       0
  3077 ;;      Totals:         6       0       0       0       0
  3078 ;;Total ram usage:        6 bytes
  3079 ;; Hardware stack levels used:    1
  3080 ;; This function calls:
  3081 ;;		Nothing
  3082 ;; This function is called by:
  3083 ;;		_sprintf
  3084 ;; This function uses a non-reentrant model
  3085 ;;
  3086                           
  3087                           
  3088                           ;psect for function ___lwmod
  3089  0F95                     ___lwmod:	
  3090                           
  3091                           ;incstack = 0
  3092                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  3093  0F95  0878               	movf	___lwmod@divisor,w
  3094  0F96  0479               	iorwf	___lwmod@divisor+1,w
  3095  0F97  1903               	btfsc	3,2
  3096  0F98  2FC2               	goto	l1671
  3097  0F99  01FD               	clrf	___lwmod@counter
  3098  0F9A  0AFD               	incf	___lwmod@counter,f
  3099  0F9B                     l1661:	
  3100  0F9B  1BF9               	btfsc	___lwmod@divisor+1,7
  3101  0F9C  2FA9               	goto	l1663
  3102  0F9D  3001               	movlw	1
  3103  0F9E                     u1285:	
  3104  0F9E  1003               	clrc
  3105  0F9F  0DF8               	rlf	___lwmod@divisor,f
  3106  0FA0  0DF9               	rlf	___lwmod@divisor+1,f
  3107  0FA1  3EFF               	addlw	-1
  3108  0FA2  1D03               	skipz
  3109  0FA3  2F9E               	goto	u1285
  3110  0FA4  3001               	movlw	1
  3111  0FA5  00FC               	movwf	??___lwmod
  3112  0FA6  087C               	movf	??___lwmod,w
  3113  0FA7  07FD               	addwf	___lwmod@counter,f
  3114  0FA8  2F9B               	goto	l1661
  3115  0FA9                     l1663:	
  3116  0FA9  0879               	movf	___lwmod@divisor+1,w
  3117  0FAA  027B               	subwf	___lwmod@dividend+1,w
  3118  0FAB  1D03               	skipz
  3119  0FAC  2FAF               	goto	u1305
  3120  0FAD  0878               	movf	___lwmod@divisor,w
  3121  0FAE  027A               	subwf	___lwmod@dividend,w
  3122  0FAF                     u1305:	
  3123  0FAF  1C03               	skipc
  3124  0FB0  2FB7               	goto	l1667
  3125  0FB1  0878               	movf	___lwmod@divisor,w
  3126  0FB2  02FA               	subwf	___lwmod@dividend,f
  3127  0FB3  0879               	movf	___lwmod@divisor+1,w
  3128  0FB4  1C03               	skipc
  3129  0FB5  03FB               	decf	___lwmod@dividend+1,f
  3130  0FB6  02FB               	subwf	___lwmod@dividend+1,f
  3131  0FB7                     l1667:	
  3132  0FB7  3001               	movlw	1
  3133  0FB8                     u1315:	
  3134  0FB8  1003               	clrc
  3135  0FB9  0CF9               	rrf	___lwmod@divisor+1,f
  3136  0FBA  0CF8               	rrf	___lwmod@divisor,f
  3137  0FBB  3EFF               	addlw	-1
  3138  0FBC  1D03               	skipz
  3139  0FBD  2FB8               	goto	u1315
  3140  0FBE  3001               	movlw	1
  3141  0FBF  02FD               	subwf	___lwmod@counter,f
  3142  0FC0  1D03               	btfss	3,2
  3143  0FC1  2FA9               	goto	l1663
  3144  0FC2                     l1671:	
  3145  0FC2  087B               	movf	___lwmod@dividend+1,w
  3146  0FC3  00F9               	movwf	?___lwmod+1
  3147  0FC4  087A               	movf	___lwmod@dividend,w
  3148  0FC5  00F8               	movwf	?___lwmod
  3149  0FC6  0008               	return
  3150  0FC7                     __end_of___lwmod:	
  3151                           
  3152                           	psect	text10
  3153  0032                     __ptext10:	
  3154 ;; *************** function ___lwdiv *****************
  3155 ;; Defined at:
  3156 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwdiv.c"
  3157 ;; Parameters:    Size  Location     Type
  3158 ;;  divisor         2    0[COMMON] unsigned int 
  3159 ;;  dividend        2    2[COMMON] unsigned int 
  3160 ;; Auto vars:     Size  Location     Type
  3161 ;;  quotient        2    5[COMMON] unsigned int 
  3162 ;;  counter         1    7[COMMON] unsigned char 
  3163 ;; Return value:  Size  Location     Type
  3164 ;;                  2    0[COMMON] unsigned int 
  3165 ;; Registers used:
  3166 ;;		wreg, status,2, status,0
  3167 ;; Tracked objects:
  3168 ;;		On entry : 0/0
  3169 ;;		On exit  : 0/0
  3170 ;;		Unchanged: 0/0
  3171 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3172 ;;      Params:         4       0       0       0       0
  3173 ;;      Locals:         3       0       0       0       0
  3174 ;;      Temps:          1       0       0       0       0
  3175 ;;      Totals:         8       0       0       0       0
  3176 ;;Total ram usage:        8 bytes
  3177 ;; Hardware stack levels used:    1
  3178 ;; This function calls:
  3179 ;;		Nothing
  3180 ;; This function is called by:
  3181 ;;		_sprintf
  3182 ;; This function uses a non-reentrant model
  3183 ;;
  3184                           
  3185                           
  3186                           ;psect for function ___lwdiv
  3187  0032                     ___lwdiv:	
  3188                           
  3189                           ;incstack = 0
  3190                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  3191  0032  01F5               	clrf	___lwdiv@quotient
  3192  0033  01F6               	clrf	___lwdiv@quotient+1
  3193  0034  0870               	movf	___lwdiv@divisor,w
  3194  0035  0471               	iorwf	___lwdiv@divisor+1,w
  3195  0036  1903               	btfsc	3,2
  3196  0037  2869               	goto	l1649
  3197  0038  01F7               	clrf	___lwdiv@counter
  3198  0039  0AF7               	incf	___lwdiv@counter,f
  3199  003A                     l1637:	
  3200  003A  1BF1               	btfsc	___lwdiv@divisor+1,7
  3201  003B  2848               	goto	l1639
  3202  003C  3001               	movlw	1
  3203  003D                     u1215:	
  3204  003D  1003               	clrc
  3205  003E  0DF0               	rlf	___lwdiv@divisor,f
  3206  003F  0DF1               	rlf	___lwdiv@divisor+1,f
  3207  0040  3EFF               	addlw	-1
  3208  0041  1D03               	skipz
  3209  0042  283D               	goto	u1215
  3210  0043  3001               	movlw	1
  3211  0044  00F4               	movwf	??___lwdiv
  3212  0045  0874               	movf	??___lwdiv,w
  3213  0046  07F7               	addwf	___lwdiv@counter,f
  3214  0047  283A               	goto	l1637
  3215  0048                     l1639:	
  3216  0048  3001               	movlw	1
  3217  0049                     u1235:	
  3218  0049  1003               	clrc
  3219  004A  0DF5               	rlf	___lwdiv@quotient,f
  3220  004B  0DF6               	rlf	___lwdiv@quotient+1,f
  3221  004C  3EFF               	addlw	-1
  3222  004D  1D03               	skipz
  3223  004E  2849               	goto	u1235
  3224  004F  0871               	movf	___lwdiv@divisor+1,w
  3225  0050  0273               	subwf	___lwdiv@dividend+1,w
  3226  0051  1D03               	skipz
  3227  0052  2855               	goto	u1245
  3228  0053  0870               	movf	___lwdiv@divisor,w
  3229  0054  0272               	subwf	___lwdiv@dividend,w
  3230  0055                     u1245:	
  3231  0055  1C03               	skipc
  3232  0056  285E               	goto	l1645
  3233  0057  0870               	movf	___lwdiv@divisor,w
  3234  0058  02F2               	subwf	___lwdiv@dividend,f
  3235  0059  0871               	movf	___lwdiv@divisor+1,w
  3236  005A  1C03               	skipc
  3237  005B  03F3               	decf	___lwdiv@dividend+1,f
  3238  005C  02F3               	subwf	___lwdiv@dividend+1,f
  3239  005D  1475               	bsf	___lwdiv@quotient,0
  3240  005E                     l1645:	
  3241  005E  3001               	movlw	1
  3242  005F                     u1255:	
  3243  005F  1003               	clrc
  3244  0060  0CF1               	rrf	___lwdiv@divisor+1,f
  3245  0061  0CF0               	rrf	___lwdiv@divisor,f
  3246  0062  3EFF               	addlw	-1
  3247  0063  1D03               	skipz
  3248  0064  285F               	goto	u1255
  3249  0065  3001               	movlw	1
  3250  0066  02F7               	subwf	___lwdiv@counter,f
  3251  0067  1D03               	btfss	3,2
  3252  0068  2848               	goto	l1639
  3253  0069                     l1649:	
  3254  0069  0876               	movf	___lwdiv@quotient+1,w
  3255  006A  00F1               	movwf	?___lwdiv+1
  3256  006B  0875               	movf	___lwdiv@quotient,w
  3257  006C  00F0               	movwf	?___lwdiv
  3258  006D  0008               	return
  3259  006E                     __end_of___lwdiv:	
  3260                           
  3261                           	psect	text11
  3262  0E5A                     __ptext11:	
  3263 ;; *************** function _esp8266_multi *****************
  3264 ;; Defined at:
  3265 ;;		line 153 in file "ESP_lib.h"
  3266 ;; Parameters:    Size  Location     Type
  3267 ;;		None
  3268 ;; Auto vars:     Size  Location     Type
  3269 ;;		None
  3270 ;; Return value:  Size  Location     Type
  3271 ;;                  1    wreg      unsigned char 
  3272 ;; Registers used:
  3273 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3274 ;; Tracked objects:
  3275 ;;		On entry : 0/0
  3276 ;;		On exit  : 0/0
  3277 ;;		Unchanged: 0/0
  3278 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3279 ;;      Params:         0       0       0       0       0
  3280 ;;      Locals:         0       0       0       0       0
  3281 ;;      Temps:          0       0       0       0       0
  3282 ;;      Totals:         0       0       0       0       0
  3283 ;;Total ram usage:        0 bytes
  3284 ;; Hardware stack levels used:    1
  3285 ;; Hardware stack levels required when called:    2
  3286 ;; This function calls:
  3287 ;;		_ESP8266_send_string
  3288 ;;		__esp8266_waitResponse
  3289 ;; This function is called by:
  3290 ;;		_main
  3291 ;; This function uses a non-reentrant model
  3292 ;;
  3293                           
  3294                           
  3295                           ;psect for function _esp8266_multi
  3296  0E5A                     _esp8266_multi:	
  3297                           
  3298                           ;ESP_lib.h: 154: ESP8266_send_string("AT+CIPMUX=1\r\n");
  3299                           
  3300                           ;incstack = 0
  3301                           ; Regs used in _esp8266_multi: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3302  0E5A  30B3               	movlw	low (STR_4| (0+32768))
  3303  0E5B  00F1               	movwf	ESP8266_send_string@st_pt
  3304  0E5C  3088               	movlw	high (STR_4| (0+32768))
  3305  0E5D  00F2               	movwf	ESP8266_send_string@st_pt+1
  3306  0E5E  120A  158A  271E  120A  158A  	fcall	_ESP8266_send_string
  3307                           
  3308                           ;ESP_lib.h: 155: return _esp8266_waitResponse();
  3309                           ;	Return value of _esp8266_multi is never used
  3310  0E63  120A  118A  237E   	fcall	__esp8266_waitResponse
  3311  0E66  0008               	return
  3312  0E67                     __end_of_esp8266_multi:	
  3313                           
  3314                           	psect	text12
  3315  0EDF                     __ptext12:	
  3316 ;; *************** function _esp8266_mode *****************
  3317 ;; Defined at:
  3318 ;;		line 250 in file "ESP_lib.h"
  3319 ;; Parameters:    Size  Location     Type
  3320 ;;  mode            1    wreg     unsigned char 
  3321 ;; Auto vars:     Size  Location     Type
  3322 ;;  mode            1    4[COMMON] unsigned char 
  3323 ;; Return value:  Size  Location     Type
  3324 ;;                  1    wreg      void 
  3325 ;; Registers used:
  3326 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3327 ;; Tracked objects:
  3328 ;;		On entry : 0/0
  3329 ;;		On exit  : 0/0
  3330 ;;		Unchanged: 0/0
  3331 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3332 ;;      Params:         0       0       0       0       0
  3333 ;;      Locals:         1       0       0       0       0
  3334 ;;      Temps:          0       0       0       0       0
  3335 ;;      Totals:         1       0       0       0       0
  3336 ;;Total ram usage:        1 bytes
  3337 ;; Hardware stack levels used:    1
  3338 ;; Hardware stack levels required when called:    2
  3339 ;; This function calls:
  3340 ;;		__esp8266_print
  3341 ;;		__esp8266_putch
  3342 ;;		__esp8266_waitResponse
  3343 ;; This function is called by:
  3344 ;;		_main
  3345 ;; This function uses a non-reentrant model
  3346 ;;
  3347                           
  3348                           
  3349                           ;psect for function _esp8266_mode
  3350  0EDF                     _esp8266_mode:	
  3351                           
  3352                           ;incstack = 0
  3353                           ; Regs used in _esp8266_mode: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3354                           ;esp8266_mode@mode stored from wreg
  3355  0EDF  00F4               	movwf	esp8266_mode@mode
  3356                           
  3357                           ;ESP_lib.h: 251: _esp8266_print("AT+CWMODE=");
  3358  0EE0  306D               	movlw	low (STR_14| (0+32768))
  3359  0EE1  00F1               	movwf	__esp8266_print@ptr
  3360  0EE2  3089               	movlw	high (STR_14| (0+32768))
  3361  0EE3  00F2               	movwf	__esp8266_print@ptr+1
  3362  0EE4  120A  158A  2741  120A  158A  	fcall	__esp8266_print
  3363                           
  3364                           ;ESP_lib.h: 252: _esp8266_putch(mode + '0');
  3365  0EE9  0874               	movf	esp8266_mode@mode,w
  3366  0EEA  3E30               	addlw	48
  3367  0EEB  120A  158A  2630  120A  158A  	fcall	__esp8266_putch
  3368                           
  3369                           ;ESP_lib.h: 253: _esp8266_print("\r\n");
  3370  0EF0  30DC               	movlw	low ((STR_36+2)| (0+32768))
  3371  0EF1  00F1               	movwf	__esp8266_print@ptr
  3372  0EF2  3089               	movlw	high ((STR_36+2)| (0+32768))
  3373  0EF3  00F2               	movwf	__esp8266_print@ptr+1
  3374  0EF4  120A  158A  2741  120A  158A  	fcall	__esp8266_print
  3375                           
  3376                           ;ESP_lib.h: 254: _esp8266_waitResponse();
  3377  0EF9  120A  118A  237E   	fcall	__esp8266_waitResponse
  3378  0EFC  0008               	return
  3379  0EFD                     __end_of_esp8266_mode:	
  3380                           
  3381                           	psect	text13
  3382  0E96                     __ptext13:	
  3383 ;; *************** function _esp8266_isStarted *****************
  3384 ;; Defined at:
  3385 ;;		line 198 in file "ESP_lib.h"
  3386 ;; Parameters:    Size  Location     Type
  3387 ;;		None
  3388 ;; Auto vars:     Size  Location     Type
  3389 ;;		None
  3390 ;; Return value:  Size  Location     Type
  3391 ;;		None               void
  3392 ;; Registers used:
  3393 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3394 ;; Tracked objects:
  3395 ;;		On entry : 0/0
  3396 ;;		On exit  : 0/0
  3397 ;;		Unchanged: 0/0
  3398 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3399 ;;      Params:         0       0       0       0       0
  3400 ;;      Locals:         0       0       0       0       0
  3401 ;;      Temps:          0       0       0       0       0
  3402 ;;      Totals:         0       0       0       0       0
  3403 ;;Total ram usage:        0 bytes
  3404 ;; Hardware stack levels used:    1
  3405 ;; Hardware stack levels required when called:    2
  3406 ;; This function calls:
  3407 ;;		__esp8266_print
  3408 ;;		__esp8266_waitResponse
  3409 ;; This function is called by:
  3410 ;;		_main
  3411 ;; This function uses a non-reentrant model
  3412 ;;
  3413                           
  3414                           
  3415                           ;psect for function _esp8266_isStarted
  3416  0E96                     _esp8266_isStarted:	
  3417                           
  3418                           ;ESP_lib.h: 199: _esp8266_print("AT\r\n");
  3419                           
  3420                           ;incstack = 0
  3421                           ; Regs used in _esp8266_isStarted: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3422  0E96  30DF               	movlw	low (STR_9| (0+32768))
  3423  0E97  00F1               	movwf	__esp8266_print@ptr
  3424  0E98  3089               	movlw	high (STR_9| (0+32768))
  3425  0E99  00F2               	movwf	__esp8266_print@ptr+1
  3426  0E9A  120A  158A  2741  120A  158A  	fcall	__esp8266_print
  3427                           
  3428                           ;ESP_lib.h: 200: return (_esp8266_waitResponse() == 1);
  3429  0E9F  120A  118A  237E  120A  158A  	fcall	__esp8266_waitResponse
  3430  0EA4  3A01               	xorlw	1
  3431  0EA5  1903               	skipnz
  3432  0EA6  2EA9               	goto	l1985
  3433  0EA7  1003               	clrc
  3434  0EA8  0008               	return
  3435  0EA9                     l1985:	
  3436  0EA9  1403               	setc
  3437  0EAA  0008               	return
  3438  0EAB                     __end_of_esp8266_isStarted:	
  3439                           
  3440                           	psect	text14
  3441  0F64                     __ptext14:	
  3442 ;; *************** function _esp8266_config_softAP *****************
  3443 ;; Defined at:
  3444 ;;		line 142 in file "ESP_lib.h"
  3445 ;; Parameters:    Size  Location     Type
  3446 ;;  softssid        2    4[COMMON] PTR unsigned char 
  3447 ;;		 -> STR_54(8), 
  3448 ;;  softpass        2    6[COMMON] PTR unsigned char 
  3449 ;;		 -> STR_55(9), 
  3450 ;; Auto vars:     Size  Location     Type
  3451 ;;		None
  3452 ;; Return value:  Size  Location     Type
  3453 ;;                  1    wreg      unsigned char 
  3454 ;; Registers used:
  3455 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3456 ;; Tracked objects:
  3457 ;;		On entry : 0/0
  3458 ;;		On exit  : 0/0
  3459 ;;		Unchanged: 0/0
  3460 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3461 ;;      Params:         4       0       0       0       0
  3462 ;;      Locals:         0       0       0       0       0
  3463 ;;      Temps:          0       0       0       0       0
  3464 ;;      Totals:         4       0       0       0       0
  3465 ;;Total ram usage:        4 bytes
  3466 ;; Hardware stack levels used:    1
  3467 ;; Hardware stack levels required when called:    2
  3468 ;; This function calls:
  3469 ;;		__esp8266_print
  3470 ;;		__esp8266_waitResponse
  3471 ;; This function is called by:
  3472 ;;		_main
  3473 ;; This function uses a non-reentrant model
  3474 ;;
  3475                           
  3476                           
  3477                           ;psect for function _esp8266_config_softAP
  3478  0F64                     _esp8266_config_softAP:	
  3479                           
  3480                           ;ESP_lib.h: 143: _esp8266_print("AT+CWSAP=\"");
  3481                           
  3482                           ;incstack = 0
  3483                           ; Regs used in _esp8266_config_softAP: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+csta
      +                          ck]
  3484  0F64  3057               	movlw	low (STR_1| (0+32768))
  3485  0F65  00F1               	movwf	__esp8266_print@ptr
  3486  0F66  3089               	movlw	high (STR_1| (0+32768))
  3487  0F67  00F2               	movwf	__esp8266_print@ptr+1
  3488  0F68  120A  158A  2741  120A  158A  	fcall	__esp8266_print
  3489                           
  3490                           ;ESP_lib.h: 144: _esp8266_print(softssid);
  3491  0F6D  0874               	movf	esp8266_config_softAP@softssid,w
  3492  0F6E  00F1               	movwf	__esp8266_print@ptr
  3493  0F6F  0875               	movf	esp8266_config_softAP@softssid+1,w
  3494  0F70  00F2               	movwf	__esp8266_print@ptr+1
  3495  0F71  120A  158A  2741  120A  158A  	fcall	__esp8266_print
  3496                           
  3497                           ;ESP_lib.h: 145: _esp8266_print("\",\"");
  3498  0F76  30F2               	movlw	low (STR_2| (0+32768))
  3499  0F77  00F1               	movwf	__esp8266_print@ptr
  3500  0F78  3089               	movlw	high (STR_2| (0+32768))
  3501  0F79  00F2               	movwf	__esp8266_print@ptr+1
  3502  0F7A  120A  158A  2741  120A  158A  	fcall	__esp8266_print
  3503                           
  3504                           ;ESP_lib.h: 146: _esp8266_print(softpass);
  3505  0F7F  0876               	movf	esp8266_config_softAP@softpass,w
  3506  0F80  00F1               	movwf	__esp8266_print@ptr
  3507  0F81  0877               	movf	esp8266_config_softAP@softpass+1,w
  3508  0F82  00F2               	movwf	__esp8266_print@ptr+1
  3509  0F83  120A  158A  2741  120A  158A  	fcall	__esp8266_print
  3510                           
  3511                           ;ESP_lib.h: 147: _esp8266_print("\",5,3\r\n");
  3512  0F88  30B0               	movlw	low (STR_3| (0+32768))
  3513  0F89  00F1               	movwf	__esp8266_print@ptr
  3514  0F8A  3089               	movlw	high (STR_3| (0+32768))
  3515  0F8B  00F2               	movwf	__esp8266_print@ptr+1
  3516  0F8C  120A  158A  2741  120A  158A  	fcall	__esp8266_print
  3517                           
  3518                           ;ESP_lib.h: 148: return _esp8266_waitResponse();
  3519                           ;	Return value of _esp8266_config_softAP is never used
  3520  0F91  120A  118A  237E   	fcall	__esp8266_waitResponse
  3521  0F94  0008               	return
  3522  0F95                     __end_of_esp8266_config_softAP:	
  3523                           
  3524                           	psect	text15
  3525  0F41                     __ptext15:	
  3526 ;; *************** function __esp8266_print *****************
  3527 ;; Defined at:
  3528 ;;		line 448 in file "ESP_lib.h"
  3529 ;; Parameters:    Size  Location     Type
  3530 ;;  ptr             2    1[COMMON] PTR const unsigned char 
  3531 ;;		 -> STR_63(9), STR_61(9), STR_55(9), STR_54(8), 
  3532 ;;		 -> STR_34(3), STR_33(14), esp8266_send@length_str(6), STR_31(3), 
  3533 ;;		 -> esp8266_start@port_str(5), STR_29(3), STR_28(4), STR_27(4), 
  3534 ;;		 -> STR_26(4), STR_25(14), STR_23(11), STR_21(11), 
  3535 ;;		 -> STR_19(16), STR_18(4), STR_17(4), STR_16(11), 
  3536 ;;		 -> STR_15(3), STR_14(11), STR_12(3), STR_11(4), 
  3537 ;;		 -> STR_10(9), STR_9(5), STR_3(8), STR_2(4), 
  3538 ;;		 -> STR_1(11), 
  3539 ;; Auto vars:     Size  Location     Type
  3540 ;;		None
  3541 ;; Return value:  Size  Location     Type
  3542 ;;                  1    wreg      void 
  3543 ;; Registers used:
  3544 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3545 ;; Tracked objects:
  3546 ;;		On entry : 0/0
  3547 ;;		On exit  : 0/0
  3548 ;;		Unchanged: 0/0
  3549 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3550 ;;      Params:         2       0       0       0       0
  3551 ;;      Locals:         0       0       0       0       0
  3552 ;;      Temps:          0       0       0       0       0
  3553 ;;      Totals:         2       0       0       0       0
  3554 ;;Total ram usage:        2 bytes
  3555 ;; Hardware stack levels used:    1
  3556 ;; Hardware stack levels required when called:    1
  3557 ;; This function calls:
  3558 ;;		__esp8266_putch
  3559 ;; This function is called by:
  3560 ;;		_esp8266_config_softAP
  3561 ;;		_esp8266_isStarted
  3562 ;;		_esp8266_mode
  3563 ;;		_esp8266_send
  3564 ;;		_esp8266_restart
  3565 ;;		_esp8266_echoCmds
  3566 ;;		_esp8266_connect
  3567 ;;		_esp8266_close
  3568 ;;		_esp8266_disconnect
  3569 ;;		_esp8266_ip
  3570 ;;		_esp8266_start
  3571 ;; This function uses a non-reentrant model
  3572 ;;
  3573                           
  3574                           
  3575                           ;psect for function __esp8266_print
  3576  0F41                     __esp8266_print:	
  3577  0F41                     l1719:	
  3578                           ;ESP_lib.h: 449: while (*ptr != 0) {
  3579                           
  3580                           ;incstack = 0
  3581                           ; Regs used in __esp8266_print: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3582                           
  3583  0F41  0872               	movf	__esp8266_print@ptr+1,w
  3584  0F42  1283               	bcf	3,5	;RP0=0, select bank0
  3585  0F43  1303               	bcf	3,6	;RP1=0, select bank0
  3586  0F44  00FF               	movwf	127
  3587  0F45  0871               	movf	__esp8266_print@ptr,w
  3588  0F46  0084               	movwf	4
  3589  0F47  120A  158A  2000  120A  158A  	fcall	stringtab
  3590  0F4C  3A00               	xorlw	0
  3591  0F4D  1903               	btfsc	3,2
  3592  0F4E  0008               	return
  3593                           
  3594                           ;ESP_lib.h: 450: _esp8266_putch(*ptr++);
  3595  0F4F  0872               	movf	__esp8266_print@ptr+1,w
  3596  0F50  1283               	bcf	3,5	;RP0=0, select bank0
  3597  0F51  1303               	bcf	3,6	;RP1=0, select bank0
  3598  0F52  00FF               	movwf	127
  3599  0F53  0871               	movf	__esp8266_print@ptr,w
  3600  0F54  0084               	movwf	4
  3601  0F55  120A  158A  2000  120A  158A  	fcall	stringtab
  3602  0F5A  120A  158A  2630  120A  158A  	fcall	__esp8266_putch
  3603  0F5F  3001               	movlw	1
  3604  0F60  07F1               	addwf	__esp8266_print@ptr,f
  3605  0F61  1803               	skipnc
  3606  0F62  0AF2               	incf	__esp8266_print@ptr+1,f
  3607  0F63  2F41               	goto	l1719
  3608  0F64                     __end_of__esp8266_print:	
  3609                           
  3610                           	psect	text16
  3611  0E4D                     __ptext16:	
  3612 ;; *************** function _esp8266_config_server *****************
  3613 ;; Defined at:
  3614 ;;		line 160 in file "ESP_lib.h"
  3615 ;; Parameters:    Size  Location     Type
  3616 ;;		None
  3617 ;; Auto vars:     Size  Location     Type
  3618 ;;		None
  3619 ;; Return value:  Size  Location     Type
  3620 ;;                  1    wreg      unsigned char 
  3621 ;; Registers used:
  3622 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3623 ;; Tracked objects:
  3624 ;;		On entry : 0/0
  3625 ;;		On exit  : 0/0
  3626 ;;		Unchanged: 0/0
  3627 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3628 ;;      Params:         0       0       0       0       0
  3629 ;;      Locals:         0       0       0       0       0
  3630 ;;      Temps:          0       0       0       0       0
  3631 ;;      Totals:         0       0       0       0       0
  3632 ;;Total ram usage:        0 bytes
  3633 ;; Hardware stack levels used:    1
  3634 ;; Hardware stack levels required when called:    2
  3635 ;; This function calls:
  3636 ;;		_ESP8266_send_string
  3637 ;;		__esp8266_waitResponse
  3638 ;; This function is called by:
  3639 ;;		_main
  3640 ;; This function uses a non-reentrant model
  3641 ;;
  3642                           
  3643                           
  3644                           ;psect for function _esp8266_config_server
  3645  0E4D                     _esp8266_config_server:	
  3646                           
  3647                           ;ESP_lib.h: 161: ESP8266_send_string("AT+CIPSERVER=1,80\r\n");
  3648                           
  3649                           ;incstack = 0
  3650                           ; Regs used in _esp8266_config_server: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+csta
      +                          ck]
  3651  0E4D  302C               	movlw	low (STR_5| (0+32768))
  3652  0E4E  00F1               	movwf	ESP8266_send_string@st_pt
  3653  0E4F  3088               	movlw	high (STR_5| (0+32768))
  3654  0E50  00F2               	movwf	ESP8266_send_string@st_pt+1
  3655  0E51  120A  158A  271E  120A  158A  	fcall	_ESP8266_send_string
  3656                           
  3657                           ;ESP_lib.h: 162: return _esp8266_waitResponse();
  3658                           ;	Return value of _esp8266_config_server is never used
  3659  0E56  120A  118A  237E   	fcall	__esp8266_waitResponse
  3660  0E59  0008               	return
  3661  0E5A                     __end_of_esp8266_config_server:	
  3662                           
  3663                           	psect	text17
  3664  037E                     __ptext17:	
  3665 ;; *************** function __esp8266_waitResponse *****************
  3666 ;; Defined at:
  3667 ;;		line 498 in file "ESP_lib.h"
  3668 ;; Parameters:    Size  Location     Type
  3669 ;;		None
  3670 ;; Auto vars:     Size  Location     Type
  3671 ;;  i               1   27[BANK0 ] unsigned char 
  3672 ;;  strings        16    0[BANK0 ] PTR const unsigned char 
  3673 ;;		 -> STR_46(9), STR_45(10), STR_44(7), STR_43(7), 
  3674 ;;		 -> STR_42(10), STR_41(5), STR_40(6), STR_39(3), 
  3675 ;;  so_far          8   16[BANK0 ] unsigned char [8]
  3676 ;;  continue_loo    1   26[BANK0 ] unsigned char 
  3677 ;;  response        1   25[BANK0 ] unsigned char 
  3678 ;;  received        1   24[BANK0 ] unsigned char 
  3679 ;; Return value:  Size  Location     Type
  3680 ;;                  1    wreg      unsigned char 
  3681 ;; Registers used:
  3682 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3683 ;; Tracked objects:
  3684 ;;		On entry : 0/0
  3685 ;;		On exit  : 0/0
  3686 ;;		Unchanged: 0/0
  3687 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3688 ;;      Params:         0       0       0       0       0
  3689 ;;      Locals:         0      28       0       0       0
  3690 ;;      Temps:          4       0       0       0       0
  3691 ;;      Totals:         4      28       0       0       0
  3692 ;;Total ram usage:       32 bytes
  3693 ;; Hardware stack levels used:    1
  3694 ;; Hardware stack levels required when called:    1
  3695 ;; This function calls:
  3696 ;;		__esp8266_getch
  3697 ;; This function is called by:
  3698 ;;		_esp8266_config_softAP
  3699 ;;		_esp8266_multi
  3700 ;;		_esp8266_config_server
  3701 ;;		_esp8266_isStarted
  3702 ;;		_esp8266_mode
  3703 ;;		_esp8266_send
  3704 ;;		_main
  3705 ;;		_esp8266_restart
  3706 ;;		_esp8266_connect
  3707 ;;		_esp8266_start
  3708 ;; This function uses a non-reentrant model
  3709 ;;
  3710                           
  3711                           
  3712                           ;psect for function __esp8266_waitResponse
  3713  037E                     __esp8266_waitResponse:	
  3714                           
  3715                           ;ESP_lib.h: 499: unsigned char so_far[8] = {0,0,0,0,0,0,0,0};
  3716                           
  3717                           ;incstack = 0
  3718                           ; Regs used in __esp8266_waitResponse: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+csta
      +                          ck]
  3719  037E  3030               	movlw	__esp8266_waitResponse@so_far& (0+255)
  3720  037F  0084               	movwf	4
  3721  0380  30A0               	movlw	low __esp8266_waitResponse@F2066
  3722  0381  00F0               	movwf	??__esp8266_waitResponse
  3723  0382  0804               	movf	4,w
  3724  0383  00F1               	movwf	??__esp8266_waitResponse+1
  3725  0384  3008               	movlw	8
  3726  0385  00F2               	movwf	??__esp8266_waitResponse+2
  3727  0386                     u1360:	
  3728  0386  0870               	movf	??__esp8266_waitResponse,w
  3729  0387  0084               	movwf	4
  3730  0388  1383               	bcf	3,7	;select IRP bank1
  3731  0389  0800               	movf	0,w
  3732  038A  00F3               	movwf	??__esp8266_waitResponse+3
  3733  038B  0AF0               	incf	??__esp8266_waitResponse,f
  3734  038C  0871               	movf	??__esp8266_waitResponse+1,w
  3735  038D  0084               	movwf	4
  3736  038E  0873               	movf	??__esp8266_waitResponse+3,w
  3737  038F  0080               	movwf	0
  3738  0390  0AF1               	incf	??__esp8266_waitResponse+1,f
  3739  0391  0BF2               	decfsz	??__esp8266_waitResponse+2,f
  3740  0392  2B86               	goto	u1360
  3741                           
  3742                           ;ESP_lib.h: 500: unsigned const char lengths[8] = {2,5,4,9,6,6,9,9};
  3743                           ;ESP_lib.h: 501: unsigned const char* strings[8] = {"OK", "ready", "FAIL",
  3744                           ;ESP_lib.h: 502: "no change", "Linked", "Unlink",
  3745                           ;ESP_lib.h: 503: "0,CONNECT","0,CLOSED"};
  3746  0393  3020               	movlw	__esp8266_waitResponse@strings& (0+255)
  3747  0394  0084               	movwf	4
  3748  0395  30B7               	movlw	low __esp8266_waitResponse@F2069
  3749  0396  00F0               	movwf	??__esp8266_waitResponse
  3750  0397  0804               	movf	4,w
  3751  0398  00F1               	movwf	??__esp8266_waitResponse+1
  3752  0399  3010               	movlw	16
  3753  039A  00F2               	movwf	??__esp8266_waitResponse+2
  3754  039B                     u1370:	
  3755  039B  0870               	movf	??__esp8266_waitResponse,w
  3756  039C  0084               	movwf	4
  3757  039D  1383               	bcf	3,7	;select IRP bank1
  3758  039E  0800               	movf	0,w
  3759  039F  00F3               	movwf	??__esp8266_waitResponse+3
  3760  03A0  0AF0               	incf	??__esp8266_waitResponse,f
  3761  03A1  0871               	movf	??__esp8266_waitResponse+1,w
  3762  03A2  0084               	movwf	4
  3763  03A3  0873               	movf	??__esp8266_waitResponse+3,w
  3764  03A4  0080               	movwf	0
  3765  03A5  0AF1               	incf	??__esp8266_waitResponse+1,f
  3766  03A6  0BF2               	decfsz	??__esp8266_waitResponse+2,f
  3767  03A7  2B9B               	goto	u1370
  3768                           
  3769                           ;ESP_lib.h: 504: unsigned const char responses[8] = {1, 2, 3,
  3770                           ;ESP_lib.h: 505: 4, 5, 6,
  3771                           ;ESP_lib.h: 506: 7, 8};
  3772                           ;ESP_lib.h: 507: unsigned char received;
  3773                           ;ESP_lib.h: 508: unsigned char response;
  3774                           ;ESP_lib.h: 509: bool continue_loop = 1;
  3775  03A8  1283               	bcf	3,5	;RP0=0, select bank0
  3776  03A9  1303               	bcf	3,6	;RP1=0, select bank0
  3777  03AA  01BA               	clrf	__esp8266_waitResponse@continue_loop
  3778  03AB  0ABA               	incf	__esp8266_waitResponse@continue_loop,f
  3779  03AC                     l1749:	
  3780                           ;ESP_lib.h: 510: while (continue_loop) {
  3781                           
  3782  03AC  083A               	movf	__esp8266_waitResponse@continue_loop,w
  3783  03AD  1903               	btfsc	3,2
  3784  03AE  2C13               	goto	l1751
  3785                           
  3786                           ;ESP_lib.h: 511: received = _esp8266_getch();
  3787  03AF  120A  158A  2638  120A  118A  	fcall	__esp8266_getch
  3788  03B4  00F0               	movwf	??__esp8266_waitResponse
  3789  03B5  0870               	movf	??__esp8266_waitResponse,w
  3790  03B6  1283               	bcf	3,5	;RP0=0, select bank0
  3791  03B7  1303               	bcf	3,6	;RP1=0, select bank0
  3792  03B8  00B8               	movwf	__esp8266_waitResponse@received
  3793                           
  3794                           ;ESP_lib.h: 512: for (unsigned char i = 0; i < 8; i++) {
  3795  03B9  01BB               	clrf	__esp8266_waitResponse@i
  3796  03BA                     L2:	
  3797  03BA  3008               	movlw	8
  3798  03BB  023B               	subwf	__esp8266_waitResponse@i,w
  3799  03BC  1803               	btfsc	3,0
  3800  03BD  2BAC               	goto	l1749
  3801                           
  3802                           ;ESP_lib.h: 513: if (strings[i][so_far[i]] == received) {
  3803  03BE  083B               	movf	__esp8266_waitResponse@i,w
  3804  03BF  00F0               	movwf	??__esp8266_waitResponse
  3805  03C0  0770               	addwf	??__esp8266_waitResponse,w
  3806  03C1  3E20               	addlw	(low (__esp8266_waitResponse@strings| 0))& (0+255)
  3807  03C2  0084               	movwf	4
  3808  03C3  1383               	bcf	3,7	;select IRP bank0
  3809  03C4  0800               	movf	0,w
  3810  03C5  00F1               	movwf	??__esp8266_waitResponse+1
  3811  03C6  0A84               	incf	4,f
  3812  03C7  0800               	movf	0,w
  3813  03C8  00F2               	movwf	??__esp8266_waitResponse+2
  3814  03C9  083B               	movf	__esp8266_waitResponse@i,w
  3815  03CA  3E30               	addlw	(low (__esp8266_waitResponse@so_far| 0))& (0+255)
  3816  03CB  0084               	movwf	4
  3817  03CC  0800               	movf	0,w
  3818  03CD  0771               	addwf	??__esp8266_waitResponse+1,w
  3819  03CE  0084               	movwf	4
  3820  03CF  0872               	movf	??__esp8266_waitResponse+2,w
  3821  03D0  1803               	skipnc
  3822  03D1  0A72               	incf	??__esp8266_waitResponse+2,w
  3823  03D2  00FF               	movwf	127
  3824  03D3  120A  158A  2000  120A  118A  	fcall	stringtab
  3825  03D8  0638               	xorwf	__esp8266_waitResponse@received,w
  3826  03D9  1D03               	skipz
  3827  03DA  2C09               	goto	l1743
  3828                           
  3829                           ;ESP_lib.h: 514: so_far[i]++;
  3830  03DB  3001               	movlw	1
  3831  03DC  00F0               	movwf	??__esp8266_waitResponse
  3832  03DD  083B               	movf	__esp8266_waitResponse@i,w
  3833  03DE  3E30               	addlw	(low (__esp8266_waitResponse@so_far| 0))& (0+255)
  3834  03DF  0084               	movwf	4
  3835  03E0  0870               	movf	??__esp8266_waitResponse,w
  3836  03E1  1383               	bcf	3,7	;select IRP bank0
  3837  03E2  0780               	addwf	0,f
  3838                           
  3839                           ;ESP_lib.h: 515: if (so_far[i] == lengths[i]) {
  3840  03E3  083B               	movf	__esp8266_waitResponse@i,w
  3841  03E4  3E24               	addlw	low (__esp8266_waitResponse@lengths| (0+32768))
  3842  03E5  0084               	movwf	4
  3843  03E6  3088               	movlw	high (__esp8266_waitResponse@lengths| (0+32768))
  3844  03E7  1803               	skipnc
  3845  03E8  3E01               	addlw	1
  3846  03E9  00FF               	movwf	127
  3847  03EA  120A  158A  2000  120A  118A  	fcall	stringtab
  3848  03EF  00F0               	movwf	??__esp8266_waitResponse
  3849  03F0  083B               	movf	__esp8266_waitResponse@i,w
  3850  03F1  3E30               	addlw	(low (__esp8266_waitResponse@so_far| 0))& (0+255)
  3851  03F2  0084               	movwf	4
  3852  03F3  1383               	bcf	3,7	;select IRP bank0
  3853  03F4  0800               	movf	0,w
  3854  03F5  0670               	xorwf	??__esp8266_waitResponse,w
  3855  03F6  1D03               	skipz
  3856  03F7  2C0E               	goto	l1745
  3857                           
  3858                           ;ESP_lib.h: 516: response = responses[i];
  3859  03F8  083B               	movf	__esp8266_waitResponse@i,w
  3860  03F9  3E1C               	addlw	low (__esp8266_waitResponse@responses| (0+32768))
  3861  03FA  0084               	movwf	4
  3862  03FB  3088               	movlw	high (__esp8266_waitResponse@responses| (0+32768))
  3863  03FC  1803               	skipnc
  3864  03FD  3E01               	addlw	1
  3865  03FE  00FF               	movwf	127
  3866  03FF  120A  158A  2000  120A  118A  	fcall	stringtab
  3867  0404  00F0               	movwf	??__esp8266_waitResponse
  3868  0405  0870               	movf	??__esp8266_waitResponse,w
  3869  0406  00B9               	movwf	__esp8266_waitResponse@response
  3870                           
  3871                           ;ESP_lib.h: 517: continue_loop = 0;
  3872  0407  01BA               	clrf	__esp8266_waitResponse@continue_loop
  3873                           
  3874                           ;ESP_lib.h: 518: }
  3875                           ;ESP_lib.h: 519: } else {
  3876  0408  2C0E               	goto	l1745
  3877  0409                     l1743:	
  3878                           
  3879                           ;ESP_lib.h: 520: so_far[i] = 0;
  3880  0409  083B               	movf	__esp8266_waitResponse@i,w
  3881  040A  3E30               	addlw	(low (__esp8266_waitResponse@so_far| 0))& (0+255)
  3882  040B  0084               	movwf	4
  3883  040C  1383               	bcf	3,7	;select IRP bank0
  3884  040D  0180               	clrf	0
  3885  040E                     l1745:	
  3886  040E  3001               	movlw	1
  3887  040F  00F0               	movwf	??__esp8266_waitResponse
  3888  0410  0870               	movf	??__esp8266_waitResponse,w
  3889  0411  07BB               	addwf	__esp8266_waitResponse@i,f
  3890  0412  2BBA               	goto	L2
  3891  0413                     l1751:	
  3892                           
  3893                           ;ESP_lib.h: 521: }
  3894                           ;ESP_lib.h: 522: }
  3895                           ;ESP_lib.h: 523: }
  3896                           ;ESP_lib.h: 524: return response;
  3897  0413  0839               	movf	__esp8266_waitResponse@response,w
  3898  0414  0008               	return
  3899  0415                     __end_of__esp8266_waitResponse:	
  3900                           
  3901                           	psect	text18
  3902  0E38                     __ptext18:	
  3903 ;; *************** function __esp8266_getch *****************
  3904 ;; Defined at:
  3905 ;;		line 118 in file "ESP_lib.h"
  3906 ;; Parameters:    Size  Location     Type
  3907 ;;		None
  3908 ;; Auto vars:     Size  Location     Type
  3909 ;;		None
  3910 ;; Return value:  Size  Location     Type
  3911 ;;                  1    wreg      unsigned char 
  3912 ;; Registers used:
  3913 ;;		wreg
  3914 ;; Tracked objects:
  3915 ;;		On entry : 0/0
  3916 ;;		On exit  : 0/0
  3917 ;;		Unchanged: 0/0
  3918 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3919 ;;      Params:         0       0       0       0       0
  3920 ;;      Locals:         0       0       0       0       0
  3921 ;;      Temps:          0       0       0       0       0
  3922 ;;      Totals:         0       0       0       0       0
  3923 ;;Total ram usage:        0 bytes
  3924 ;; Hardware stack levels used:    1
  3925 ;; This function calls:
  3926 ;;		Nothing
  3927 ;; This function is called by:
  3928 ;;		_esp8266_send
  3929 ;;		_revClient
  3930 ;;		__esp8266_waitFor
  3931 ;;		__esp8266_waitResponse
  3932 ;;		_esp8266_get_stationIP
  3933 ;;		_esp8266_ip
  3934 ;;		_esp8266_receive
  3935 ;; This function uses a non-reentrant model
  3936 ;;
  3937                           
  3938                           
  3939                           ;psect for function __esp8266_getch
  3940  0E38                     __esp8266_getch:	
  3941                           
  3942                           ;ESP_lib.h: 120: if(OERR)
  3943                           
  3944                           ;incstack = 0
  3945                           ; Regs used in __esp8266_getch: [wreg]
  3946  0E38  1283               	bcf	3,5	;RP0=0, select bank0
  3947  0E39  1303               	bcf	3,6	;RP1=0, select bank0
  3948  0E3A  1C98               	btfss	24,1	;volatile
  3949  0E3B  2E3E               	goto	l113
  3950                           
  3951                           ;ESP_lib.h: 121: {
  3952                           ;ESP_lib.h: 122: CREN = 0;
  3953  0E3C  1218               	bcf	24,4	;volatile
  3954                           
  3955                           ;ESP_lib.h: 123: CREN = 1;
  3956  0E3D  1618               	bsf	24,4	;volatile
  3957  0E3E                     l113:	
  3958                           ;ESP_lib.h: 124: }
  3959                           ;ESP_lib.h: 125: while(!RCIF);
  3960                           
  3961  0E3E  1E8C               	btfss	12,5	;volatile
  3962  0E3F  2E3E               	goto	l113
  3963                           
  3964                           ;ESP_lib.h: 126: return RCREG;
  3965  0E40  081A               	movf	26,w	;volatile
  3966  0E41  0008               	return
  3967  0E42                     __end_of__esp8266_getch:	
  3968                           
  3969                           	psect	text19
  3970  0F1E                     __ptext19:	
  3971 ;; *************** function _ESP8266_send_string *****************
  3972 ;; Defined at:
  3973 ;;		line 132 in file "ESP_lib.h"
  3974 ;; Parameters:    Size  Location     Type
  3975 ;;  st_pt           2    1[COMMON] PTR unsigned char 
  3976 ;;		 -> STR_6(11), STR_5(20), STR_4(14), 
  3977 ;; Auto vars:     Size  Location     Type
  3978 ;;		None
  3979 ;; Return value:  Size  Location     Type
  3980 ;;                  1    wreg      void 
  3981 ;; Registers used:
  3982 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3983 ;; Tracked objects:
  3984 ;;		On entry : 0/0
  3985 ;;		On exit  : 0/0
  3986 ;;		Unchanged: 0/0
  3987 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3988 ;;      Params:         2       0       0       0       0
  3989 ;;      Locals:         0       0       0       0       0
  3990 ;;      Temps:          0       0       0       0       0
  3991 ;;      Totals:         2       0       0       0       0
  3992 ;;Total ram usage:        2 bytes
  3993 ;; Hardware stack levels used:    1
  3994 ;; Hardware stack levels required when called:    1
  3995 ;; This function calls:
  3996 ;;		__esp8266_putch
  3997 ;; This function is called by:
  3998 ;;		_esp8266_multi
  3999 ;;		_esp8266_config_server
  4000 ;;		_esp8266_get_stationIP
  4001 ;; This function uses a non-reentrant model
  4002 ;;
  4003                           
  4004                           
  4005                           ;psect for function _ESP8266_send_string
  4006  0F1E                     _ESP8266_send_string:	
  4007  0F1E                     l1711:	
  4008                           ;ESP_lib.h: 134: while(*st_pt)
  4009                           
  4010                           ;incstack = 0
  4011                           ; Regs used in _ESP8266_send_string: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack
      +                          ]
  4012                           
  4013  0F1E  0872               	movf	ESP8266_send_string@st_pt+1,w
  4014  0F1F  1283               	bcf	3,5	;RP0=0, select bank0
  4015  0F20  1303               	bcf	3,6	;RP1=0, select bank0
  4016  0F21  00FF               	movwf	127
  4017  0F22  0871               	movf	ESP8266_send_string@st_pt,w
  4018  0F23  0084               	movwf	4
  4019  0F24  120A  158A  2000  120A  158A  	fcall	stringtab
  4020  0F29  3A00               	xorlw	0
  4021  0F2A  1903               	btfsc	3,2
  4022  0F2B  0008               	return
  4023                           
  4024                           ;ESP_lib.h: 135: _esp8266_putch(*st_pt++);
  4025  0F2C  0872               	movf	ESP8266_send_string@st_pt+1,w
  4026  0F2D  1283               	bcf	3,5	;RP0=0, select bank0
  4027  0F2E  1303               	bcf	3,6	;RP1=0, select bank0
  4028  0F2F  00FF               	movwf	127
  4029  0F30  0871               	movf	ESP8266_send_string@st_pt,w
  4030  0F31  0084               	movwf	4
  4031  0F32  120A  158A  2000  120A  158A  	fcall	stringtab
  4032  0F37  120A  158A  2630  120A  158A  	fcall	__esp8266_putch
  4033  0F3C  3001               	movlw	1
  4034  0F3D  07F1               	addwf	ESP8266_send_string@st_pt,f
  4035  0F3E  1803               	skipnc
  4036  0F3F  0AF2               	incf	ESP8266_send_string@st_pt+1,f
  4037  0F40  2F1E               	goto	l1711
  4038  0F41                     __end_of_ESP8266_send_string:	
  4039                           
  4040                           	psect	text20
  4041  0E30                     __ptext20:	
  4042 ;; *************** function __esp8266_putch *****************
  4043 ;; Defined at:
  4044 ;;		line 110 in file "ESP_lib.h"
  4045 ;; Parameters:    Size  Location     Type
  4046 ;;  bt              1    wreg     unsigned char 
  4047 ;; Auto vars:     Size  Location     Type
  4048 ;;  bt              1    0[COMMON] unsigned char 
  4049 ;; Return value:  Size  Location     Type
  4050 ;;                  1    wreg      void 
  4051 ;; Registers used:
  4052 ;;		wreg
  4053 ;; Tracked objects:
  4054 ;;		On entry : 0/0
  4055 ;;		On exit  : 0/0
  4056 ;;		Unchanged: 0/0
  4057 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4058 ;;      Params:         0       0       0       0       0
  4059 ;;      Locals:         1       0       0       0       0
  4060 ;;      Temps:          0       0       0       0       0
  4061 ;;      Totals:         1       0       0       0       0
  4062 ;;Total ram usage:        1 bytes
  4063 ;; Hardware stack levels used:    1
  4064 ;; This function calls:
  4065 ;;		Nothing
  4066 ;; This function is called by:
  4067 ;;		_ESP8266_send_string
  4068 ;;		_esp8266_mode
  4069 ;;		__esp8266_print
  4070 ;;		_esp8266_echoCmds
  4071 ;; This function uses a non-reentrant model
  4072 ;;
  4073                           
  4074                           
  4075                           ;psect for function __esp8266_putch
  4076  0E30                     __esp8266_putch:	
  4077                           
  4078                           ;incstack = 0
  4079                           ; Regs used in __esp8266_putch: [wreg]
  4080                           ;__esp8266_putch@bt stored from wreg
  4081  0E30  00F0               	movwf	__esp8266_putch@bt
  4082  0E31                     l106:	
  4083                           ;ESP_lib.h: 112: while(!TXIF);
  4084                           
  4085  0E31  1283               	bcf	3,5	;RP0=0, select bank0
  4086  0E32  1303               	bcf	3,6	;RP1=0, select bank0
  4087  0E33  1E0C               	btfss	12,4	;volatile
  4088  0E34  2E31               	goto	l106
  4089                           
  4090                           ;ESP_lib.h: 113: TXREG = bt;
  4091  0E35  0870               	movf	__esp8266_putch@bt,w
  4092  0E36  0099               	movwf	25	;volatile
  4093  0E37  0008               	return
  4094  0E38                     __end_of__esp8266_putch:	
  4095                           
  4096                           	psect	text21
  4097  04E6                     __ptext21:	
  4098 ;; *************** function _UART_Init *****************
  4099 ;; Defined at:
  4100 ;;		line 63 in file "ESP_lib.h"
  4101 ;; Parameters:    Size  Location     Type
  4102 ;;  baudrate        4    6[BANK0 ] const long 
  4103 ;; Auto vars:     Size  Location     Type
  4104 ;;  x               2    9[COMMON] unsigned int 
  4105 ;; Return value:  Size  Location     Type
  4106 ;;                  1    wreg      unsigned char 
  4107 ;; Registers used:
  4108 ;;		wreg, status,2, status,0, pclath, cstack
  4109 ;; Tracked objects:
  4110 ;;		On entry : 0/0
  4111 ;;		On exit  : 0/0
  4112 ;;		Unchanged: 0/0
  4113 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4114 ;;      Params:         0       4       0       0       0
  4115 ;;      Locals:         2       0       0       0       0
  4116 ;;      Temps:          0      12       0       0       0
  4117 ;;      Totals:         2      16       0       0       0
  4118 ;;Total ram usage:       18 bytes
  4119 ;; Hardware stack levels used:    1
  4120 ;; Hardware stack levels required when called:    1
  4121 ;; This function calls:
  4122 ;;		___aldiv
  4123 ;; This function is called by:
  4124 ;;		_main
  4125 ;; This function uses a non-reentrant model
  4126 ;;
  4127                           
  4128                           
  4129                           ;psect for function _UART_Init
  4130  04E6                     _UART_Init:	
  4131                           
  4132                           ;ESP_lib.h: 65: unsigned int x;
  4133                           ;ESP_lib.h: 66: x = (11059200 - baudrate*64)/(baudrate*64);
  4134                           
  4135                           ;incstack = 0
  4136                           ; Regs used in _UART_Init: [wreg+status,2+status,0+pclath+cstack]
  4137  04E6  1283               	bcf	3,5	;RP0=0, select bank0
  4138  04E7  1303               	bcf	3,6	;RP1=0, select bank0
  4139  04E8  0826               	movf	UART_Init@baudrate,w
  4140  04E9  00AA               	movwf	??_UART_Init
  4141  04EA  0827               	movf	UART_Init@baudrate+1,w
  4142  04EB  00AB               	movwf	??_UART_Init+1
  4143  04EC  0828               	movf	UART_Init@baudrate+2,w
  4144  04ED  00AC               	movwf	??_UART_Init+2
  4145  04EE  0829               	movf	UART_Init@baudrate+3,w
  4146  04EF  00AD               	movwf	??_UART_Init+3
  4147  04F0  3006               	movlw	6
  4148  04F1                     u1755:	
  4149  04F1  1003               	clrc
  4150  04F2  0DAA               	rlf	??_UART_Init,f
  4151  04F3  0DAB               	rlf	??_UART_Init+1,f
  4152  04F4  0DAC               	rlf	??_UART_Init+2,f
  4153  04F5  0DAD               	rlf	??_UART_Init+3,f
  4154  04F6  3EFF               	addlw	-1
  4155  04F7  1D03               	skipz
  4156  04F8  2CF1               	goto	u1755
  4157  04F9  082D               	movf	??_UART_Init+3,w
  4158  04FA  00F3               	movwf	___aldiv@divisor+3
  4159  04FB  082C               	movf	??_UART_Init+2,w
  4160  04FC  00F2               	movwf	___aldiv@divisor+2
  4161  04FD  082B               	movf	??_UART_Init+1,w
  4162  04FE  00F1               	movwf	___aldiv@divisor+1
  4163  04FF  082A               	movf	??_UART_Init,w
  4164  0500  00F0               	movwf	___aldiv@divisor
  4165  0501  3000               	movlw	0
  4166  0502  00AE               	movwf	??_UART_Init+4
  4167  0503  30C0               	movlw	192
  4168  0504  00AF               	movwf	??_UART_Init+5
  4169  0505  30A8               	movlw	168
  4170  0506  00B0               	movwf	??_UART_Init+6
  4171  0507  3000               	movlw	0
  4172  0508  00B1               	movwf	??_UART_Init+7
  4173  0509  0826               	movf	UART_Init@baudrate,w
  4174  050A  00B2               	movwf	??_UART_Init+8
  4175  050B  0827               	movf	UART_Init@baudrate+1,w
  4176  050C  00B3               	movwf	??_UART_Init+9
  4177  050D  0828               	movf	UART_Init@baudrate+2,w
  4178  050E  00B4               	movwf	??_UART_Init+10
  4179  050F  0829               	movf	UART_Init@baudrate+3,w
  4180  0510  00B5               	movwf	??_UART_Init+11
  4181  0511  3006               	movlw	6
  4182  0512                     u1765:	
  4183  0512  1003               	clrc
  4184  0513  0DB2               	rlf	??_UART_Init+8,f
  4185  0514  0DB3               	rlf	??_UART_Init+9,f
  4186  0515  0DB4               	rlf	??_UART_Init+10,f
  4187  0516  0DB5               	rlf	??_UART_Init+11,f
  4188  0517  3EFF               	addlw	-1
  4189  0518  1D03               	skipz
  4190  0519  2D12               	goto	u1765
  4191  051A  09B2               	comf	??_UART_Init+8,f
  4192  051B  09B3               	comf	??_UART_Init+9,f
  4193  051C  09B4               	comf	??_UART_Init+10,f
  4194  051D  09B5               	comf	??_UART_Init+11,f
  4195  051E  0AB2               	incf	??_UART_Init+8,f
  4196  051F  1903               	skipnz
  4197  0520  0AB3               	incf	??_UART_Init+9,f
  4198  0521  1903               	skipnz
  4199  0522  0AB4               	incf	??_UART_Init+10,f
  4200  0523  1903               	skipnz
  4201  0524  0AB5               	incf	??_UART_Init+11,f
  4202  0525  0832               	movf	??_UART_Init+8,w
  4203  0526  07AE               	addwf	??_UART_Init+4,f
  4204  0527  0833               	movf	??_UART_Init+9,w
  4205  0528  1803               	skipnc
  4206  0529  0F33               	incfsz	??_UART_Init+9,w
  4207  052A  2D2C               	goto	u1770
  4208  052B  2D2D               	goto	u1771
  4209  052C                     u1770:	
  4210  052C  07AF               	addwf	??_UART_Init+5,f
  4211  052D                     u1771:	
  4212  052D  0834               	movf	??_UART_Init+10,w
  4213  052E  1803               	skipnc
  4214  052F  0F34               	incfsz	??_UART_Init+10,w
  4215  0530  2D32               	goto	u1772
  4216  0531  2D33               	goto	u1773
  4217  0532                     u1772:	
  4218  0532  07B0               	addwf	??_UART_Init+6,f
  4219  0533                     u1773:	
  4220  0533  0835               	movf	??_UART_Init+11,w
  4221  0534  1803               	skipnc
  4222  0535  0A35               	incf	??_UART_Init+11,w
  4223  0536  07B1               	addwf	??_UART_Init+7,f
  4224  0537  0831               	movf	??_UART_Init+7,w
  4225  0538  00F7               	movwf	___aldiv@dividend+3
  4226  0539  0830               	movf	??_UART_Init+6,w
  4227  053A  00F6               	movwf	___aldiv@dividend+2
  4228  053B  082F               	movf	??_UART_Init+5,w
  4229  053C  00F5               	movwf	___aldiv@dividend+1
  4230  053D  082E               	movf	??_UART_Init+4,w
  4231  053E  00F4               	movwf	___aldiv@dividend
  4232  053F  120A  118A  225F  120A  118A  	fcall	___aldiv
  4233  0544  0871               	movf	?___aldiv+1,w
  4234  0545  00FA               	movwf	UART_Init@x+1
  4235  0546  0870               	movf	?___aldiv,w
  4236  0547  00F9               	movwf	UART_Init@x
  4237                           
  4238                           ;ESP_lib.h: 67: if(x>255)
  4239  0548  3001               	movlw	1
  4240  0549  027A               	subwf	UART_Init@x+1,w
  4241  054A  3000               	movlw	0
  4242  054B  1903               	skipnz
  4243  054C  0279               	subwf	UART_Init@x,w
  4244  054D  1C03               	skipc
  4245  054E  2DB4               	goto	l1951
  4246                           
  4247                           ;ESP_lib.h: 68: {
  4248                           ;ESP_lib.h: 69: x = (11059200 - baudrate*16)/(baudrate*16);
  4249  054F  1283               	bcf	3,5	;RP0=0, select bank0
  4250  0550  1303               	bcf	3,6	;RP1=0, select bank0
  4251  0551  0826               	movf	UART_Init@baudrate,w
  4252  0552  00AA               	movwf	??_UART_Init
  4253  0553  0827               	movf	UART_Init@baudrate+1,w
  4254  0554  00AB               	movwf	??_UART_Init+1
  4255  0555  0828               	movf	UART_Init@baudrate+2,w
  4256  0556  00AC               	movwf	??_UART_Init+2
  4257  0557  0829               	movf	UART_Init@baudrate+3,w
  4258  0558  00AD               	movwf	??_UART_Init+3
  4259  0559  3004               	movlw	4
  4260  055A                     u1795:	
  4261  055A  1003               	clrc
  4262  055B  0DAA               	rlf	??_UART_Init,f
  4263  055C  0DAB               	rlf	??_UART_Init+1,f
  4264  055D  0DAC               	rlf	??_UART_Init+2,f
  4265  055E  0DAD               	rlf	??_UART_Init+3,f
  4266  055F  3EFF               	addlw	-1
  4267  0560  1D03               	skipz
  4268  0561  2D5A               	goto	u1795
  4269  0562  082D               	movf	??_UART_Init+3,w
  4270  0563  00F3               	movwf	___aldiv@divisor+3
  4271  0564  082C               	movf	??_UART_Init+2,w
  4272  0565  00F2               	movwf	___aldiv@divisor+2
  4273  0566  082B               	movf	??_UART_Init+1,w
  4274  0567  00F1               	movwf	___aldiv@divisor+1
  4275  0568  082A               	movf	??_UART_Init,w
  4276  0569  00F0               	movwf	___aldiv@divisor
  4277  056A  3000               	movlw	0
  4278  056B  00AE               	movwf	??_UART_Init+4
  4279  056C  30C0               	movlw	192
  4280  056D  00AF               	movwf	??_UART_Init+5
  4281  056E  30A8               	movlw	168
  4282  056F  00B0               	movwf	??_UART_Init+6
  4283  0570  3000               	movlw	0
  4284  0571  00B1               	movwf	??_UART_Init+7
  4285  0572  0826               	movf	UART_Init@baudrate,w
  4286  0573  00B2               	movwf	??_UART_Init+8
  4287  0574  0827               	movf	UART_Init@baudrate+1,w
  4288  0575  00B3               	movwf	??_UART_Init+9
  4289  0576  0828               	movf	UART_Init@baudrate+2,w
  4290  0577  00B4               	movwf	??_UART_Init+10
  4291  0578  0829               	movf	UART_Init@baudrate+3,w
  4292  0579  00B5               	movwf	??_UART_Init+11
  4293  057A  3004               	movlw	4
  4294  057B                     u1805:	
  4295  057B  1003               	clrc
  4296  057C  0DB2               	rlf	??_UART_Init+8,f
  4297  057D  0DB3               	rlf	??_UART_Init+9,f
  4298  057E  0DB4               	rlf	??_UART_Init+10,f
  4299  057F  0DB5               	rlf	??_UART_Init+11,f
  4300  0580  3EFF               	addlw	-1
  4301  0581  1D03               	skipz
  4302  0582  2D7B               	goto	u1805
  4303  0583  09B2               	comf	??_UART_Init+8,f
  4304  0584  09B3               	comf	??_UART_Init+9,f
  4305  0585  09B4               	comf	??_UART_Init+10,f
  4306  0586  09B5               	comf	??_UART_Init+11,f
  4307  0587  0AB2               	incf	??_UART_Init+8,f
  4308  0588  1903               	skipnz
  4309  0589  0AB3               	incf	??_UART_Init+9,f
  4310  058A  1903               	skipnz
  4311  058B  0AB4               	incf	??_UART_Init+10,f
  4312  058C  1903               	skipnz
  4313  058D  0AB5               	incf	??_UART_Init+11,f
  4314  058E  0832               	movf	??_UART_Init+8,w
  4315  058F  07AE               	addwf	??_UART_Init+4,f
  4316  0590  0833               	movf	??_UART_Init+9,w
  4317  0591  1803               	skipnc
  4318  0592  0F33               	incfsz	??_UART_Init+9,w
  4319  0593  2D95               	goto	u1810
  4320  0594  2D96               	goto	u1811
  4321  0595                     u1810:	
  4322  0595  07AF               	addwf	??_UART_Init+5,f
  4323  0596                     u1811:	
  4324  0596  0834               	movf	??_UART_Init+10,w
  4325  0597  1803               	skipnc
  4326  0598  0F34               	incfsz	??_UART_Init+10,w
  4327  0599  2D9B               	goto	u1812
  4328  059A  2D9C               	goto	u1813
  4329  059B                     u1812:	
  4330  059B  07B0               	addwf	??_UART_Init+6,f
  4331  059C                     u1813:	
  4332  059C  0835               	movf	??_UART_Init+11,w
  4333  059D  1803               	skipnc
  4334  059E  0A35               	incf	??_UART_Init+11,w
  4335  059F  07B1               	addwf	??_UART_Init+7,f
  4336  05A0  0831               	movf	??_UART_Init+7,w
  4337  05A1  00F7               	movwf	___aldiv@dividend+3
  4338  05A2  0830               	movf	??_UART_Init+6,w
  4339  05A3  00F6               	movwf	___aldiv@dividend+2
  4340  05A4  082F               	movf	??_UART_Init+5,w
  4341  05A5  00F5               	movwf	___aldiv@dividend+1
  4342  05A6  082E               	movf	??_UART_Init+4,w
  4343  05A7  00F4               	movwf	___aldiv@dividend
  4344  05A8  120A  118A  225F  120A  118A  	fcall	___aldiv
  4345  05AD  0871               	movf	?___aldiv+1,w
  4346  05AE  00FA               	movwf	UART_Init@x+1
  4347  05AF  0870               	movf	?___aldiv,w
  4348  05B0  00F9               	movwf	UART_Init@x
  4349                           
  4350                           ;ESP_lib.h: 70: BRGH = 1;
  4351  05B1  1683               	bsf	3,5	;RP0=1, select bank1
  4352  05B2  1303               	bcf	3,6	;RP1=0, select bank1
  4353  05B3  1518               	bsf	24,2	;volatile
  4354  05B4                     l1951:	
  4355                           
  4356                           ;ESP_lib.h: 71: }
  4357                           ;ESP_lib.h: 72: if(x<256)
  4358  05B4  3001               	movlw	1
  4359  05B5  027A               	subwf	UART_Init@x+1,w
  4360  05B6  3000               	movlw	0
  4361  05B7  1903               	skipnz
  4362  05B8  0279               	subwf	UART_Init@x,w
  4363  05B9  1803               	skipnc
  4364  05BA  0008               	return
  4365                           
  4366                           ;ESP_lib.h: 73: {
  4367                           ;ESP_lib.h: 74: SPBRG = x;
  4368  05BB  0879               	movf	UART_Init@x,w
  4369  05BC  1683               	bsf	3,5	;RP0=1, select bank1
  4370  05BD  1303               	bcf	3,6	;RP1=0, select bank1
  4371  05BE  0099               	movwf	25	;volatile
  4372                           
  4373                           ;ESP_lib.h: 75: SYNC = 0;
  4374  05BF  1218               	bcf	24,4	;volatile
  4375                           
  4376                           ;ESP_lib.h: 76: SPEN = 1;
  4377  05C0  1283               	bcf	3,5	;RP0=0, select bank0
  4378  05C1  1303               	bcf	3,6	;RP1=0, select bank0
  4379  05C2  1798               	bsf	24,7	;volatile
  4380                           
  4381                           ;ESP_lib.h: 77: TRISC7 = 1;
  4382  05C3  1683               	bsf	3,5	;RP0=1, select bank1
  4383  05C4  1303               	bcf	3,6	;RP1=0, select bank1
  4384  05C5  1787               	bsf	7,7	;volatile
  4385                           
  4386                           ;ESP_lib.h: 78: TRISC6 = 1;
  4387  05C6  1707               	bsf	7,6	;volatile
  4388                           
  4389                           ;ESP_lib.h: 79: CREN = 1;
  4390  05C7  1283               	bcf	3,5	;RP0=0, select bank0
  4391  05C8  1303               	bcf	3,6	;RP1=0, select bank0
  4392  05C9  1618               	bsf	24,4	;volatile
  4393                           
  4394                           ;ESP_lib.h: 80: TXEN = 1;
  4395  05CA  1683               	bsf	3,5	;RP0=1, select bank1
  4396  05CB  1303               	bcf	3,6	;RP1=0, select bank1
  4397  05CC  1698               	bsf	24,5	;volatile
  4398                           
  4399                           ;ESP_lib.h: 81: return 1;
  4400                           ;	Return value of _UART_Init is never used
  4401  05CD  0008               	return
  4402  05CE                     __end_of_UART_Init:	
  4403                           ;ESP_lib.h: 82: }
  4404                           ;ESP_lib.h: 83: return 0;
  4405                           ;	Return value of _UART_Init is never used
  4406                           
  4407                           
  4408                           	psect	text22
  4409  025F                     __ptext22:	
  4410 ;; *************** function ___aldiv *****************
  4411 ;; Defined at:
  4412 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\aldiv.c"
  4413 ;; Parameters:    Size  Location     Type
  4414 ;;  divisor         4    0[COMMON] long 
  4415 ;;  dividend        4    4[COMMON] long 
  4416 ;; Auto vars:     Size  Location     Type
  4417 ;;  quotient        4    2[BANK0 ] long 
  4418 ;;  sign            1    1[BANK0 ] unsigned char 
  4419 ;;  counter         1    0[BANK0 ] unsigned char 
  4420 ;; Return value:  Size  Location     Type
  4421 ;;                  4    0[COMMON] long 
  4422 ;; Registers used:
  4423 ;;		wreg, status,2, status,0
  4424 ;; Tracked objects:
  4425 ;;		On entry : 0/0
  4426 ;;		On exit  : 0/0
  4427 ;;		Unchanged: 0/0
  4428 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4429 ;;      Params:         8       0       0       0       0
  4430 ;;      Locals:         0       6       0       0       0
  4431 ;;      Temps:          1       0       0       0       0
  4432 ;;      Totals:         9       6       0       0       0
  4433 ;;Total ram usage:       15 bytes
  4434 ;; Hardware stack levels used:    1
  4435 ;; This function calls:
  4436 ;;		Nothing
  4437 ;; This function is called by:
  4438 ;;		_UART_Init
  4439 ;; This function uses a non-reentrant model
  4440 ;;
  4441                           
  4442                           
  4443                           ;psect for function ___aldiv
  4444  025F                     ___aldiv:	
  4445                           
  4446                           ;incstack = 0
  4447                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  4448  025F  1283               	bcf	3,5	;RP0=0, select bank0
  4449  0260  1303               	bcf	3,6	;RP1=0, select bank0
  4450  0261  01A1               	clrf	___aldiv@sign
  4451  0262  1FF3               	btfss	___aldiv@divisor+3,7
  4452  0263  2A71               	goto	l428
  4453  0264  09F0               	comf	___aldiv@divisor,f
  4454  0265  09F1               	comf	___aldiv@divisor+1,f
  4455  0266  09F2               	comf	___aldiv@divisor+2,f
  4456  0267  09F3               	comf	___aldiv@divisor+3,f
  4457  0268  0AF0               	incf	___aldiv@divisor,f
  4458  0269  1903               	skipnz
  4459  026A  0AF1               	incf	___aldiv@divisor+1,f
  4460  026B  1903               	skipnz
  4461  026C  0AF2               	incf	___aldiv@divisor+2,f
  4462  026D  1903               	skipnz
  4463  026E  0AF3               	incf	___aldiv@divisor+3,f
  4464  026F  01A1               	clrf	___aldiv@sign
  4465  0270  0AA1               	incf	___aldiv@sign,f
  4466  0271                     l428:	
  4467  0271  1FF7               	btfss	___aldiv@dividend+3,7
  4468  0272  2A82               	goto	l1873
  4469  0273  09F4               	comf	___aldiv@dividend,f
  4470  0274  09F5               	comf	___aldiv@dividend+1,f
  4471  0275  09F6               	comf	___aldiv@dividend+2,f
  4472  0276  09F7               	comf	___aldiv@dividend+3,f
  4473  0277  0AF4               	incf	___aldiv@dividend,f
  4474  0278  1903               	skipnz
  4475  0279  0AF5               	incf	___aldiv@dividend+1,f
  4476  027A  1903               	skipnz
  4477  027B  0AF6               	incf	___aldiv@dividend+2,f
  4478  027C  1903               	skipnz
  4479  027D  0AF7               	incf	___aldiv@dividend+3,f
  4480  027E  3001               	movlw	1
  4481  027F  00F8               	movwf	??___aldiv
  4482  0280  0878               	movf	??___aldiv,w
  4483  0281  06A1               	xorwf	___aldiv@sign,f
  4484  0282                     l1873:	
  4485  0282  3000               	movlw	0
  4486  0283  00A5               	movwf	___aldiv@quotient+3
  4487  0284  3000               	movlw	0
  4488  0285  00A4               	movwf	___aldiv@quotient+2
  4489  0286  3000               	movlw	0
  4490  0287  00A3               	movwf	___aldiv@quotient+1
  4491  0288  3000               	movlw	0
  4492  0289  00A2               	movwf	___aldiv@quotient
  4493  028A  0873               	movf	___aldiv@divisor+3,w
  4494  028B  0472               	iorwf	___aldiv@divisor+2,w
  4495  028C  0471               	iorwf	___aldiv@divisor+1,w
  4496  028D  0470               	iorwf	___aldiv@divisor,w
  4497  028E  1903               	skipnz
  4498  028F  2AD7               	goto	l1895
  4499  0290  01A0               	clrf	___aldiv@counter
  4500  0291  0AA0               	incf	___aldiv@counter,f
  4501  0292                     l1881:	
  4502  0292  1BF3               	btfsc	___aldiv@divisor+3,7
  4503  0293  2AA2               	goto	l1883
  4504  0294  3001               	movlw	1
  4505  0295  00F8               	movwf	??___aldiv
  4506  0296                     u1615:	
  4507  0296  1003               	clrc
  4508  0297  0DF0               	rlf	___aldiv@divisor,f
  4509  0298  0DF1               	rlf	___aldiv@divisor+1,f
  4510  0299  0DF2               	rlf	___aldiv@divisor+2,f
  4511  029A  0DF3               	rlf	___aldiv@divisor+3,f
  4512  029B  0BF8               	decfsz	??___aldiv,f
  4513  029C  2A96               	goto	u1615
  4514  029D  3001               	movlw	1
  4515  029E  00F8               	movwf	??___aldiv
  4516  029F  0878               	movf	??___aldiv,w
  4517  02A0  07A0               	addwf	___aldiv@counter,f
  4518  02A1  2A92               	goto	l1881
  4519  02A2                     l1883:	
  4520  02A2  3001               	movlw	1
  4521  02A3  00F8               	movwf	??___aldiv
  4522  02A4                     u1635:	
  4523  02A4  1003               	clrc
  4524  02A5  0DA2               	rlf	___aldiv@quotient,f
  4525  02A6  0DA3               	rlf	___aldiv@quotient+1,f
  4526  02A7  0DA4               	rlf	___aldiv@quotient+2,f
  4527  02A8  0DA5               	rlf	___aldiv@quotient+3,f
  4528  02A9  0BF8               	decfsz	??___aldiv,f
  4529  02AA  2AA4               	goto	u1635
  4530  02AB  0873               	movf	___aldiv@divisor+3,w
  4531  02AC  0277               	subwf	___aldiv@dividend+3,w
  4532  02AD  1D03               	skipz
  4533  02AE  2AB9               	goto	u1645
  4534  02AF  0872               	movf	___aldiv@divisor+2,w
  4535  02B0  0276               	subwf	___aldiv@dividend+2,w
  4536  02B1  1D03               	skipz
  4537  02B2  2AB9               	goto	u1645
  4538  02B3  0871               	movf	___aldiv@divisor+1,w
  4539  02B4  0275               	subwf	___aldiv@dividend+1,w
  4540  02B5  1D03               	skipz
  4541  02B6  2AB9               	goto	u1645
  4542  02B7  0870               	movf	___aldiv@divisor,w
  4543  02B8  0274               	subwf	___aldiv@dividend,w
  4544  02B9                     u1645:	
  4545  02B9  1C03               	skipc
  4546  02BA  2ACA               	goto	l1891
  4547  02BB  0870               	movf	___aldiv@divisor,w
  4548  02BC  02F4               	subwf	___aldiv@dividend,f
  4549  02BD  0871               	movf	___aldiv@divisor+1,w
  4550  02BE  1C03               	skipc
  4551  02BF  0F71               	incfsz	___aldiv@divisor+1,w
  4552  02C0  02F5               	subwf	___aldiv@dividend+1,f
  4553  02C1  0872               	movf	___aldiv@divisor+2,w
  4554  02C2  1C03               	skipc
  4555  02C3  0F72               	incfsz	___aldiv@divisor+2,w
  4556  02C4  02F6               	subwf	___aldiv@dividend+2,f
  4557  02C5  0873               	movf	___aldiv@divisor+3,w
  4558  02C6  1C03               	skipc
  4559  02C7  0F73               	incfsz	___aldiv@divisor+3,w
  4560  02C8  02F7               	subwf	___aldiv@dividend+3,f
  4561  02C9  1422               	bsf	___aldiv@quotient,0
  4562  02CA                     l1891:	
  4563  02CA  3001               	movlw	1
  4564  02CB                     u1655:	
  4565  02CB  1003               	clrc
  4566  02CC  0CF3               	rrf	___aldiv@divisor+3,f
  4567  02CD  0CF2               	rrf	___aldiv@divisor+2,f
  4568  02CE  0CF1               	rrf	___aldiv@divisor+1,f
  4569  02CF  0CF0               	rrf	___aldiv@divisor,f
  4570  02D0  3EFF               	addlw	-1
  4571  02D1  1D03               	skipz
  4572  02D2  2ACB               	goto	u1655
  4573  02D3  3001               	movlw	1
  4574  02D4  02A0               	subwf	___aldiv@counter,f
  4575  02D5  1D03               	btfss	3,2
  4576  02D6  2AA2               	goto	l1883
  4577  02D7                     l1895:	
  4578  02D7  0821               	movf	___aldiv@sign,w
  4579  02D8  1903               	btfsc	3,2
  4580  02D9  2AE5               	goto	l1899
  4581  02DA  09A2               	comf	___aldiv@quotient,f
  4582  02DB  09A3               	comf	___aldiv@quotient+1,f
  4583  02DC  09A4               	comf	___aldiv@quotient+2,f
  4584  02DD  09A5               	comf	___aldiv@quotient+3,f
  4585  02DE  0AA2               	incf	___aldiv@quotient,f
  4586  02DF  1903               	skipnz
  4587  02E0  0AA3               	incf	___aldiv@quotient+1,f
  4588  02E1  1903               	skipnz
  4589  02E2  0AA4               	incf	___aldiv@quotient+2,f
  4590  02E3  1903               	skipnz
  4591  02E4  0AA5               	incf	___aldiv@quotient+3,f
  4592  02E5                     l1899:	
  4593  02E5  0825               	movf	___aldiv@quotient+3,w
  4594  02E6  00F3               	movwf	?___aldiv+3
  4595  02E7  0824               	movf	___aldiv@quotient+2,w
  4596  02E8  00F2               	movwf	?___aldiv+2
  4597  02E9  0823               	movf	___aldiv@quotient+1,w
  4598  02EA  00F1               	movwf	?___aldiv+1
  4599  02EB  0822               	movf	___aldiv@quotient,w
  4600  02EC  00F0               	movwf	?___aldiv
  4601  02ED  0008               	return
  4602  02EE                     __end_of___aldiv:	
  4603                           
  4604                           	psect	text23
  4605  00E7                     __ptext23:	
  4606 ;; *************** function _Lcd_Set_Cursor *****************
  4607 ;; Defined at:
  4608 ;;		line 41 in file "LCD.h"
  4609 ;; Parameters:    Size  Location     Type
  4610 ;;  a               1    wreg     unsigned char 
  4611 ;;  b               1    4[COMMON] unsigned char 
  4612 ;; Auto vars:     Size  Location     Type
  4613 ;;  a               1    7[COMMON] unsigned char 
  4614 ;;  temp            1   10[COMMON] unsigned char 
  4615 ;;  y               1    9[COMMON] unsigned char 
  4616 ;;  z               1    8[COMMON] unsigned char 
  4617 ;; Return value:  Size  Location     Type
  4618 ;;                  1    wreg      void 
  4619 ;; Registers used:
  4620 ;;		wreg, status,2, status,0, pclath, cstack
  4621 ;; Tracked objects:
  4622 ;;		On entry : 0/0
  4623 ;;		On exit  : 0/0
  4624 ;;		Unchanged: 0/0
  4625 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4626 ;;      Params:         1       0       0       0       0
  4627 ;;      Locals:         4       0       0       0       0
  4628 ;;      Temps:          2       0       0       0       0
  4629 ;;      Totals:         7       0       0       0       0
  4630 ;;Total ram usage:        7 bytes
  4631 ;; Hardware stack levels used:    1
  4632 ;; Hardware stack levels required when called:    2
  4633 ;; This function calls:
  4634 ;;		_Lcd_Cmd
  4635 ;; This function is called by:
  4636 ;;		_main
  4637 ;;		_esp8266_get_stationIP
  4638 ;; This function uses a non-reentrant model
  4639 ;;
  4640                           
  4641                           
  4642                           ;psect for function _Lcd_Set_Cursor
  4643  00E7                     _Lcd_Set_Cursor:	
  4644                           
  4645                           ;incstack = 0
  4646                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  4647                           ;Lcd_Set_Cursor@a stored from wreg
  4648  00E7  00F7               	movwf	Lcd_Set_Cursor@a
  4649                           
  4650                           ;LCD.h: 43: char temp,z,y;
  4651                           ;LCD.h: 44: if(a == 1)
  4652  00E8  0377               	decf	Lcd_Set_Cursor@a,w
  4653  00E9  1D03               	btfss	3,2
  4654  00EA  290C               	goto	l1915
  4655                           
  4656                           ;LCD.h: 45: {
  4657                           ;LCD.h: 46: temp = 0x80 + b - 1;
  4658  00EB  0874               	movf	Lcd_Set_Cursor@b,w
  4659  00EC  3E7F               	addlw	127
  4660  00ED  00F5               	movwf	??_Lcd_Set_Cursor
  4661  00EE  0875               	movf	??_Lcd_Set_Cursor,w
  4662  00EF  00FA               	movwf	Lcd_Set_Cursor@temp
  4663                           
  4664                           ;LCD.h: 47: z = temp>>4;
  4665  00F0  087A               	movf	Lcd_Set_Cursor@temp,w
  4666  00F1  00F5               	movwf	??_Lcd_Set_Cursor
  4667  00F2  3004               	movlw	4
  4668  00F3                     u1695:	
  4669  00F3  1003               	clrc
  4670  00F4  0CF5               	rrf	??_Lcd_Set_Cursor,f
  4671  00F5  3EFF               	addlw	-1
  4672  00F6  1D03               	skipz
  4673  00F7  28F3               	goto	u1695
  4674  00F8  0875               	movf	??_Lcd_Set_Cursor,w
  4675  00F9  00F6               	movwf	??_Lcd_Set_Cursor+1
  4676  00FA  0876               	movf	??_Lcd_Set_Cursor+1,w
  4677  00FB  00F8               	movwf	Lcd_Set_Cursor@z
  4678                           
  4679                           ;LCD.h: 48: y = temp & 0x0F;
  4680  00FC  087A               	movf	Lcd_Set_Cursor@temp,w
  4681  00FD  390F               	andlw	15
  4682  00FE  00F5               	movwf	??_Lcd_Set_Cursor
  4683  00FF  0875               	movf	??_Lcd_Set_Cursor,w
  4684  0100  00F9               	movwf	Lcd_Set_Cursor@y
  4685                           
  4686                           ;LCD.h: 49: Lcd_Cmd(z);
  4687  0101  0878               	movf	Lcd_Set_Cursor@z,w
  4688  0102  120A  158A  26C5  120A  118A  	fcall	_Lcd_Cmd
  4689                           
  4690                           ;LCD.h: 50: Lcd_Cmd(y);
  4691  0107  0879               	movf	Lcd_Set_Cursor@y,w
  4692  0108  120A  158A  26C5   	fcall	_Lcd_Cmd
  4693                           
  4694                           ;LCD.h: 51: }
  4695  010B  0008               	return
  4696  010C                     l1915:	
  4697                           
  4698                           ;LCD.h: 52: else if(a == 2)
  4699  010C  3002               	movlw	2
  4700  010D  0677               	xorwf	Lcd_Set_Cursor@a,w
  4701  010E  1D03               	btfss	3,2
  4702  010F  0008               	return
  4703                           
  4704                           ;LCD.h: 53: {
  4705                           ;LCD.h: 54: temp = 0xC0 + b - 1;
  4706  0110  0874               	movf	Lcd_Set_Cursor@b,w
  4707  0111  3EBF               	addlw	191
  4708  0112  00F5               	movwf	??_Lcd_Set_Cursor
  4709  0113  0875               	movf	??_Lcd_Set_Cursor,w
  4710  0114  00FA               	movwf	Lcd_Set_Cursor@temp
  4711                           
  4712                           ;LCD.h: 55: z = temp>>4;
  4713  0115  087A               	movf	Lcd_Set_Cursor@temp,w
  4714  0116  00F5               	movwf	??_Lcd_Set_Cursor
  4715  0117  3004               	movlw	4
  4716  0118                     u1715:	
  4717  0118  1003               	clrc
  4718  0119  0CF5               	rrf	??_Lcd_Set_Cursor,f
  4719  011A  3EFF               	addlw	-1
  4720  011B  1D03               	skipz
  4721  011C  2918               	goto	u1715
  4722  011D  0875               	movf	??_Lcd_Set_Cursor,w
  4723  011E  00F6               	movwf	??_Lcd_Set_Cursor+1
  4724  011F  0876               	movf	??_Lcd_Set_Cursor+1,w
  4725  0120  00F8               	movwf	Lcd_Set_Cursor@z
  4726                           
  4727                           ;LCD.h: 56: y = temp & 0x0F;
  4728  0121  087A               	movf	Lcd_Set_Cursor@temp,w
  4729  0122  390F               	andlw	15
  4730  0123  00F5               	movwf	??_Lcd_Set_Cursor
  4731  0124  0875               	movf	??_Lcd_Set_Cursor,w
  4732  0125  00F9               	movwf	Lcd_Set_Cursor@y
  4733                           
  4734                           ;LCD.h: 57: Lcd_Cmd(z);
  4735  0126  0878               	movf	Lcd_Set_Cursor@z,w
  4736  0127  120A  158A  26C5  120A  118A  	fcall	_Lcd_Cmd
  4737                           
  4738                           ;LCD.h: 58: Lcd_Cmd(y);
  4739  012C  0879               	movf	Lcd_Set_Cursor@y,w
  4740  012D  120A  158A  26C5   	fcall	_Lcd_Cmd
  4741  0130  0008               	return
  4742  0131                     __end_of_Lcd_Set_Cursor:	
  4743                           
  4744                           	psect	text24
  4745  00AA                     __ptext24:	
  4746 ;; *************** function _Lcd_Print_String *****************
  4747 ;; Defined at:
  4748 ;;		line 97 in file "LCD.h"
  4749 ;; Parameters:    Size  Location     Type
  4750 ;;  a               2    5[COMMON] PTR unsigned char 
  4751 ;;		 -> STR_62(12), STR_60(12), main@revC(16), main@revN(16), 
  4752 ;;		 -> STR_59(11), STR_58(14), STR_57(15), STR_56(12), 
  4753 ;;		 -> STR_53(18), STR_52(16), STR_51(16), STR_50(17), 
  4754 ;;		 -> STR_49(14), STR_48(17), STR_47(14), STR_8(5), 
  4755 ;;		 -> STR_7(4), 
  4756 ;; Auto vars:     Size  Location     Type
  4757 ;;  i               2   10[COMMON] int 
  4758 ;; Return value:  Size  Location     Type
  4759 ;;                  1    wreg      void 
  4760 ;; Registers used:
  4761 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4762 ;; Tracked objects:
  4763 ;;		On entry : 0/0
  4764 ;;		On exit  : 0/0
  4765 ;;		Unchanged: 0/0
  4766 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4767 ;;      Params:         2       0       0       0       0
  4768 ;;      Locals:         2       0       0       0       0
  4769 ;;      Temps:          3       0       0       0       0
  4770 ;;      Totals:         7       0       0       0       0
  4771 ;;Total ram usage:        7 bytes
  4772 ;; Hardware stack levels used:    1
  4773 ;; Hardware stack levels required when called:    2
  4774 ;; This function calls:
  4775 ;;		_Lcd_Print_Char
  4776 ;; This function is called by:
  4777 ;;		_main
  4778 ;;		_esp8266_get_stationIP
  4779 ;; This function uses a non-reentrant model
  4780 ;;
  4781                           
  4782                           
  4783                           ;psect for function _Lcd_Print_String
  4784  00AA                     _Lcd_Print_String:	
  4785                           
  4786                           ;LCD.h: 99: int i;
  4787                           ;LCD.h: 100: for(i=0;a[i]!='\0';i++)
  4788                           
  4789                           ;incstack = 0
  4790                           ; Regs used in _Lcd_Print_String: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4791  00AA  01FA               	clrf	Lcd_Print_String@i
  4792  00AB  01FB               	clrf	Lcd_Print_String@i+1
  4793  00AC                     l1941:	
  4794  00AC  087A               	movf	Lcd_Print_String@i,w
  4795  00AD  0775               	addwf	Lcd_Print_String@a,w
  4796  00AE  00F8               	movwf	??_Lcd_Print_String+1
  4797  00AF  0876               	movf	Lcd_Print_String@a+1,w
  4798  00B0  00F7               	movwf	??_Lcd_Print_String
  4799  00B1  1803               	skipnc
  4800  00B2  0AF7               	incf	??_Lcd_Print_String,f
  4801  00B3  1BFA               	btfsc	Lcd_Print_String@i,7
  4802  00B4  03F7               	decf	??_Lcd_Print_String,f
  4803  00B5  0877               	movf	??_Lcd_Print_String,w
  4804  00B6  00F9               	movwf	??_Lcd_Print_String+2
  4805  00B7  0879               	movf	??_Lcd_Print_String+2,w
  4806  00B8  1283               	bcf	3,5	;RP0=0, select bank0
  4807  00B9  1303               	bcf	3,6	;RP1=0, select bank0
  4808  00BA  00FF               	movwf	127
  4809  00BB  0878               	movf	??_Lcd_Print_String+1,w
  4810  00BC  0084               	movwf	4
  4811  00BD  120A  158A  2000  120A  118A  	fcall	stringtab
  4812  00C2  3A00               	xorlw	0
  4813  00C3  1903               	btfsc	3,2
  4814  00C4  0008               	return
  4815                           
  4816                           ;LCD.h: 101: Lcd_Print_Char(a[i]);
  4817  00C5  087A               	movf	Lcd_Print_String@i,w
  4818  00C6  0775               	addwf	Lcd_Print_String@a,w
  4819  00C7  00F8               	movwf	??_Lcd_Print_String+1
  4820  00C8  0876               	movf	Lcd_Print_String@a+1,w
  4821  00C9  00F7               	movwf	??_Lcd_Print_String
  4822  00CA  1803               	skipnc
  4823  00CB  0AF7               	incf	??_Lcd_Print_String,f
  4824  00CC  1BFA               	btfsc	Lcd_Print_String@i,7
  4825  00CD  03F7               	decf	??_Lcd_Print_String,f
  4826  00CE  0877               	movf	??_Lcd_Print_String,w
  4827  00CF  00F9               	movwf	??_Lcd_Print_String+2
  4828  00D0  0879               	movf	??_Lcd_Print_String+2,w
  4829  00D1  1283               	bcf	3,5	;RP0=0, select bank0
  4830  00D2  1303               	bcf	3,6	;RP1=0, select bank0
  4831  00D3  00FF               	movwf	127
  4832  00D4  0878               	movf	??_Lcd_Print_String+1,w
  4833  00D5  0084               	movwf	4
  4834  00D6  120A  158A  2000  120A  118A  	fcall	stringtab
  4835  00DB  120A  158A  27C7  120A  118A  	fcall	_Lcd_Print_Char
  4836  00E0  3001               	movlw	1
  4837  00E1  07FA               	addwf	Lcd_Print_String@i,f
  4838  00E2  1803               	skipnc
  4839  00E3  0AFB               	incf	Lcd_Print_String@i+1,f
  4840  00E4  3000               	movlw	0
  4841  00E5  07FB               	addwf	Lcd_Print_String@i+1,f
  4842  00E6  28AC               	goto	l1941
  4843  00E7                     __end_of_Lcd_Print_String:	
  4844                           
  4845                           	psect	text25
  4846  0FC7                     __ptext25:	
  4847 ;; *************** function _Lcd_Print_Char *****************
  4848 ;; Defined at:
  4849 ;;		line 81 in file "LCD.h"
  4850 ;; Parameters:    Size  Location     Type
  4851 ;;  a               1    wreg     unsigned char 
  4852 ;; Auto vars:     Size  Location     Type
  4853 ;;  a               1    4[COMMON] unsigned char 
  4854 ;;  y               1    3[COMMON] unsigned char 
  4855 ;;  temp            1    2[COMMON] unsigned char 
  4856 ;; Return value:  Size  Location     Type
  4857 ;;                  1    wreg      void 
  4858 ;; Registers used:
  4859 ;;		wreg, status,2, status,0, pclath, cstack
  4860 ;; Tracked objects:
  4861 ;;		On entry : 0/0
  4862 ;;		On exit  : 0/0
  4863 ;;		Unchanged: 0/0
  4864 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4865 ;;      Params:         0       0       0       0       0
  4866 ;;      Locals:         3       0       0       0       0
  4867 ;;      Temps:          1       0       0       0       0
  4868 ;;      Totals:         4       0       0       0       0
  4869 ;;Total ram usage:        4 bytes
  4870 ;; Hardware stack levels used:    1
  4871 ;; Hardware stack levels required when called:    1
  4872 ;; This function calls:
  4873 ;;		_Lcd_Port
  4874 ;; This function is called by:
  4875 ;;		_Lcd_Print_String
  4876 ;;		_esp8266_get_stationIP
  4877 ;; This function uses a non-reentrant model
  4878 ;;
  4879                           
  4880                           
  4881                           ;psect for function _Lcd_Print_Char
  4882  0FC7                     _Lcd_Print_Char:	
  4883                           
  4884                           ;incstack = 0
  4885                           ; Regs used in _Lcd_Print_Char: [wreg+status,2+status,0+pclath+cstack]
  4886                           ;Lcd_Print_Char@a stored from wreg
  4887  0FC7  00F4               	movwf	Lcd_Print_Char@a
  4888                           
  4889                           ;LCD.h: 83: char temp,y;
  4890                           ;LCD.h: 84: temp = a&0x0F;
  4891  0FC8  0874               	movf	Lcd_Print_Char@a,w
  4892  0FC9  390F               	andlw	15
  4893  0FCA  00F1               	movwf	??_Lcd_Print_Char
  4894  0FCB  0871               	movf	??_Lcd_Print_Char,w
  4895  0FCC  00F2               	movwf	Lcd_Print_Char@temp
  4896                           
  4897                           ;LCD.h: 85: y = a&0xF0;
  4898  0FCD  0874               	movf	Lcd_Print_Char@a,w
  4899  0FCE  39F0               	andlw	240
  4900  0FCF  00F1               	movwf	??_Lcd_Print_Char
  4901  0FD0  0871               	movf	??_Lcd_Print_Char,w
  4902  0FD1  00F3               	movwf	Lcd_Print_Char@y
  4903                           
  4904                           ;LCD.h: 86: RD7 = 1;
  4905  0FD2  1283               	bcf	3,5	;RP0=0, select bank0
  4906  0FD3  1303               	bcf	3,6	;RP1=0, select bank0
  4907  0FD4  1788               	bsf	8,7	;volatile
  4908                           
  4909                           ;LCD.h: 87: Lcd_Port(y>>4);
  4910  0FD5  0873               	movf	Lcd_Print_Char@y,w
  4911  0FD6  00F1               	movwf	??_Lcd_Print_Char
  4912  0FD7  3004               	movlw	4
  4913  0FD8                     u1335:	
  4914  0FD8  1003               	clrc
  4915  0FD9  0CF1               	rrf	??_Lcd_Print_Char,f
  4916  0FDA  3EFF               	addlw	-1
  4917  0FDB  1D03               	skipz
  4918  0FDC  2FD8               	goto	u1335
  4919  0FDD  0871               	movf	??_Lcd_Print_Char,w
  4920  0FDE  120A  158A  26AB  120A  158A  	fcall	_Lcd_Port
  4921                           
  4922                           ;LCD.h: 88: RD6 = 1;
  4923  0FE3  1283               	bcf	3,5	;RP0=0, select bank0
  4924  0FE4  1303               	bcf	3,6	;RP1=0, select bank0
  4925  0FE5  1708               	bsf	8,6	;volatile
  4926                           
  4927                           ;LCD.h: 89: _delay((unsigned long)((40)*(11059200/4000000.0)));
  4928  0FE6  3024               	movlw	36
  4929  0FE7  00F1               	movwf	??_Lcd_Print_Char
  4930  0FE8                     u2197:	
  4931  0FE8  0BF1               	decfsz	??_Lcd_Print_Char,f
  4932  0FE9  2FE8               	goto	u2197
  4933  0FEA  0000               	nop
  4934                           
  4935                           ;LCD.h: 90: RD6 = 0;
  4936  0FEB  1283               	bcf	3,5	;RP0=0, select bank0
  4937  0FEC  1303               	bcf	3,6	;RP1=0, select bank0
  4938  0FED  1308               	bcf	8,6	;volatile
  4939                           
  4940                           ;LCD.h: 91: Lcd_Port(temp);
  4941  0FEE  0872               	movf	Lcd_Print_Char@temp,w
  4942  0FEF  120A  158A  26AB  120A  158A  	fcall	_Lcd_Port
  4943                           
  4944                           ;LCD.h: 92: RD6 = 1;
  4945  0FF4  1283               	bcf	3,5	;RP0=0, select bank0
  4946  0FF5  1303               	bcf	3,6	;RP1=0, select bank0
  4947  0FF6  1708               	bsf	8,6	;volatile
  4948                           
  4949                           ;LCD.h: 93: _delay((unsigned long)((40)*(11059200/4000000.0)));
  4950  0FF7  3024               	movlw	36
  4951  0FF8  00F1               	movwf	??_Lcd_Print_Char
  4952  0FF9                     u2207:	
  4953  0FF9  0BF1               	decfsz	??_Lcd_Print_Char,f
  4954  0FFA  2FF9               	goto	u2207
  4955  0FFB  0000               	nop
  4956                           
  4957                           ;LCD.h: 94: RD6 = 0;
  4958  0FFC  1283               	bcf	3,5	;RP0=0, select bank0
  4959  0FFD  1303               	bcf	3,6	;RP1=0, select bank0
  4960  0FFE  1308               	bcf	8,6	;volatile
  4961  0FFF  0008               	return
  4962  1000                     __end_of_Lcd_Print_Char:	
  4963                           
  4964                           	psect	text26
  4965  0131                     __ptext26:	
  4966 ;; *************** function _Lcd_Init *****************
  4967 ;; Defined at:
  4968 ;;		line 62 in file "LCD.h"
  4969 ;; Parameters:    Size  Location     Type
  4970 ;;		None
  4971 ;; Auto vars:     Size  Location     Type
  4972 ;;		None
  4973 ;; Return value:  Size  Location     Type
  4974 ;;                  1    wreg      void 
  4975 ;; Registers used:
  4976 ;;		wreg, status,2, status,0, pclath, cstack
  4977 ;; Tracked objects:
  4978 ;;		On entry : 0/0
  4979 ;;		On exit  : 0/0
  4980 ;;		Unchanged: 0/0
  4981 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4982 ;;      Params:         0       0       0       0       0
  4983 ;;      Locals:         0       0       0       0       0
  4984 ;;      Temps:          2       0       0       0       0
  4985 ;;      Totals:         2       0       0       0       0
  4986 ;;Total ram usage:        2 bytes
  4987 ;; Hardware stack levels used:    1
  4988 ;; Hardware stack levels required when called:    2
  4989 ;; This function calls:
  4990 ;;		_Lcd_Cmd
  4991 ;;		_Lcd_Port
  4992 ;; This function is called by:
  4993 ;;		_main
  4994 ;; This function uses a non-reentrant model
  4995 ;;
  4996                           
  4997                           
  4998                           ;psect for function _Lcd_Init
  4999  0131                     _Lcd_Init:	
  5000                           
  5001                           ;LCD.h: 64: Lcd_Port(0x00);
  5002                           
  5003                           ;incstack = 0
  5004                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  5005  0131  3000               	movlw	0
  5006  0132  120A  158A  26AB  120A  118A  	fcall	_Lcd_Port
  5007                           
  5008                           ;LCD.h: 65: _delay((unsigned long)((20)*(11059200/4000.0)));
  5009  0137  3048               	movlw	72
  5010  0138  00F5               	movwf	??_Lcd_Init+1
  5011  0139  30CF               	movlw	207
  5012  013A  00F4               	movwf	??_Lcd_Init
  5013  013B                     u2217:	
  5014  013B  0BF4               	decfsz	??_Lcd_Init,f
  5015  013C  293B               	goto	u2217
  5016  013D  0BF5               	decfsz	??_Lcd_Init+1,f
  5017  013E  293B               	goto	u2217
  5018                           
  5019                           ;LCD.h: 66: Lcd_Cmd(0x03);
  5020  013F  3003               	movlw	3
  5021  0140  120A  158A  26C5  120A  118A  	fcall	_Lcd_Cmd
  5022                           
  5023                           ;LCD.h: 67: _delay((unsigned long)((5)*(11059200/4000.0)));
  5024  0145  3012               	movlw	18
  5025  0146  00F5               	movwf	??_Lcd_Init+1
  5026  0147  30F3               	movlw	243
  5027  0148  00F4               	movwf	??_Lcd_Init
  5028  0149                     u2227:	
  5029  0149  0BF4               	decfsz	??_Lcd_Init,f
  5030  014A  2949               	goto	u2227
  5031  014B  0BF5               	decfsz	??_Lcd_Init+1,f
  5032  014C  2949               	goto	u2227
  5033                           
  5034                           ;LCD.h: 68: Lcd_Cmd(0x03);
  5035  014D  3003               	movlw	3
  5036  014E  120A  158A  26C5  120A  118A  	fcall	_Lcd_Cmd
  5037                           
  5038                           ;LCD.h: 69: _delay((unsigned long)((11)*(11059200/4000.0)));
  5039  0153  3028               	movlw	40
  5040  0154  00F5               	movwf	??_Lcd_Init+1
  5041  0155  307D               	movlw	125
  5042  0156  00F4               	movwf	??_Lcd_Init
  5043  0157                     u2237:	
  5044  0157  0BF4               	decfsz	??_Lcd_Init,f
  5045  0158  2957               	goto	u2237
  5046  0159  0BF5               	decfsz	??_Lcd_Init+1,f
  5047  015A  2957               	goto	u2237
  5048  015B  295C               	nop2
  5049                           
  5050                           ;LCD.h: 70: Lcd_Cmd(0x03);
  5051  015C  3003               	movlw	3
  5052  015D  120A  158A  26C5  120A  118A  	fcall	_Lcd_Cmd
  5053                           
  5054                           ;LCD.h: 72: Lcd_Cmd(0x02);
  5055  0162  3002               	movlw	2
  5056  0163  120A  158A  26C5  120A  118A  	fcall	_Lcd_Cmd
  5057                           
  5058                           ;LCD.h: 73: Lcd_Cmd(0x02);
  5059  0168  3002               	movlw	2
  5060  0169  120A  158A  26C5  120A  118A  	fcall	_Lcd_Cmd
  5061                           
  5062                           ;LCD.h: 74: Lcd_Cmd(0x08);
  5063  016E  3008               	movlw	8
  5064  016F  120A  158A  26C5  120A  118A  	fcall	_Lcd_Cmd
  5065                           
  5066                           ;LCD.h: 75: Lcd_Cmd(0x00);
  5067  0174  3000               	movlw	0
  5068  0175  120A  158A  26C5  120A  118A  	fcall	_Lcd_Cmd
  5069                           
  5070                           ;LCD.h: 76: Lcd_Cmd(0x0C);
  5071  017A  300C               	movlw	12
  5072  017B  120A  158A  26C5  120A  118A  	fcall	_Lcd_Cmd
  5073                           
  5074                           ;LCD.h: 77: Lcd_Cmd(0x00);
  5075  0180  3000               	movlw	0
  5076  0181  120A  158A  26C5  120A  118A  	fcall	_Lcd_Cmd
  5077                           
  5078                           ;LCD.h: 78: Lcd_Cmd(0x06);
  5079  0186  3006               	movlw	6
  5080  0187  120A  158A  26C5   	fcall	_Lcd_Cmd
  5081  018A  0008               	return
  5082  018B                     __end_of_Lcd_Init:	
  5083                           
  5084                           	psect	text27
  5085  0E42                     __ptext27:	
  5086 ;; *************** function _Lcd_Clear *****************
  5087 ;; Defined at:
  5088 ;;		line 35 in file "LCD.h"
  5089 ;; Parameters:    Size  Location     Type
  5090 ;;		None
  5091 ;; Auto vars:     Size  Location     Type
  5092 ;;		None
  5093 ;; Return value:  Size  Location     Type
  5094 ;;                  2   70[None  ] int 
  5095 ;; Registers used:
  5096 ;;		wreg, status,2, status,0, pclath, cstack
  5097 ;; Tracked objects:
  5098 ;;		On entry : 0/0
  5099 ;;		On exit  : 0/0
  5100 ;;		Unchanged: 0/0
  5101 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5102 ;;      Params:         0       0       0       0       0
  5103 ;;      Locals:         0       0       0       0       0
  5104 ;;      Temps:          0       0       0       0       0
  5105 ;;      Totals:         0       0       0       0       0
  5106 ;;Total ram usage:        0 bytes
  5107 ;; Hardware stack levels used:    1
  5108 ;; Hardware stack levels required when called:    2
  5109 ;; This function calls:
  5110 ;;		_Lcd_Cmd
  5111 ;; This function is called by:
  5112 ;;		_main
  5113 ;; This function uses a non-reentrant model
  5114 ;;
  5115                           
  5116                           
  5117                           ;psect for function _Lcd_Clear
  5118  0E42                     _Lcd_Clear:	
  5119                           
  5120                           ;LCD.h: 37: Lcd_Cmd(0);
  5121                           
  5122                           ;incstack = 0
  5123                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  5124  0E42  3000               	movlw	0
  5125  0E43  120A  158A  26C5  120A  158A  	fcall	_Lcd_Cmd
  5126                           
  5127                           ;LCD.h: 38: Lcd_Cmd(1);
  5128  0E48  3001               	movlw	1
  5129  0E49  120A  158A  26C5   	fcall	_Lcd_Cmd
  5130  0E4C  0008               	return
  5131  0E4D                     __end_of_Lcd_Clear:	
  5132                           
  5133                           	psect	text28
  5134  0EC5                     __ptext28:	
  5135 ;; *************** function _Lcd_Cmd *****************
  5136 ;; Defined at:
  5137 ;;		line 26 in file "LCD.h"
  5138 ;; Parameters:    Size  Location     Type
  5139 ;;  a               1    wreg     unsigned char 
  5140 ;; Auto vars:     Size  Location     Type
  5141 ;;  a               1    3[COMMON] unsigned char 
  5142 ;; Return value:  Size  Location     Type
  5143 ;;                  1    wreg      void 
  5144 ;; Registers used:
  5145 ;;		wreg, status,2, status,0, pclath, cstack
  5146 ;; Tracked objects:
  5147 ;;		On entry : 0/0
  5148 ;;		On exit  : 0/0
  5149 ;;		Unchanged: 0/0
  5150 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5151 ;;      Params:         0       0       0       0       0
  5152 ;;      Locals:         1       0       0       0       0
  5153 ;;      Temps:          2       0       0       0       0
  5154 ;;      Totals:         3       0       0       0       0
  5155 ;;Total ram usage:        3 bytes
  5156 ;; Hardware stack levels used:    1
  5157 ;; Hardware stack levels required when called:    1
  5158 ;; This function calls:
  5159 ;;		_Lcd_Port
  5160 ;; This function is called by:
  5161 ;;		_Lcd_Clear
  5162 ;;		_Lcd_Set_Cursor
  5163 ;;		_Lcd_Init
  5164 ;;		_Lcd_Shift_Right
  5165 ;;		_Lcd_Shift_Left
  5166 ;; This function uses a non-reentrant model
  5167 ;;
  5168                           
  5169                           
  5170                           ;psect for function _Lcd_Cmd
  5171  0EC5                     _Lcd_Cmd:	
  5172                           
  5173                           ;incstack = 0
  5174                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  5175                           ;Lcd_Cmd@a stored from wreg
  5176  0EC5  00F3               	movwf	Lcd_Cmd@a
  5177                           
  5178                           ;LCD.h: 28: RD7 = 0;
  5179  0EC6  1283               	bcf	3,5	;RP0=0, select bank0
  5180  0EC7  1303               	bcf	3,6	;RP1=0, select bank0
  5181  0EC8  1388               	bcf	8,7	;volatile
  5182                           
  5183                           ;LCD.h: 29: Lcd_Port(a);
  5184  0EC9  0873               	movf	Lcd_Cmd@a,w
  5185  0ECA  120A  158A  26AB  120A  158A  	fcall	_Lcd_Port
  5186                           
  5187                           ;LCD.h: 30: RD6 = 1;
  5188  0ECF  1283               	bcf	3,5	;RP0=0, select bank0
  5189  0ED0  1303               	bcf	3,6	;RP1=0, select bank0
  5190  0ED1  1708               	bsf	8,6	;volatile
  5191                           
  5192                           ;LCD.h: 31: _delay((unsigned long)((4)*(11059200/4000.0)));
  5193  0ED2  300F               	movlw	15
  5194  0ED3  00F2               	movwf	??_Lcd_Cmd+1
  5195  0ED4  305B               	movlw	91
  5196  0ED5  00F1               	movwf	??_Lcd_Cmd
  5197  0ED6                     u2247:	
  5198  0ED6  0BF1               	decfsz	??_Lcd_Cmd,f
  5199  0ED7  2ED6               	goto	u2247
  5200  0ED8  0BF2               	decfsz	??_Lcd_Cmd+1,f
  5201  0ED9  2ED6               	goto	u2247
  5202  0EDA  0000               	nop
  5203                           
  5204                           ;LCD.h: 32: RD6 = 0;
  5205  0EDB  1283               	bcf	3,5	;RP0=0, select bank0
  5206  0EDC  1303               	bcf	3,6	;RP1=0, select bank0
  5207  0EDD  1308               	bcf	8,6	;volatile
  5208  0EDE  0008               	return
  5209  0EDF                     __end_of_Lcd_Cmd:	
  5210                           
  5211                           	psect	text29
  5212  0EAB                     __ptext29:	
  5213 ;; *************** function _Lcd_Port *****************
  5214 ;; Defined at:
  5215 ;;		line 4 in file "LCD.h"
  5216 ;; Parameters:    Size  Location     Type
  5217 ;;  a               1    wreg     unsigned char 
  5218 ;; Auto vars:     Size  Location     Type
  5219 ;;  a               1    0[COMMON] unsigned char 
  5220 ;; Return value:  Size  Location     Type
  5221 ;;                  1    wreg      void 
  5222 ;; Registers used:
  5223 ;;		wreg
  5224 ;; Tracked objects:
  5225 ;;		On entry : 0/0
  5226 ;;		On exit  : 0/0
  5227 ;;		Unchanged: 0/0
  5228 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5229 ;;      Params:         0       0       0       0       0
  5230 ;;      Locals:         1       0       0       0       0
  5231 ;;      Temps:          0       0       0       0       0
  5232 ;;      Totals:         1       0       0       0       0
  5233 ;;Total ram usage:        1 bytes
  5234 ;; Hardware stack levels used:    1
  5235 ;; This function calls:
  5236 ;;		Nothing
  5237 ;; This function is called by:
  5238 ;;		_Lcd_Cmd
  5239 ;;		_Lcd_Init
  5240 ;;		_Lcd_Print_Char
  5241 ;; This function uses a non-reentrant model
  5242 ;;
  5243                           
  5244                           
  5245                           ;psect for function _Lcd_Port
  5246  0EAB                     _Lcd_Port:	
  5247                           
  5248                           ;incstack = 0
  5249                           ; Regs used in _Lcd_Port: [wreg]
  5250                           ;Lcd_Port@a stored from wreg
  5251  0EAB  00F0               	movwf	Lcd_Port@a
  5252                           
  5253                           ;LCD.h: 6: if(a & 1)
  5254  0EAC  1C70               	btfss	Lcd_Port@a,0
  5255  0EAD  2EB2               	goto	l57
  5256                           
  5257                           ;LCD.h: 7: RD5 = 1;
  5258  0EAE  1283               	bcf	3,5	;RP0=0, select bank0
  5259  0EAF  1303               	bcf	3,6	;RP1=0, select bank0
  5260  0EB0  1688               	bsf	8,5	;volatile
  5261  0EB1  2EB5               	goto	l58
  5262  0EB2                     l57:	
  5263                           
  5264                           ;LCD.h: 8: else
  5265                           ;LCD.h: 9: RD5 = 0;
  5266  0EB2  1283               	bcf	3,5	;RP0=0, select bank0
  5267  0EB3  1303               	bcf	3,6	;RP1=0, select bank0
  5268  0EB4  1288               	bcf	8,5	;volatile
  5269  0EB5                     l58:	
  5270                           
  5271                           ;LCD.h: 11: if(a & 2)
  5272  0EB5  1CF0               	btfss	Lcd_Port@a,1
  5273  0EB6  2EB9               	goto	l59
  5274                           
  5275                           ;LCD.h: 12: RD4 = 1;
  5276  0EB7  1608               	bsf	8,4	;volatile
  5277  0EB8  2EBA               	goto	l60
  5278  0EB9                     l59:	
  5279                           
  5280                           ;LCD.h: 13: else
  5281                           ;LCD.h: 14: RD4 = 0;
  5282  0EB9  1208               	bcf	8,4	;volatile
  5283  0EBA                     l60:	
  5284                           
  5285                           ;LCD.h: 16: if(a & 4)
  5286  0EBA  1D70               	btfss	Lcd_Port@a,2
  5287  0EBB  2EBE               	goto	l61
  5288                           
  5289                           ;LCD.h: 17: RD3 = 1;
  5290  0EBC  1588               	bsf	8,3	;volatile
  5291  0EBD  2EBF               	goto	l62
  5292  0EBE                     l61:	
  5293                           
  5294                           ;LCD.h: 18: else
  5295                           ;LCD.h: 19: RD3 = 0;
  5296  0EBE  1188               	bcf	8,3	;volatile
  5297  0EBF                     l62:	
  5298                           
  5299                           ;LCD.h: 21: if(a & 8)
  5300  0EBF  1DF0               	btfss	Lcd_Port@a,3
  5301  0EC0  2EC3               	goto	l63
  5302                           
  5303                           ;LCD.h: 22: RD2 = 1;
  5304  0EC1  1508               	bsf	8,2	;volatile
  5305  0EC2  0008               	return
  5306  0EC3                     l63:	
  5307                           
  5308                           ;LCD.h: 23: else
  5309                           ;LCD.h: 24: RD2 = 0;
  5310  0EC3  1108               	bcf	8,2	;volatile
  5311  0EC4  0008               	return
  5312  0EC5                     __end_of_Lcd_Port:	
  5313  007E                     btemp	set	126	;btemp
  5314  007E                     wtemp0	set	126


Data Sizes:
    Strings     483
    Constant    26
    Data        16
    BSS         23
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     77      77
    BANK1            80      0      39
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_63(CODE[9]), STR_61(CODE[9]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_63(CODE[9]), STR_61(CODE[9]), 

    atoi@s	PTR const unsigned char  size(1) Largest target is 4
		 -> revClient@_lenght(BANK0[4]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_32(CODE[3]), STR_30(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 6
		 -> esp8266_send@length_str(BANK0[6]), esp8266_start@port_str(COMMON[5]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    _esp8266_waitResponse@strings	PTR const unsigned char [8] size(2) Largest target is 10
		 -> STR_46(CODE[9]), STR_45(CODE[10]), STR_44(CODE[7]), STR_43(CODE[7]), 
		 -> STR_42(CODE[10]), STR_41(CODE[5]), STR_40(CODE[6]), STR_39(CODE[3]), 

    _esp8266_waitResponse@F2069	PTR const unsigned char [8] size(2) Largest target is 10
		 -> STR_46(CODE[9]), STR_45(CODE[10]), STR_44(CODE[7]), STR_43(CODE[7]), 
		 -> STR_42(CODE[10]), STR_41(CODE[5]), STR_40(CODE[6]), STR_39(CODE[3]), 

    _esp8266_waitFor@string	PTR unsigned char  size(2) Largest target is 8
		 -> STR_38(CODE[8]), STR_37(CODE[3]), STR_36(CODE[5]), STR_35(CODE[6]), 
		 -> STR_24(CODE[3]), STR_22(CODE[3]), STR_20(CODE[3]), STR_13(CODE[3]), 

    _esp8266_print@ptr	PTR const unsigned char  size(2) Largest target is 16
		 -> STR_63(CODE[9]), STR_61(CODE[9]), STR_55(CODE[9]), STR_54(CODE[8]), 
		 -> STR_34(CODE[3]), STR_33(CODE[14]), esp8266_send@length_str(BANK0[6]), STR_31(CODE[3]), 
		 -> esp8266_start@port_str(COMMON[5]), STR_29(CODE[3]), STR_28(CODE[4]), STR_27(CODE[4]), 
		 -> STR_26(CODE[4]), STR_25(CODE[14]), STR_23(CODE[11]), STR_21(CODE[11]), 
		 -> STR_19(CODE[16]), STR_18(CODE[4]), STR_17(CODE[4]), STR_16(CODE[11]), 
		 -> STR_15(CODE[3]), STR_14(CODE[11]), STR_12(CODE[3]), STR_11(CODE[4]), 
		 -> STR_10(CODE[9]), STR_9(CODE[5]), STR_3(CODE[8]), STR_2(CODE[4]), 
		 -> STR_1(CODE[11]), 

    revClient@_string_Rev	PTR unsigned char  size(1) Largest target is 16
		 -> main@revC(BANK0[16]), main@revN(BANK0[16]), 

    esp8266_send@data	PTR unsigned char  size(2) Largest target is 9
		 -> STR_63(CODE[9]), STR_61(CODE[9]), 

    esp8266_config_softAP@softpass	PTR unsigned char  size(2) Largest target is 9
		 -> STR_55(CODE[9]), 

    esp8266_config_softAP@softssid	PTR unsigned char  size(2) Largest target is 8
		 -> STR_54(CODE[8]), 

    ESP8266_send_string@st_pt	PTR unsigned char  size(2) Largest target is 20
		 -> STR_6(CODE[11]), STR_5(CODE[20]), STR_4(CODE[14]), 

    Lcd_Print_String@a	PTR unsigned char  size(2) Largest target is 18
		 -> STR_62(CODE[12]), STR_60(CODE[12]), main@revC(BANK0[16]), main@revN(BANK0[16]), 
		 -> STR_59(CODE[11]), STR_58(CODE[14]), STR_57(CODE[15]), STR_56(CODE[12]), 
		 -> STR_53(CODE[18]), STR_52(CODE[16]), STR_51(CODE[16]), STR_50(CODE[17]), 
		 -> STR_49(CODE[14]), STR_48(CODE[17]), STR_47(CODE[14]), STR_8(CODE[5]), 
		 -> STR_7(CODE[4]), 


Critical Paths under _main in COMMON

    _revClient->_atoi
    _atoi->___wmul
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _esp8266_multi->__esp8266_waitResponse
    _esp8266_mode->__esp8266_waitResponse
    _esp8266_isStarted->__esp8266_waitResponse
    _esp8266_config_softAP->__esp8266_waitResponse
    __esp8266_print->__esp8266_putch
    _esp8266_config_server->__esp8266_waitResponse
    _ESP8266_send_string->__esp8266_putch
    _UART_Init->___aldiv
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Print_String->_Lcd_Print_Char
    _Lcd_Print_Char->_Lcd_Port
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _main in BANK0

    _main->_esp8266_send
    _esp8266_send->__esp8266_waitResponse
    _esp8266_multi->__esp8266_waitResponse
    _esp8266_mode->__esp8266_waitResponse
    _esp8266_isStarted->__esp8266_waitResponse
    _esp8266_config_softAP->__esp8266_waitResponse
    _esp8266_config_server->__esp8266_waitResponse
    _UART_Init->___aldiv

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                41    41      0   17151
                                             36 BANK0     41    41      0
                          _Lcd_Clear
                           _Lcd_Init
                   _Lcd_Print_String
                     _Lcd_Set_Cursor
                          _UART_Init
              __esp8266_waitResponse
              _esp8266_config_server
              _esp8266_config_softAP
                  _esp8266_isStarted
                       _esp8266_mode
                      _esp8266_multi
                       _esp8266_send
                          _revClient
 ---------------------------------------------------------------------------------
 (1) _revClient                                           16    14      2    1756
                                              0 BANK0     16    14      2
                     __esp8266_getch
                   __esp8266_waitFor
                               _atoi
 ---------------------------------------------------------------------------------
 (2) _atoi                                                 8     6      2     681
                                              6 COMMON     8     6      2
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              2     2      0      68
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     358
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (2) __esp8266_waitFor                                     7     5      2     562
                                              0 COMMON     7     5      2
                     __esp8266_getch
 ---------------------------------------------------------------------------------
 (1) _esp8266_send                                         8     6      2    3525
                                             28 BANK0      8     6      2
                     __esp8266_getch
                     __esp8266_print
              __esp8266_waitResponse
                            _sprintf
                             _strlen
 ---------------------------------------------------------------------------------
 (3) _strlen                                               6     4      2     143
                                              0 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             22    18      4    1080
                                              0 BANK0     14    10      4
                            ___lwdiv
                            ___lwmod
                             _strlen (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              6     2      4     265
                                              8 COMMON     6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     268
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (1) _esp8266_multi                                        0     0      0     615
                _ESP8266_send_string
              __esp8266_waitResponse
 ---------------------------------------------------------------------------------
 (1) _esp8266_mode                                         1     1      0    2143
                                              4 COMMON     1     1      0
                     __esp8266_print
                     __esp8266_putch
              __esp8266_waitResponse
 ---------------------------------------------------------------------------------
 (1) _esp8266_isStarted                                    0     0      0    2099
                     __esp8266_print
              __esp8266_waitResponse
 ---------------------------------------------------------------------------------
 (1) _esp8266_config_softAP                                4     0      4    2249
                                              4 COMMON     4     0      4
                     __esp8266_print
              __esp8266_waitResponse
 ---------------------------------------------------------------------------------
 (2) __esp8266_print                                       2     0      2    1710
                                              1 COMMON     2     0      2
                     __esp8266_putch
 ---------------------------------------------------------------------------------
 (1) _esp8266_config_server                                0     0      0     615
                _ESP8266_send_string
              __esp8266_waitResponse
 ---------------------------------------------------------------------------------
 (2) __esp8266_waitResponse                               32    32      0     389
                                              0 COMMON     4     4      0
                                              0 BANK0     28    28      0
                     __esp8266_getch
 ---------------------------------------------------------------------------------
 (3) __esp8266_getch                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ESP8266_send_string                                  2     0      2     226
                                              1 COMMON     2     0      2
                     __esp8266_putch
 ---------------------------------------------------------------------------------
 (3) __esp8266_putch                                       1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _UART_Init                                           18    14      4     721
                                              9 COMMON     2     2      0
                                              6 BANK0     16    12      4
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     512
                                              0 COMMON     9     1      8
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       7     6      1    1281
                                              4 COMMON     7     6      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Print_String                                     7     5      2    1169
                                              5 COMMON     7     5      2
                     _Lcd_Print_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Print_Char                                       4     4      0     178
                                              1 COMMON     4     4      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     198
                                              4 COMMON     2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              3     3      0     110
                                              1 COMMON     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0      88
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _Lcd_Print_String
     _Lcd_Print_Char
       _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
   _UART_Init
     ___aldiv
   __esp8266_waitResponse
     __esp8266_getch
   _esp8266_config_server
     _ESP8266_send_string
       __esp8266_putch
     __esp8266_waitResponse
       __esp8266_getch
   _esp8266_config_softAP
     __esp8266_print
       __esp8266_putch
     __esp8266_waitResponse
       __esp8266_getch
   _esp8266_isStarted
     __esp8266_print
       __esp8266_putch
     __esp8266_waitResponse
       __esp8266_getch
   _esp8266_mode
     __esp8266_print
       __esp8266_putch
     __esp8266_putch
     __esp8266_waitResponse
       __esp8266_getch
   _esp8266_multi
     _ESP8266_send_string
       __esp8266_putch
     __esp8266_waitResponse
       __esp8266_getch
   _esp8266_send
     __esp8266_getch
     __esp8266_print
       __esp8266_putch
     __esp8266_waitResponse
       __esp8266_getch
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _strlen (ARG)
     _strlen
   _revClient
     __esp8266_getch
     __esp8266_waitFor
       __esp8266_getch
     _atoi
       ___wmul
       _isdigit

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0      27       7       48.8%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     4D      4D       5       96.3%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      82      12        0.0%
ABS                  0      0      82       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Sat Jan 19 02:49:17 2019

                                      pc 0002                              __CFG_CP$OFF 0000  
                                     l60 0EBA                                       l61 0EBE  
                                     l62 0EBF                                       l63 0EC3  
                                     l57 0EB2                                       l58 0EB5  
                                     l59 0EB9                                       fsr 0004  
                    ___wmul@multiplicand 0072                       __esp8266_print@ptr 0071  
                     esp8266_start@F2038 00AE                                      l113 0E3E  
                                    l106 0E31                                      l258 0772  
                                    l428 0271                                      l373 0F07  
                                    _RD2 0042                                      _RD3 0043  
                                    _RD4 0044                                      _RD5 0045  
                                    _RD6 0046                                      _RD7 0047  
                           __CFG_CPD$OFF 0000                                      fsr0 0004  
                                    indf 0000                             __CFG_IESO$ON 0000  
                           __CFG_FOSC$HS 0000                             __CFG_LVP$OFF 0000  
                                   l2015 025D                                     l2007 0240  
                                   l2031 031B                                     l2053 0357  
                                   l2039 033B                                     l2305 07C6  
                                   l1603 0EFF                                     l2219 0623  
                                   l1711 0F1E                                     l1623 0E73  
                                   l2283 0751                                     l1645 005E  
                                   l1637 003A                                     l1661 0F9B  
                                   l1813 049C                                     l1805 0498  
                                   l1751 0413                                     l1743 0409  
                                   l1719 0F41                                     l1639 0048  
                                   l1663 0FA9                                     l1671 0FC2  
                                   l1815 041C                                     l1823 000F  
                                   l1831 0193                                     l1745 040E  
                                   l1649 0069                                     l1817 04E1  
                                   l1825 0022                                     l1833 018C  
                                   l2297 079C                                     l2289 076D  
                                   l1915 010C                                     l1667 0FB7  
                                   l1851 01B6                                     l1843 01AC  
                                   l1835 0198                                     l1941 00AC  
                                   l1749 03AC                                     l1781 0442  
                                   l1765 0095                                     l1757 0071  
                                   l1853 01E0                                     l1951 05B4  
                                   l1783 0444                                     l1767 0096  
                                   l1881 0292                                     l1873 0282  
                                   l1849 01B2                                     l1891 02CA  
                                   l1883 02A2                                     l1787 0449  
                                   l1859 01EF                                     l1789 0461  
                                   l1895 02D7                                     l1799 0473  
                                   l1985 0EA9                                     l1899 02E5  
                                   STR_1 0957                                     STR_2 09F2  
                                   STR_3 09B0                                     STR_4 08B3  
                                   STR_5 082C                                     STR_6 092B  
                                   STR_7 09F6                                     STR_8 09E4  
                                   STR_9 09DF                                     _BRGH 04C2  
                                   _CREN 00C4                                     u1215 003D  
                                   u1305 0FAF                                     u2105 076B  
                                   u1235 0049                                     u1315 0FB8  
                                   u1155 0F08                                     u1245 0055  
                                   u1165 0F0F                                     u2207 0FF9  
                                   u1335 0FD8                                     u1255 005F  
                                   u1360 0386                                     u2217 013B  
                                   u2137 0617                                     u1370 039B  
                                   u2227 0149                                     u2147 0654  
                                   u2237 0157                                     u1285 0F9E  
                                   u2157 0679                                     u2247 0ED6  
                                   u1615 0296                                     u2095 074F  
                                   u2167 06A4                                     u2177 06C9  
                                   u1810 0595                                     u1715 0118  
                                   u1635 02A4                                     u1811 0596  
                                   u1475 048E                                     u2187 070C  
                                   u1812 059B                                     u2197 0FE8  
                                   u1645 02B9                                     u1813 059C  
                                   u1805 057B                                     u1655 02CB  
                                   u1770 052C                                     u1771 052D  
                                   u1755 04F1                                     u1772 0532  
                                   u1773 0533                                     u1765 0512  
                                   u1695 00F3                                     u1795 055A  
                                   u1885 0365                                     _RCIF 0065  
                                   _OERR 00C1                                     _SPEN 00C7  
                                   _TXEN 04C5                                     _TXIF 0064  
                                   _SYNC 04C4                             __CFG_WRT$OFF 0000  
            __end_of_ESP8266_send_string 0F41                            __CFG_FCMEN$ON 0000  
                                   _atoi 018B                                     _main 05CE  
                                   btemp 007E                            __CFG_BOREN$ON 0000  
                                   start 0000                          __end_of_Lcd_Cmd 0EDF  
                     Lcd_Print_Char@temp 0072                            __CFG_MCLRE$ON 0000  
                  __esp8266_waitFor@temp 0076                          __end_of___aldiv 02EE  
                                  ?_atoi 0076                                    ?_main 0070  
                                  STR_10 098C                                    STR_11 09FA  
                                  STR_13 0A09                                    STR_21 0936  
                                  STR_30 0A0C                                    STR_14 096D  
                                  STR_15 09DC                                    STR_23 0941  
                                  STR_32 0A0C                                    STR_16 094C  
                                  STR_40 09D4                                    STR_33 08CF  
                                  STR_25 08C1                                    STR_41 09E9  
                          __CFG_WDTE$OFF 0000                                    STR_34 09DC  
                                  STR_26 09FE                                    STR_18 09EE  
                                  STR_50 0863                                    STR_42 0982  
                                  STR_27 0A02                                    STR_35 09CE  
                                  STR_51 0884                                    STR_19 0874  
                                  STR_43 09C0                                    STR_36 09DA  
                                  STR_60 091F                                    STR_52 0894  
                                  STR_44 09C7                                    STR_29 0A06  
                                  STR_61 099E                                    STR_53 0840  
                                  STR_45 0978                                    STR_54 090B  
                                  STR_38 09B8                                    STR_62 0913  
                                  STR_46 09A7                                    STR_55 08AA  
                                  STR_63 0995                                    STR_47 08DD  
                                  STR_39 0A09                                    STR_56 0907  
                                  STR_48 0852                                    STR_49 08F9  
                                  STR_57 08A4                                    STR_58 08EB  
                                  STR_59 0962                          __end_of___lwdiv 006E  
                        __end_of___lwmod 0FC7                                    _RCREG 001A  
                                  _SPBRG 0099                  __size_of_Lcd_Set_Cursor 004A  
                                  _TRISD 0088                                    _TXREG 0019  
                  __esp8266_waitResponse 037E                       __size_of_UART_Init 00E8  
                        __end_of_dpowers 081C                          __end_of_isdigit 0E75  
                                  atoi@a 007B                                    atoi@s 007D  
                                  main@a 006B                                    pclath 000A  
              __size_of_Lcd_Print_String 003D                                    status 0003  
                                  wtemp0 007E                          __end_of_sprintf 04E6  
                __size_of_Lcd_Print_Char 0039                         __end_of_Lcd_Init 018B  
                       __end_of_Lcd_Port 0EC5                          __initialization 07E8  
                           __end_of_atoi 01F4                             __end_of_main 07E8  
                          main@_revSizeC 0069                            main@_revSizeN 0067  
                                 ??_atoi 0078                                   ??_main 0044  
                     __size_of_Lcd_Clear 000B           __size_of_esp8266_config_softAP 0031  
         __size_of_esp8266_config_server 000D            __end_of_esp8266_config_softAP 0F95  
          __end_of_esp8266_config_server 0E5A                    __size_of_esp8266_mode 001E  
                  __size_of_esp8266_send 006B                                ??_Lcd_Cmd 0071  
                         __esp8266_getch 0E38                        revClient@_lenght2 0024  
                                 _TRISC6 043E                                   _TRISC7 043F  
                         __esp8266_print 0F41                           __esp8266_putch 0E30  
                         __CFG_PWRTE$OFF 0000                        __end_of_UART_Init 05CE  
                              ??___aldiv 0078                                   ___wmul 0EFD  
                              ??___lwdiv 0074                                ??___lwmod 007C  
                                 _strlen 000B                   ?__esp8266_waitResponse 0070  
                              ??_isdigit 0070                             _esp8266_mode 0EDF  
                           _esp8266_send 01F4                                ??_sprintf 0024  
                        Lcd_Set_Cursor@a 0077                          Lcd_Set_Cursor@b 0074  
                        Lcd_Set_Cursor@y 0079                          Lcd_Set_Cursor@z 0078  
                 __end_of__esp8266_getch 0E42                   __end_of__esp8266_print 0F64  
                 __end_of__esp8266_putch 0E38                  __end_of__initialization 07FC  
                      ?__esp8266_waitFor 0070                        __end_of_Lcd_Clear 0E4D  
          esp8266_config_softAP@softpass 0076            esp8266_config_softAP@softssid 0074  
    __esp8266_waitResponse@continue_loop 003A                       ??__esp8266_waitFor 0072  
                         __pcstackCOMMON 0070                             __pidataBANK1 0E75  
                __esp8266_waitFor@string 0070                           _Lcd_Set_Cursor 00E7  
                      _esp8266_isStarted 0E96                       ?_esp8266_isStarted 0070  
                              ?_Lcd_Init 0070                                ?_Lcd_Port 0070  
                        ?__esp8266_getch 0070                               __pbssBANK1 00A0  
                        ?__esp8266_print 0071                          ?__esp8266_putch 0070  
__end_of__esp8266_waitResponse@responses 0824          __esp8266_waitResponse@responses 081C  
                       _Lcd_Print_String 00AA                      ??_esp8266_isStarted 0074  
  __end_of__esp8266_waitResponse@lengths 082C            __esp8266_waitResponse@lengths 0824  
                         _Lcd_Print_Char 0FC7                               __pmaintext 05CE  
                     __size_of_revClient 0090            __esp8266_waitResponse@strings 0020  
                                ?___wmul 0070                   __end_of_Lcd_Set_Cursor 0131  
              __end_of_esp8266_isStarted 0EAB                                  ?_strlen 0070  
                 __size_of_esp8266_multi 000D                               ??_Lcd_Init 0074  
                             ??_Lcd_Port 0070                               __stringtab 0800  
                         revClient@F2055 00B3                          Lcd_Print_Char@a 0074  
                        Lcd_Print_Char@y 0073                                  _Lcd_Cmd 0EC5  
                 __end_of_Lcd_Print_Char 1000                  __esp8266_waitResponse@i 003B  
                         revClient@_temp 002E             __size_of_ESP8266_send_string 0023  
                                ___aldiv 025F                       revClient@_truesize 002A  
                        __size_of___wmul 0021                                  ___lwdiv 0032  
                                ___lwmod 0F95                          ?_Lcd_Set_Cursor 0074  
                                __ptext1 02EE                                  __ptext2 018B  
                                __ptext3 0E67                                  __ptext4 0EFD  
                                __ptext5 006E                                  __ptext6 01F4  
                                __ptext7 000B                                  __ptext8 0415  
                                __ptext9 0F95                          __size_of_strlen 0027  
                                _dpowers 0812                                  _isdigit 0E67  
                       ___aldiv@dividend 0074                        __end_of_revClient 037E  
                                _sprintf 0415                                  clrloop0 0004  
                   end_of_initialization 07FC                          ?_Lcd_Print_Char 0070  
                          _esp8266_multi 0E5A                         esp8266_mode@mode 0074  
                       ___aldiv@quotient 0022                                Lcd_Port@a 0070  
                           __pstringtext 0800                         esp8266_send@data 003C  
                                strlen@s 0070                                _UART_Init 04E6  
                ??__esp8266_waitResponse 0070               __size_of_esp8266_isStarted 0015  
                  _esp8266_config_softAP 0F64                    _esp8266_config_server 0E4D  
                      __esp8266_putch@bt 0070                           ?_esp8266_multi 0070  
                              _Lcd_Clear 0E42                           __end_of___wmul 0F1E  
                             ?_UART_Init 0026                 __end_of_Lcd_Print_String 00E7  
              __size_of__esp8266_waitFor 003C                 __esp8266_waitFor@counter 0073  
                         __end_of_strlen 0032                      start_initialization 07E8  
                       ??__esp8266_getch 0070                         ??__esp8266_print 0073  
                       ??__esp8266_putch 0070                   esp8266_send@length_str 003E  
                      __size_of_Lcd_Init 005A                        __size_of_Lcd_Port 001A  
                      Lcd_Print_String@a 0075                        Lcd_Print_String@i 007A  
                       revClient@_lenght 0025                               ?_Lcd_Clear 0070  
                               ??___wmul 0074                               init_fetch0 0E85  
                            __pdataBANK1 00B7                                 ??_strlen 0072  
                   revClient@_string_Rev 0029                                ___latbits 0002  
                 ?_esp8266_config_softAP 0074                   ?_esp8266_config_server 0070  
                          __pcstackBANK0 0020                      _ESP8266_send_string 0F1E  
         __esp8266_waitResponse@received 0038                          ??_esp8266_multi 0074  
                               ?_Lcd_Cmd 0070                              sprintf@flag 0027  
                            sprintf@prec 002B           __esp8266_waitResponse@response 0039  
           __esp8266_waitResponse@so_far 0030                         ___lwdiv@dividend 0072  
                   ?_ESP8266_send_string 0071                         ??_Lcd_Set_Cursor 0075  
                               ?___aldiv 0070                                 ?___lwdiv 0070  
                               ?___lwmod 0078                              ??_UART_Init 002A  
                               ?_isdigit 0070                         ??_Lcd_Print_Char 0071  
                       ___lwdiv@quotient 0075                                 ?_sprintf 0020  
              __esp8266_waitFor@received 0075                               UART_Init@x 0079  
                        ___aldiv@divisor 0070                                _revClient 02EE  
                        ___aldiv@counter 0020                           ___wmul@product 0074  
                              clear_ram0 0003                    ??_ESP8266_send_string 0073  
                               Lcd_Cmd@a 0073                              ??_Lcd_Clear 0074  
                      UART_Init@baudrate 0026                         __esp8266_waitFor 006E  
                            __stringbase 0812                        ___wmul@multiplier 0070  
         __size_of__esp8266_waitResponse 0097            __end_of__esp8266_waitResponse 0415  
                          ?_esp8266_mode 0070                            ?_esp8266_send 003C  
               ESP8266_send_string@st_pt 0071                                 _Lcd_Init 0131  
                               _Lcd_Port 0EAB                               ?_revClient 0020  
                       __size_of_Lcd_Cmd 001A                          revClient@_temp2 002C  
                        revClient@lenght 0020              __esp8266_waitResponse@F2066 00A0  
            __esp8266_waitResponse@F2069 00B7                         __size_of___aldiv 008F  
                       __size_of___lwdiv 003C                         __size_of___lwmod 0032  
                     __end_of__stringtab 0812                              _isdigit$480 0070  
                      ?_Lcd_Print_String 0075                           ??_esp8266_mode 0074  
                         ??_esp8266_send 007E                               sprintf@val 0029  
                     ??_Lcd_Print_String 0077                         __size_of_isdigit 000E  
                        ___lwdiv@divisor 0070                          ___lwdiv@counter 0077  
                               __ptext10 0032                                 __ptext11 0E5A  
                               __ptext20 0E30                                 __ptext12 0EDF  
                               __ptext21 04E6                                 __ptext13 0E96  
                               __ptext22 025F                                 __ptext14 0F64  
                               __ptext23 00E7                                 __ptext15 0F41  
                               __ptext24 00AA                                 __ptext16 0E4D  
                               __ptext25 0FC7                                 __ptext17 037E  
                               __ptext26 0131                                 __ptext18 0E38  
                               __ptext27 0E42                                 __ptext19 0F1E  
                               __ptext28 0EC5                                 __ptext29 0EAB  
                      __CFG_BOR4V$BOR40V 0000                         __size_of_sprintf 00D1  
                          __size_of_atoi 0069                            __size_of_main 021A  
                               atoi@sign 007A                                 main@revC 0057  
                               main@revN 0047                  ??_esp8266_config_softAP 0078  
                ??_esp8266_config_server 0074                                 init_ram0 0E89  
                               isdigit@c 0071                                sprintf@ap 0028  
                              sprintf@sp 002C                              ??_revClient 0022  
                       ___lwmod@dividend 007A                                stringcode 080A  
                      esp8266_send@F2041 00A8                       Lcd_Set_Cursor@temp 007A  
                               sprintf@c 002D                                 sprintf@f 0020  
                        ___lwmod@divisor 0078                                 strlen@cp 0074  
                        ___lwmod@counter 007D                                 stringtab 0800  
                           ___aldiv@sign 0021                 __end_of__esp8266_waitFor 00AA  
                __size_of__esp8266_getch 000A                    __end_of_esp8266_multi 0E67  
                __size_of__esp8266_print 0023                  __size_of__esp8266_putch 0008  
                   __end_of_esp8266_mode 0EFD                     __end_of_esp8266_send 025F  
